# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                    üé® POWERSHELL PROFILE v4.0 ULTRA RGB                   ‚ïë
# ‚ïë                         Ukraine Edition üá∫üá¶                                 ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

$newModulePath = "C:\Users\ketov\Documents\PowerShell\Modules"
$env:PSModulePath = $newModulePath
[Environment]::SetEnvironmentVariable("PSModulePath", $newModulePath, "User")
$env:POSH_IGNORE_ALLUSER_PROFILES = $true

# ===== –ò–ú–ü–û–†–¢ GRADIENT –§–£–ù–ö–¶–ò–ô =====
# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
$gradientPath = "C:\scripts\GradientTable.Ps1"
if (Test-Path $gradientPath) {
    . $gradientPath
}

# ===== –ú–û–î–£–õ–ò =====
$modules = @(
    'Aliases',
    'Terminal-Icons',
    'PSReadLine',
    'PSFzf',
    'PoshColor',
    'syntax-highlighting'
)

foreach ($module in $modules) {
    if (Get-Module -ListAvailable -Name $module) {
        Import-Module -Name $module -ErrorAction SilentlyContinue
    } else {
        Write-RGB "[!] –ú–æ–¥—É–ª—å $module –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: Install-Module $module" -FC Yellow
    }
}

# ===== OH-MY-POSH =====
$ompConfig = 'C:\scripts\OhMyPosh\free-ukraine.omp.json'
if (Test-Path $ompConfig) {
    oh-my-posh init pwsh --config $ompConfig | Invoke-Expression
}

# ===== RGB –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê =====
$global:RGB = @{
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    WhiteRGB         = @{ R = 255; G = 255; B = 255 }
    CyanRGB          = @{ R = 0; G = 150; B = 255 }
    MagentaRGB       = @{ R = 255; G = 0; B = 255 }
    YellowRGB        = @{ R = 255; G = 255; B = 0 }
    OrangeRGB        = @{ R = 255; G = 165; B = 0 }
    PinkRGB          = @{ R = 255; G = 20; B = 147 }
    PurpleRGB        = @{ R = 138; G = 43; B = 226 }
    LimeRGB          = @{ R = 50; G = 205; B = 50 }
    TealRGB          = @{ R = 0; G = 128; B = 128 }
    GoldRGB          = @{ R = 255; G = 215; B = 0 }
    CocoaBeanRGB     = @{ R = 79; G = 56; B = 53 }

    # –ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    NeonBlueRGB      = @{ R = 77; G = 200; B = 255 }
    NeonGreenRGB     = @{ R = 57; G = 255; B = 20 }
    NeonPinkRGB      = @{ R = 255; G = 20; B = 240 }
    NeonRedRGB       = @{ R = 255; G = 55; B = 100 }

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    Sunset1RGB       = @{ R = 255; G = 94; B = 77 }
    Sunset2RGB       = @{ R = 255; G = 154; B = 0 }
    Ocean1RGB        = @{ R = 0; G = 119; B = 190 }
    Ocean2RGB        = @{ R = 0; G = 180; B = 216 }
    Ocean3RGB        = @{ R = 0; G = 150; B = 160 }
    Ocean4RGB        = @{ R = 0; G = 205; B = 230 }

    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ üá∫üá¶
    UkraineBlueRGB   = @{ R = 0; G = 87; B = 183 }
    UkraineYellowRGB = @{ R = 255; G = 213; B = 0 }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RGB —Ü–≤–µ—Ç–∞
function Get-RGBColor {
    param($Color)
    return $PSStyle.Foreground.FromRgb($Color.R, $Color.G, $Color.B)
}

function Write-RGB {
    param(
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromRemainingArguments = $true)]
        [string[]] $Text,
        [string] $FC = 'White',
        [switch] $newline = $false
    )

    $fullText = $Text -join ' '

    $systemColors = @(
        "Black", "DarkBlue", "DarkGreen", "DarkCyan",
        "DarkRed", "DarkMagenta", "DarkYellow", "Gray",
        "DarkGray", "Blue", "Green", "Cyan",
        "Red", "Magenta", "Yellow", "White"
    )

    if ($FC -in $systemColors) {
        Write-Host $fullText -ForegroundColor $FC -NoNewline:(-not $newline)
    }
    elseif ($global:RGB.ContainsKey($FC)) {
        $rgbColor = Get-RGBColor $global:RGB[$FC]
        Write-Host "${rgbColor}${fullText}${PSStyle.Reset}" -NoNewline:(-not $newline)
    }
    elseif ($FC -match '^#[0-9A-Fa-f]{6}$') {
        $r = [Convert]::ToInt32($FC.Substring(1, 2), 16)
        $g = [Convert]::ToInt32($FC.Substring(3, 2), 16)
        $b = [Convert]::ToInt32($FC.Substring(5, 2), 16)
        $rgbColor = $PSStyle.Foreground.FromRgb($r, $g, $b)
        Write-Host "${rgbColor}${fullText}${PSStyle.Reset}" -NoNewline:(-not $newline)
    }
    else {
        Write-Host $fullText -ForegroundColor White -NoNewline:(-not $newline)
    }
}

# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–ï–ù–Æ –° –ì–†–ê–î–ò–ï–ù–¢–ê–ú–ò =====
function Show-Menu {
    param(
        [Parameter(Mandatory = $true)]
        [array]$MenuItems,
        [string]$MenuTitle = "Menu",
        [string]$Prompt = "Select option",
        [hashtable]$GradientOptions = @{
        StartColor = "#01BB01"
        EndColor = "#FF9955"
        GradientType = "Linear"
    },
        [switch]$UseAnimation
    )

    while ($true) {
        if ($MenuTitle) {
            Write-RGB "`n$MenuTitle" -FC GoldRGB -newline
            Write-RGB ("‚îÄ" * 60) -FC PurpleRGB -newline
        }

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
        if ($UseAnimation) {
            for ($i = 0; $i -lt $MenuItems.Count; $i++) {
                $num = $i + 1
                $hexColor = Get-GradientColor -Index $i -TotalItems $MenuItems.Count @GradientOptions

                Write-RGB "[" -FC NeonGreenRGB
                Write-RGB $num -FC Ocean2RGB
                Write-RGB "] " -FC NeonGreenRGB
                Write-RGB $MenuItems[$i].Text -FC $hexColor -newline

                Start-Sleep -Milliseconds 50
            }
        } else {
            for ($i = 0; $i -lt $MenuItems.Count; $i++) {
                $num = $i + 1
                $hexColor = Get-GradientColor -Index $i -TotalItems $MenuItems.Count @GradientOptions

                Write-RGB "[" -FC NeonGreenRGB
                Write-RGB $num -FC Ocean2RGB
                Write-RGB "] " -FC NeonGreenRGB
                Write-RGB $MenuItems[$i].Text -FC $hexColor -newline
            }
        }

        Write-RGB "`n" -newline
        Write-RGB "‚û§ " -FC NeonGreenRGB
        Write-RGB "$Prompt (1-$($MenuItems.Count)): " -FC White

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        $input = [Console]::ReadLine()

        if ($input -match '^\d+$') {
            $choice = [int]$input
            if ($choice -ge 1 -and $choice -le $MenuItems.Count) {
                # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
                Write-RGB "`n‚ú® " -FC YellowRGB
                Write-RGB "–í—ã–±—Ä–∞–Ω–æ: " -FC White
                Write-RGB $MenuItems[$choice - 1].Text -FC NeonGreenRGB -newline
                Start-Sleep -Milliseconds 300
                return $MenuItems[$choice - 1]
            }
        }

        Write-RGB "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." -FC Red -newline
        Start-Sleep -Seconds 1
        #Clear-Host
    }
}

# ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò PSREADLINE =====
Set-PSReadLineOption -PredictionSource HistoryAndPlugin
Set-PSReadLineOption -PredictionViewStyle ListView
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadLineOption -ShowToolTips
Set-PSReadLineOption -BellStyle Visual
Set-PSReadLineOption -EditMode Windows

# –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward
Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete
Set-PSReadLineKeyHandler -Key Ctrl+z -Function Undo
Set-PSReadLineKeyHandler -Key Ctrl+y -Function Redo
Set-PSReadLineKeyHandler -Key Ctrl+d -Function DeleteChar
Set-PSReadLineKeyHandler -Key Ctrl+w -Function BackwardDeleteWord
Set-PSReadLineKeyHandler -Key Alt+d -Function DeleteWord

# RGB —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è PSReadLine
Set-PSReadLineOption -Colors @{
    Command            = $PSStyle.Foreground.FromRgb(0, 255, 157)
    Parameter          = $PSStyle.Foreground.FromRgb(255, 101, 69)
    Operator           = $PSStyle.Foreground.FromRgb(255, 215, 0)
    Variable           = $PSStyle.Foreground.FromRgb(139, 43, 255)
    String             = $PSStyle.Foreground.FromRgb(15, 188, 249)
    Number             = $PSStyle.Foreground.FromRgb(240, 31, 255)
    Member             = $PSStyle.Foreground.FromRgb(0, 191, 255)
    Type               = $PSStyle.Foreground.FromRgb(255, 255, 255)
    Emphasis           = $PSStyle.Foreground.FromRgb(255, 145, 0)
    Error              = $PSStyle.Foreground.FromRgb(255, 0, 0)
    Selection          = $PSStyle.Background.FromRgb(64, 64, 64)
    InlinePrediction   = $PSStyle.Foreground.FromRgb(102, 102, 102)
    ListPrediction     = $PSStyle.Foreground.FromRgb(185, 185, 185)
    ContinuationPrompt = $PSStyle.Foreground.FromRgb(255, 255, 0)
}

# ===== –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
function Show-Notification {
    param(
        [string]$Title,
        [string]$Message,
        [ValidateSet("Info", "Success", "Warning", "Error")]
        [string]$Type = "Info"
    )

    $icon = switch ($Type) {
        "Success" { "‚úÖ" }
        "Warning" { "‚ö†Ô∏è" }
        "Error" { "‚ùå" }
        default { "‚ÑπÔ∏è" }
    }

    $color = switch ($Type) {
        "Success" { "LimeRGB" }
        "Warning" { "OrangeRGB" }
        "Error" { "NeonRedRGB" }
        default { "CyanRGB" }
    }

    Write-RGB "`n$icon $Title`: $Message" -FC $color -newline

    # Wezterm notification –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (Get-Command wezterm -ErrorAction SilentlyContinue) {
        wezterm cli send-text "--[\x1b]9;${Title}:${Message}\x1b\\"
    }
}

# ===== –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê =====
function Show-RGBLoader {
    param(
        [string]$Text = "Loading",
        [int]$Duration = 3
    )

    $frames = @('‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è')
    $colors = @('NeonBlueRGB', 'NeonGreenRGB', 'NeonPinkRGB', 'CyanRGB', 'MagentaRGB')

    $endTime = (Get-Date).AddSeconds($Duration)
    $i = 0

    while ((Get-Date) -lt $endTime) {
        $frame = $frames[$i % $frames.Length]
        $color = $colors[$i % $colors.Length]

        Write-RGB "`r$frame $Text..." -FC $color
        Start-Sleep -Milliseconds 100
        $i++
    }
    Write-RGB "`r‚ú® Done!    " -FC LimeRGB -newline
}

# ===== –ü–†–û–ì–†–ï–°–° –ë–ê–† –° RGB =====
function Show-RGBProgress {
    param(
        [string]$Activity = "Processing",
        [int]$TotalSteps = 100,
        [switch]$Gradient
    )

    for ($i = 0; $i -le $TotalSteps; $i++) {
        $percent = [int](($i / $TotalSteps) * 100)
        $filled = [int](($i / $TotalSteps) * 30)
        $empty = 30 - $filled

        if ($Gradient) {
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            $bar = ""
            for ($j = 0; $j -lt $filled; $j++) {
                $color = Get-GradientColor -Index $j -TotalItems 30 -StartColor "#00FF00" -EndColor "#FF0000"
                $bar += "‚ñà"
            }
            $bar += "‚ñë" * $empty

            Write-Host "`r$Activity [" -NoNewline
            for ($j = 0; $j -lt $filled; $j++) {
                $color = Get-GradientColor -Index $j -TotalItems 30 -StartColor "#00FF00" -EndColor "#FF0000"
                Write-RGB "‚ñà" -FC $color
            }
            Write-Host ("‚ñë" * $empty + "] $percent%") -NoNewline
        } else {
            $r = [int](255 * ($i / $TotalSteps))
            $g = [int](255 * (1 - $i / $TotalSteps))
            $b = 128

            $bar = "‚ñà" * $filled + "‚ñë" * $empty
            Write-RGB "`r$Activity [$bar] $percent%" -FC $PSStyle.Foreground.FromRgb($r, $g, $b)
        }

        Start-Sleep -Milliseconds 20
    }
    Write-RGB "`n‚úÖ Complete!" -FC LimeRGB -newline
}

# ===== CHOCOLATEY =====
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path($ChocolateyProfile)) {
    Write-RGB "üç´ Chocolatey Profile Loaded" -FC CocoaBeanRGB -newline
    Import-Module "$ChocolateyProfile"
}

# ===== –£–õ–£–ß–®–ï–ù–ù–´–ô LS –° RGB –ò –ò–ö–û–ù–ö–ê–ú–ò =====
function ls {
    param([string]$Path = ".")

    Write-RGB "`nüìÅ " -FC CyanRGB
    Write-RGB "Directory: " -FC CyanRGB
    Write-RGB (Resolve-Path $Path).Path -FC YellowRGB -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    $lineLength = 60
    for ($i = 0; $i -lt $lineLength; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems $lineLength -StartColor "#8B00FF" -EndColor "#00BFFF"
        Write-RGB "‚îÄ" -FC $color
    }
    Write-RGB "" -newline

    $items = Get-ChildItem $Path | Sort-Object PSIsContainer -Descending

    foreach ($item in $items) {
        if ($item.PSIsContainer) {
            Write-RGB "üìÇ " -FC Ocean1RGB
            Write-RGB ("{0,-35}" -f $item.Name) -FC Ocean1RGB
            Write-RGB " <DIR>" -FC Ocean2RGB -newline
        } else {
            $icon = switch -Wildcard ($item.Extension.ToLower()) {
                ".ps1" { "üìú" }
                ".exe" { "‚öôÔ∏è" }
                ".dll" { "üîß" }
                ".txt" { "üìÑ" }
                ".md" { "üìù" }
                ".json" { "üîÆ" }
                ".xml" { "üìã" }
                ".zip" { "üì¶" }
                ".rar" { "üì¶" }
                ".7z" { "üì¶" }
                ".pdf" { "üìï" }
                ".jpg" { "üñºÔ∏è" }
                ".png" { "üñºÔ∏è" }
                ".gif" { "üéûÔ∏è" }
                ".mp4" { "üé¨" }
                ".mp3" { "üéµ" }
                ".js" { "üü®" }
                ".jsx" { "‚öõÔ∏è" }
                ".ts" { "üî∑" }
                ".tsx" { "‚öõÔ∏è" }
                ".rs" { "ü¶Ä" }
                ".py" { "üêç" }
                ".cpp" { "üîµ" }
                ".cs" { "üü£" }
                ".html" { "üåê" }
                ".css" { "üé®" }
                ".scss" { "üé®" }
                ".vue" { "üíö" }
                ".svelte" { "üß°" }
                default { "üìÑ" }
            }

            $sizeColor = if ($item.Length -gt 1MB) { "NeonRedRGB" }
            elseif ($item.Length -gt 100KB) { "OrangeRGB" }
            else { "LimeRGB" }

            Write-RGB "$icon " -FC White
            Write-RGB ("{0,-35}" -f $item.Name) -FC NeonGreenRGB
            Write-RGB (" {0,10:N2} KB" -f ($item.Length / 1KB)) -FC $sizeColor
            Write-RGB ("  {0}" -f $item.LastWriteTime.ToString("yyyy-MM-dd HH:mm")) -FC TealRGB -newline
        }
    }

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt $lineLength; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems $lineLength -StartColor "#00BFFF" -EndColor "#8B00FF"
        Write-RGB "‚îÄ" -FC $color
    }
    Write-RGB "" -newline

    $count = $items.Count
    $dirs = ($items | Where-Object PSIsContainer).Count
    $files = $count - $dirs

    Write-RGB "üìä Total: " -FC GoldRGB
    Write-RGB "$count items " -FC White
    Write-RGB "(üìÇ $dirs dirs, üìÑ $files files)" -FC CyanRGB -newline
}

# ===== –ê–õ–ò–ê–°–´ =====
Set-Alias -Name g -Value git
Set-Alias -Name touch -Value New-Item
Set-Alias -Name ll -Value ls
Set-Alias -Name cls -Value #Clear-Host
Set-Alias -Name which -Value Get-Command

# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function cd.. { Set-Location .. }
function cd... { Set-Location ..\.. }
function cd.... { Set-Location ..\..\.. }
function ~ { Set-Location $HOME }
function desktop { Set-Location "$HOME\Desktop" }
function downloads { Set-Location "$HOME\Downloads" }
function docs { Set-Location "$HOME\Documents" }

# ===== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –° RGB =====
function Show-SystemInfo {
    Write-RGB "`nüíª SYSTEM INFORMATION" -FC NeonPinkRGB -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 50; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 50 -StartColor "#FF1493" -EndColor "#00CED1"
        Write-RGB "‚ïê" -FC $color
    }
    Write-RGB "" -newline

    $os = Get-CimInstance Win32_OperatingSystem
    $cpu = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory
    $gpu = Get-CimInstance Win32_VideoController

    # OS Info
    Write-RGB "üñ•Ô∏è  OS: " -FC CyanRGB
    Write-RGB $os.Caption -FC White -newline

    # CPU Info
    Write-RGB "üîß CPU: " -FC YellowRGB
    Write-RGB "$($cpu.Name) ($($cpu.NumberOfCores) cores)" -FC White -newline

    # Memory
    $totalMem = ($mem | Measure-Object -Property Capacity -Sum).Sum / 1GB
    Write-RGB "üíæ RAM: " -FC LimeRGB
    Write-RGB "$([Math]::Round($totalMem, 2)) GB" -FC White -newline

    # GPU
    Write-RGB "üéÆ GPU: " -FC OrangeRGB
    Write-RGB $gpu.Name -FC White -newline

    # Uptime
    $uptime = (Get-Date) - $os.LastBootUpTime
    Write-RGB "‚è±Ô∏è  Uptime: " -FC MagentaRGB
    Write-RGB "$($uptime.Days)d $($uptime.Hours)h $($uptime.Minutes)m" -FC White -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 50; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 50 -StartColor "#00CED1" -EndColor "#FF1493"
        Write-RGB "‚ïê" -FC $color
    }
    Write-RGB "" -newline
}

# ===== –°–ï–¢–ï–í–´–ï –£–¢–ò–õ–ò–¢–´ =====
function Show-NetworkInfo {
    Write-RGB "`nüåê NETWORK INFORMATION" -FC Ocean1RGB -newline
    Write-RGB ("‚ïê" * 50) -FC Ocean2RGB -newline

    # IP –∞–¥—Ä–µ—Å–∞
    $ips = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" }

    foreach ($ip in $ips) {
        Write-RGB "üîå Interface: " -FC CyanRGB
        Write-RGB $ip.InterfaceAlias -FC White -newline
        Write-RGB "   IP: " -FC YellowRGB
        Write-RGB $ip.IPAddress -FC LimeRGB -newline
    }

    # –í–Ω–µ—à–Ω–∏–π IP
    try {
        Write-RGB "`nüåç External IP: " -FC NeonGreenRGB
        $extIP = (Invoke-RestMethod -Uri "https://api.ipify.org?format=json" -TimeoutSec 5).ip
        Write-RGB $extIP -FC GoldRGB -newline
    } catch {
        Write-RGB "Unable to fetch" -FC Red -newline
    }

    Write-RGB ("‚ïê" * 50) -FC Ocean2RGB -newline
}

# ===== –ë–´–°–¢–†–´–ô PING –° –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ï–ô =====
function Test-ConnectionVisual {
    param(
        [string]$ComputerName = "google.com",
        [int]$Count = 4
    )

    Write-RGB "`nüèì PING $ComputerName" -FC NeonBlueRGB -newline
    Write-RGB ("‚îÄ" * 40) -FC PurpleRGB -newline

    for ($i = 1; $i -le $Count; $i++) {
        try {
            $result = Test-Connection -ComputerName $ComputerName -Count 1 -ErrorAction Stop
            $time = $result.ResponseTime

            $color = if ($time -lt 50) { "LimeRGB" }
            elseif ($time -lt 100) { "YellowRGB" }
            else { "NeonRedRGB" }

            $bar = "‚ñà" * [Math]::Min([int]($time / 10), 20)

            Write-RGB "[$i] " -FC White
            Write-RGB $bar -FC $color
            Write-RGB " ${time}ms" -FC $color -newline
        } catch {
            Write-RGB "[$i] ‚ùå Timeout" -FC Red -newline
        }

        Start-Sleep -Milliseconds 500
    }

    Write-RGB ("‚îÄ" * 40) -FC PurpleRGB -newline
}

# ===== WEATHER WIDGET =====
function Get-Weather {
    param([string]$City = "Lviv")

    try {
        Write-RGB "`nüå§Ô∏è  Getting weather..." -FC CyanRGB -newline
        $weather = Invoke-RestMethod -Uri "https://wttr.in/${City}?format=j1" -TimeoutSec 5
        $current = $weather.current_condition[0]

        Write-RGB "`rüå§Ô∏è  Weather in $City  " -FC CyanRGB -newline
        Write-RGB "   üå°Ô∏è  Temp: $($current.temp_C)¬∞C" -FC YellowRGB -newline
        Write-RGB "   üí® Wind: $($current.windspeedKmph) km/h" -FC LimeRGB -newline
        Write-RGB "   üíß Humidity: $($current.humidity)%" -FC Ocean1RGB -newline
    } catch {
        Write-RGB "‚ö†Ô∏è  Unable to fetch weather" -FC Yellow -newline
    }
}

# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø =====
function Show-Welcome {
    #Clear-Host

    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    $title = "POWERSHELL PROFILE v4.0"
    for ($i = 0; $i -lt $title.Length; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems $title.Length -StartColor "#0057B7" -EndColor "#FFD700"
        Write-RGB $title[$i] -FC $color
        Start-Sleep -Milliseconds 30
    }
    Write-RGB " üá∫üá¶" -newline

    Write-RGB "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -FC UkraineBlueRGB -newline

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    Write-Host "‚è∞ " -NoNewline
    Write-RGB (Get-Date -Format "dd.MM.yyyy ") -FC LimeRGB
    Write-RGB (Get-Date -Format "HH:mm") -FC WhiteRGB -newline

    Write-Host "üñ•Ô∏è  " -NoNewline
    Write-RGB "Windows 11 " -FC CyanRGB -newline
    Write-Host "‚ö° " -NoNewline
    Write-RGB "PowerShell " -FC YellowRGB
    Write-RGB "$($PSVersionTable.PSVersion)" -FC NeonGreenRGB -newline

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $processCount = (Get-Process).Count
    Write-RGB "‚öôÔ∏è  Processes: " -FC OrangeRGB
    Write-RGB "$processCount" -FC NeonBlueRGB
    Write-RGB " running" -FC OrangeRGB -newline

    # CPU –∏ RAM —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    Write-RGB "üìä " -FC White
    Write-RGB "CPU: " -FC CyanRGB
    $cpuUsage = [math]::Round((Get-Counter "\Processor(_Total)\% Processor Time" -ErrorAction SilentlyContinue).CounterSamples.CookedValue, 1)
    Write-RGB "$cpuUsage%" -FC NeonGreenRGB
    Write-RGB " | " -FC White
    Write-RGB "RAM: " -FC MagentaRGB
    $availableRam = [math]::Round((Get-Counter "\Memory\Available MBytes" -ErrorAction SilentlyContinue).CounterSamples.CookedValue / 1024, 1)
    Write-RGB "$availableRam GB free" -FC NeonPinkRGB -newline

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    Write-RGB "`nüí° " -FC White
    Write-RGB "Type " -FC Gray
    Write-RGB "Show-MainMenu" -FC NeonPinkRGB
    Write-RGB " or " -FC Gray
    Write-RGB "menu" -FC LimeRGB
    Write-RGB " to open the main menu" -FC Gray -newline

    Write-RGB "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -FC UkraineYellowRGB -newline
}

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô =====
function Run-Application {
    $menuItems = @(
        @{ Text = "üíª WebStorm 2025.2 EAP"; Data = @{ Path = "C:\Users\ketov\AppData\Local\Programs\WebStorm\bin\webstorm64.exe" } },
        @{ Text = "üìù Zed"; Data = @{ Path = "zed" } },
        @{ Text = "üñ•Ô∏è  Wezterm"; Data = @{ Path = "C:\Program Files\WezTerm\wezterm-gui.exe" } },
        @{ Text = "ü™ü Windows Terminal Preview"; Data = @{ Path = "wt" } },
        @{ Text = "üí¨ Telegram"; Data = @{ Path = "telegram" } },
        @{ Text = "üìò VS Code"; Data = @{ Path = "code" } },
        @{ Text = "üìó VS Code Insiders"; Data = @{ Path = "code-insiders" } },
        @{ Text = "ü¶Ä RustRover"; Data = @{ Path = "rustrover" } },
        @{ Text = "üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä"; Data = @{ Action = "browser" } },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = @{ Action = "back" } }
    )

    $gradientOptions = @{
        StartColor = "#00FF00"
        EndColor = "#FF00FF"
        GradientType = "Sine"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–ô" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" -GradientOptions $gradientOptions

    if ($selected.Data.Action -eq "browser") {
        Run-Browser
    } elseif ($selected.Data.Action -eq "back") {
        Show-MainMenu
    } else {
        try {
            Write-RGB "`nüöÄ –ó–∞–ø—É—Å–∫–∞—é " -FC White
            Write-RGB $selected.Text -FC NeonGreenRGB -newline
            Start-Process $selected.Data.Path -ErrorAction Stop
            Show-Notification -Title "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ" -Message $selected.Text -Type "Success"
        } catch {
            Show-Notification -Title "–û—à–∏–±–∫–∞" -Message "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" -Type "Error"
        }
    }
}

# ===== –ú–ï–ù–Æ –ë–†–ê–£–ó–ï–†–û–í –° RGB =====
function Run-Browser {
    $browsers = @(
        @{ Text = "ü¶ä Firefox Nightly"; Data = "firefox"; Args = "-P nightly" },
        @{ Text = "ü¶ä Firefox Developer"; Data = "firefox"; Args = "-P dev-edition-default" },
        @{ Text = "ü¶ä Firefox"; Data = "firefox" },
        @{ Text = "üî∂ Chrome Canary"; Data = "chrome"; Args = "--chrome-canary" },
        @{ Text = "üî∑ Chrome Dev"; Data = "chrome"; Args = "--chrome-dev" },
        @{ Text = "üîµ Chrome"; Data = "chrome" },
        @{ Text = "üü¶ Edge Canary"; Data = "msedge-canary" },
        @{ Text = "üü¶ Edge Dev"; Data = "msedge-dev" },
        @{ Text = "üü¶ Edge"; Data = "msedge" },
        @{ Text = "üé≠ Opera"; Data = "opera" },
        @{ Text = "üé® Vivaldi"; Data = "vivaldi" },
        @{ Text = "üßÖ Tor"; Data = "tor" },
        @{ Text = "üî∑ Chromium"; Data = "chromium" },
        @{ Text = "ü¶Å Brave"; Data = "brave" },
        @{ Text = "üåä Floorp"; Data = "floorp" },
        @{ Text = "üíß Waterfox"; Data = "waterfox" },
        @{ Text = "‚ö° Thorium"; Data = "thorium" },
        @{ Text = "üê∫ LibreWolf"; Data = "librewolf" },
        @{ Text = "üü° Yandex"; Data = "yandex" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#FF6B6B"
        EndColor = "#4ECDC4"
        GradientType = "Exponential"
    }

    $selected = Show-Menu -MenuItems $browsers -MenuTitle "üåê –í–´–ë–û–† –ë–†–ê–£–ó–ï–†–ê" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä" -GradientOptions $gradientOptions

    if ($selected.Data -eq "back") {
        Run-Application
    } else {
        try {
            Write-RGB "`nüåê –ó–∞–ø—É—Å–∫–∞—é " -FC White
            Write-RGB $selected.Text -FC Ocean1RGB -newline

            if ($selected.Args) {
                Start-Process $selected.Data -ArgumentList $selected.Args -ErrorAction Stop
            } else {
                Start-Process $selected.Data -ErrorAction Stop
            }

            Show-Notification -Title "–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω" -Message $selected.Text -Type "Success"
        } catch {
            Show-Notification -Title "–û—à–∏–±–∫–∞" -Message "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" -Type "Error"
        }
    }
}

# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê =====
function Show-DevToolsMenu {
    $menuItems = @(
        @{ Text = "ü¶Ä Rust: –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ nightly"; Data = "rust-update" },
        @{ Text = "üì¶ Cargo: –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; Data = "cargo-update" },
        @{ Text = "‚ö° Bun: –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; Data = "bun-update" },
        @{ Text = "üöÄ Bun: dev server"; Data = "bun-dev" },
        @{ Text = "üèóÔ∏è  Bun: build –ø—Ä–æ–µ–∫—Ç"; Data = "bun-build" },
        @{ Text = "üìù Zed: –æ–±–Ω–æ–≤–∏—Ç—å (scoop)"; Data = "zed-update" },
        @{ Text = "üì¶ Winget: –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ"; Data = "winget-update" },
        @{ Text = "üíæ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"; Data = "db-ops" },
        @{ Text = "üîç –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–æ–≤"; Data = "port-scan" },
        @{ Text = "üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"; Data = "sys-monitor" },
        @{ Text = "üéØ –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"; Data = "net-tools" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#FF8C00"
        EndColor = "#FF1493"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üõ†Ô∏è  –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions -UseAnimation

    switch ($selected.Data) {
        "rust-update" {
            Write-RGB "`nü¶Ä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Rust..." -FC OrangeRGB -newline
            Show-RGBLoader -Text "Updating Rust to nightly" -Duration 2
            rustup update nightly
            Write-RGB "‚úÖ Rust –æ–±–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "cargo-update" {
            Write-RGB "`nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Cargo –ø–∞–∫–µ—Ç–æ–≤..." -FC NeonBlueRGB -newline
            cargo update -v
            Write-RGB "‚úÖ –ü–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "bun-update" {
            Write-RGB "`n‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bun –ø–∞–∫–µ—Ç–æ–≤..." -FC YellowRGB -newline
            bun update
            Write-RGB "‚úÖ Bun –ø–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "bun-dev" {
            $projectDir = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π)"
            if (-not $projectDir) { $projectDir = Get-Location }
            Set-Location $projectDir
            Write-RGB "üöÄ –ó–∞–ø—É—Å–∫ Bun dev server..." -FC LimeRGB -newline
            bun run dev
        }
        "bun-build" {
            $projectDir = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π)"
            if (-not $projectDir) { $projectDir = Get-Location }
            Set-Location $projectDir
            Write-RGB "üèóÔ∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -FC CyanRGB -newline
            Show-RGBProgress -Activity "Building project" -TotalSteps 100 -Gradient
            bun run build
            Write-RGB "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "port-scan" {
            Show-PortScanner
            Pause
            Show-DevToolsMenu
        }
        "sys-monitor" {
            Show-SystemMonitor
            Pause
            Show-DevToolsMenu
        }
        "db-ops" {
            Show-DatabaseMenu
        }
        "net-tools" {
            Show-NetworkToolsMenu
        }
        "zed-update" {
            Write-RGB "`nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Zed —á–µ—Ä–µ–∑ Scoop..." -FC CyanRGB -newline
            scoop update zed
            Write-RGB "‚úÖ Zed –æ–±–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "winget-update" {
            Write-RGB "`nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ Winget..." -FC MagentaRGB -newline
            winget upgrade --all
            Write-RGB "‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ù–û–í–û–ï –ú–ï–ù–Æ –°–ï–¢–ï–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í =====
function Show-NetworkToolsMenu {
    $menuItems = @(
        @{ Text = "üåê –ê–Ω–∞–ª–∏–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"; Data = "http-headers" },
        @{ Text = "üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"; Data = "ssl-check" },
        @{ Text = "üì° DNS lookup"; Data = "dns-lookup" },
        @{ Text = "üîç Traceroute"; Data = "traceroute" },
        @{ Text = "üìä Netstat –∞–Ω–∞–ª–∏–∑"; Data = "netstat" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#1E90FF"
        EndColor = "#00CED1"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üéØ –°–ï–¢–ï–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "http-headers" {
            $url = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ URL"
            try {
                $response = Invoke-WebRequest -Uri $url -Method Head
                Write-RGB "`nüìã HTTP Headers –¥–ª—è $url`:" -FC CyanRGB -newline
                $response.Headers | Format-Table -AutoSize
            } catch {
                Write-RGB "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤" -FC Red -newline
            }
            Pause
            Show-NetworkToolsMenu
        }
        "ssl-check" {
            $host = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω"
            Write-RGB "`nüîì –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –¥–ª—è $host`..." -FC YellowRGB -newline
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            try {
                $tcpClient.Connect($host, 443)
                $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream())
                $sslStream.AuthenticateAsClient($host)
                $cert = $sslStream.RemoteCertificate
                Write-RGB "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: $($cert.GetExpirationDateString())" -FC LimeRGB -newline
            } catch {
                Write-RGB "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL" -FC Red -newline
            } finally {
                $tcpClient.Close()
            }
            Pause
            Show-NetworkToolsMenu
        }
        "dns-lookup" {
            $domain = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω"
            Write-RGB "`nüì° DNS lookup –¥–ª—è $domain`:" -FC MagentaRGB -newline
            Resolve-DnsName $domain | Format-Table -AutoSize
            Pause
            Show-NetworkToolsMenu
        }
        "traceroute" {
            $target = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
            Write-RGB "`nüîç Traceroute –∫ $target`:" -FC OrangeRGB -newline
            Test-NetConnection -ComputerName $target -TraceRoute
            Pause
            Show-NetworkToolsMenu
        }
        "netstat" {
            Write-RGB "`nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:" -FC CyanRGB -newline
            netstat -an | Select-String "ESTABLISHED|LISTENING" | Select-Object -First 20
            Pause
            Show-NetworkToolsMenu
        }
        "back" {
            Show-DevToolsMenu
        }
    }
}

# ===== –ú–ï–ù–Æ –ë–ê–ó –î–ê–ù–ù–´–• =====
function Show-DatabaseMenu {
    $menuItems = @(
        @{ Text = "üêò PostgreSQL —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "postgres" },
        @{ Text = "ü¶≠ MySQL —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "mysql" },
        @{ Text = "üçÉ MongoDB —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "mongodb" },
        @{ Text = "üî¥ Redis —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "redis" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#32CD32"
        EndColor = "#00FA9A"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –ë–î" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "postgres" {
            Write-RGB "`nüêò PostgreSQL –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC CyanRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: pg_ctl start" -FC White -newline
            Write-RGB "2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: pg_ctl stop" -FC White -newline
            Write-RGB "3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: psql -U username -d database" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "mysql" {
            Write-RGB "`nü¶≠ MySQL –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC YellowRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: net start mysql" -FC White -newline
            Write-RGB "2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: mysql -u root -p" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "mongodb" {
            Write-RGB "`nüçÉ MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC LimeRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: mongod" -FC White -newline
            Write-RGB "2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: mongosh" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "redis" {
            Write-RGB "`nüî¥ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC Red -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: redis-server" -FC White -newline
            Write-RGB "2. CLI: redis-cli" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "back" {
            Show-DevToolsMenu
        }
    }
}

# ===== –°–ö–ê–ù–ï–† –ü–û–†–¢–û–í =====
function Show-PortScanner {
    Write-RGB "`nüîç PORT SCANNER" -FC NeonPinkRGB -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 50; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 50 -StartColor "#FF69B4" -EndColor "#FF1493"
        Write-RGB "‚îÄ" -FC $color
    }
    Write-RGB "" -newline

    $commonPorts = @{
        "3000"  = "Node.js / React"
        "3001"  = "Node.js Alt"
        "5173"  = "Vite"
        "5432"  = "PostgreSQL"
        "3306"  = "MySQL"
        "6379"  = "Redis"
        "27017" = "MongoDB"
        "8080"  = "HTTP Alt"
        "8000"  = "Django/Python"
        "4200"  = "Angular"
        "8081"  = "HTTP Alt 2"
        "5174"  = "Vite Alt"
        "1234"  = "Debug Port"
        "9229"  = "Node Debug"
    }

    $i = 0
    foreach ($port in $commonPorts.Keys | Sort-Object) {
        $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue -InformationLevel Quiet

        $portColor = Get-GradientColor -Index $i -TotalItems $commonPorts.Count -StartColor "#00FF00" -EndColor "#FF0000"

        if ($connection) {
            Write-RGB "‚úÖ Port " -FC White
            Write-RGB $port -FC $portColor
            Write-RGB " - " -FC White
            Write-RGB "OPEN" -FC NeonGreenRGB
            Write-RGB " ($($commonPorts[$port]))" -FC CyanRGB -newline
        } else {
            Write-RGB "‚ùå Port " -FC White
            Write-RGB $port -FC DarkGray
            Write-RGB " - " -FC White
            Write-RGB "CLOSED" -FC Gray
            Write-RGB " ($($commonPorts[$port]))" -FC DarkGray -newline
        }
        $i++
    }
}

# ===== –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–† =====
function Show-SystemMonitor {
    Write-RGB "`nüìä SYSTEM MONITOR" -FC GoldRGB -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 60; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 60 -StartColor "#FFD700" -EndColor "#FF4500"
        Write-RGB "‚ïê" -FC $color
    }
    Write-RGB "" -newline

    # CPU
    $cpu = Get-CimInstance Win32_Processor
    $cpuLoad = (Get-Counter "\Processor(_Total)\% Processor Time" -ErrorAction SilentlyContinue).CounterSamples.CookedValue
    $cpuColor = if ($cpuLoad -gt 80) { "NeonRedRGB" }
    elseif ($cpuLoad -gt 50) { "OrangeRGB" }
    else { "LimeRGB" }

    Write-RGB "`nüîß CPU Usage: " -FC CyanRGB

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è CPU
    $cpuBar = ""
    $cpuFilled = [int]($cpuLoad / 5)
    for ($j = 0; $j -lt $cpuFilled; $j++) {
        $barColor = Get-GradientColor -Index $j -TotalItems 20 -StartColor "#00FF00" -EndColor "#FF0000"
        Write-RGB "‚ñà" -FC $barColor
    }
    Write-Host ("‚ñë" * (20 - $cpuFilled)) -NoNewline
    Write-RGB " $([Math]::Round($cpuLoad, 1))%" -FC $cpuColor -newline

    # Memory
    $os = Get-CimInstance Win32_OperatingSystem
    $totalMem = $os.TotalVisibleMemorySize / 1MB
    $freeMem = $os.FreePhysicalMemory / 1MB
    $usedMem = $totalMem - $freeMem
    $memPercent = [int](($usedMem / $totalMem) * 100)

    Write-RGB "üíæ Memory Usage: " -FC YellowRGB

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –ø–∞–º—è—Ç–∏
    $memFilled = [int]($memPercent / 5)
    for ($j = 0; $j -lt $memFilled; $j++) {
        $barColor = Get-GradientColor -Index $j -TotalItems 20 -StartColor "#0080FF" -EndColor "#FF0080"
        Write-RGB "‚ñà" -FC $barColor
    }
    Write-Host ("‚ñë" * (20 - $memFilled)) -NoNewline
    Write-RGB " $memPercent% " -FC White
    Write-RGB "($([Math]::Round($usedMem, 1))GB / $([Math]::Round($totalMem, 1))GB)" -FC White -newline

    # Top processes —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    Write-RGB "`nüèÉ TOP PROCESSES BY CPU:" -FC MagentaRGB -newline
    $topProcesses = Get-Process | Sort-Object CPU -Descending | Select-Object -First 5
    $procIndex = 0
    foreach ($proc in $topProcesses) {
        $procColor = Get-GradientColor -Index $procIndex -TotalItems 5 -StartColor "#FF00FF" -EndColor "#00FFFF"
        Write-RGB "   ‚Ä¢ " -FC PurpleRGB
        Write-RGB ("{0,-20}" -f $proc.ProcessName) -FC $procColor
        Write-RGB "CPU: $([Math]::Round($proc.CPU, 2))s " -FC CyanRGB
        Write-RGB "Mem: $([Math]::Round($proc.WS / 1MB, 1))MB" -FC YellowRGB -newline
        $procIndex++
    }
}

# ===== –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ô–ö–ò POWERSHELL =====
function Show-PowerShellConfigMenu {
    $menuItems = @(
        @{ Text = "üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É"; Data = "colors" },
        @{ Text = "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"; Data = "edit-profile" },
        @{ Text = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"; Data = "reload" },
        @{ Text = "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏"; Data = "install-modules" },
        @{ Text = "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PSReadLine"; Data = "psreadline" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#8A2BE2"
        EndColor = "#4169E1"
        GradientType = "Sine"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ê POWERSHELL" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "colors" {
            Show-ColorSchemeMenu
        }
        "edit-profile" {
            if (Get-Command code -ErrorAction SilentlyContinue) {
                code $PROFILE
            } else {
                notepad $PROFILE
            }
            Show-PowerShellConfigMenu
        }
        "reload" {
            Write-RGB "`nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è..." -FC YellowRGB -newline
            . $PROFILE
            Write-RGB "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-PowerShellConfigMenu
        }
        "install-modules" {
            Show-ModuleInstallMenu
        }
        "psreadline" {
            Write-RGB "`n‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PSReadLine:" -FC CyanRGB -newline
            Get-PSReadLineOption | Format-List
            Pause
            Show-PowerShellConfigMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ú–ï–ù–Æ –£–°–¢–ê–ù–û–í–ö–ò –ú–û–î–£–õ–ï–ô =====
function Show-ModuleInstallMenu {
    $modules = @(
        @{ Text = "üìä ImportExcel - —Ä–∞–±–æ—Ç–∞ —Å Excel"; Data = "ImportExcel" },
        @{ Text = "üé® PowerColorLS - —Ü–≤–µ—Ç–Ω–æ–π ls"; Data = "PowerColorLS" },
        @{ Text = "üìÅ z - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è"; Data = "z" },
        @{ Text = "üîç PSEverything - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"; Data = "PSEverything" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $selected = Show-Menu -MenuItems $modules -MenuTitle "üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ú–û–î–£–õ–ï–ô" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å"

    if ($selected.Data -eq "back") {
        Show-PowerShellConfigMenu
    } else {
        Write-RGB "`nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è $($selected.Data)..." -FC CyanRGB -newline
        Install-Module -Name $selected.Data -Scope CurrentUser -Force
        Write-RGB "‚úÖ –ú–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
        Import-Module $selected.Data
        Pause
        Show-ModuleInstallMenu
    }
}

# ===== –ú–ï–ù–Æ –û–ß–ò–°–¢–ö–ò –°–ò–°–¢–ï–ú–´ =====
function Show-CleanupMenu {
    $menuItems = @(
        @{ Text = "üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"; Data = "temp" },
        @{ Text = "üìÅ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"; Data = "cache" },
        @{ Text = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"; Data = "recycle" },
        @{ Text = "üíæ –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"; Data = "disk-space" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#228B22"
        EndColor = "#FF6347"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üßπ –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "temp" {
            Write-RGB "`nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." -FC YellowRGB -newline
            $tempFolders = @($env:TEMP, "C:\Windows\Temp")
            foreach ($folder in $tempFolders) {
                Get-ChildItem $folder -Recurse -Force -ErrorAction SilentlyContinue |
                        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
            }
            Write-RGB "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "cache" {
            Write-RGB "`nüìÅ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞..." -FC OrangeRGB -newline
            Clear-RecycleBin -Force -ErrorAction SilentlyContinue
            Write-RGB "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "recycle" {
            Write-RGB "`nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã..." -FC CyanRGB -newline
            Clear-RecycleBin -Force -ErrorAction SilentlyContinue
            Write-RGB "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "disk-space" {
            Show-DiskSpaceAnalysis
            Pause
            Show-CleanupMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê =====
function Show-DiskSpaceAnalysis {
    Write-RGB "`nüíæ –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê" -FC GoldRGB -newline

    Get-PSDrive -PSProvider FileSystem | ForEach-Object {
        if ($_.Used -gt 0) {
            $usedPercent = [Math]::Round(($_.Used / ($_.Used + $_.Free)) * 100, 2)

            Write-RGB "`nüìÅ –î–∏—Å–∫ " -FC White
            Write-RGB "$($_.Name):" -FC CyanRGB -newline

            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            $filled = [int]($usedPercent / 3.33)
            for ($i = 0; $i -lt $filled; $i++) {
                $color = Get-GradientColor -Index $i -TotalItems 30 -StartColor "#00FF00" -EndColor "#FF0000"
                Write-RGB "‚ñà" -FC $color
            }
            Write-Host ("‚ñë" * (30 - $filled)) -NoNewline

            Write-RGB " $usedPercent%" -FC White -newline
            Write-RGB "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " -FC White
            Write-RGB "$([Math]::Round($_.Used / 1GB, 2)) GB" -FC YellowRGB
            Write-RGB " | –°–≤–æ–±–æ–¥–Ω–æ: " -FC White
            Write-RGB "$([Math]::Round($_.Free / 1GB, 2)) GB" -FC LimeRGB -newline
        }
    }
}

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –° RGB =====
function Show-MainMenu {
    #Clear-Host

    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    $title = "üåà POWERSHELL ULTRA MENU üåà"
    $padding = " " * ((60 - $title.Length) / 2)

    Write-Host $padding -NoNewline
    for ($i = 0; $i -lt $title.Length; $i++) {
        if ($title[$i] -ne ' ') {
            $color = Get-GradientColor -Index $i -TotalItems $title.Length -StartColor "#FF0080" -EndColor "#00FFFF"
            Write-RGB $title[$i] -FC $color
        } else {
            Write-Host " " -NoNewline
        }
    }
    Write-RGB "" -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 60; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 60 -StartColor "#FFD700" -EndColor "#0057B7"
        Write-RGB "‚ïê" -FC $color
    }
    Write-RGB "" -newline

    $menuItems = @(
        @{ Text = "üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"; Data = "dev-tools" },
        @{ Text = "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"; Data = "run-application" },
        @{ Text = "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PowerShell"; Data = "powershell-config" },
        @{ Text = "üßπ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"; Data = "system-cleanup" },
        @{ Text = "üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"; Data = "system-info" },
        @{ Text = "üåê –°–µ—Ç–µ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã"; Data = "network-utils" },
        @{ Text = "üé® RGB Demo"; Data = "rgb-demo" },
        @{ Text = "üö™ –í—ã—Ö–æ–¥"; Data = "exit" }
    )

    $gradientOptions = @{
        StartColor = "#01BB01"
        EndColor = "#FF9955"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "dev-tools" { Show-DevToolsMenu }
        "run-application" { Run-Application }
        "powershell-config" { Show-PowerShellConfigMenu }
        "system-cleanup" { Show-CleanupMenu }
        "system-info" {
            Show-SystemInfo
            Write-RGB "`n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É..." -FC CyanRGB -newline
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
            Show-MainMenu
        }
        "network-utils" { Show-NetworkMenu }
        "rgb-demo" { Show-RGBDemo }
        "exit" {
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞
            Write-RGB "`nüëã " -FC White
            $goodbye = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            for ($i = 0; $i -lt $goodbye.Length; $i++) {
                $color = Get-GradientColor -Index $i -TotalItems $goodbye.Length -StartColor "#FFD700" -EndColor "#FF1493"
                Write-RGB $goodbye[$i] -FC $color
                Start-Sleep -Milliseconds 100
            }
            Write-RGB "" -newline
            return
        }
    }
}

# ===== –°–ï–¢–ï–í–û–ï –ú–ï–ù–Æ =====
function Show-NetworkMenu {
    $menuItems = @(
        @{ Text = "üåê –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"; Data = "info" },
        @{ Text = "üèì Ping —Ç–µ—Å—Ç"; Data = "ping" },
        @{ Text = "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã"; Data = "ports" },
        @{ Text = "üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"; Data = "speed" },
        @{ Text = "üåç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"; Data = "external-ip" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#1E90FF"
        EndColor = "#00FA9A"
        GradientType = "Exponential"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üåê –°–ï–¢–ï–í–´–ï –£–¢–ò–õ–ò–¢–´" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "info" {
            Show-NetworkInfo
            Pause
            Show-NetworkMenu
        }
        "ping" {
            $target = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é google.com)"
            if (-not $target) { $target = "google.com" }
            Test-ConnectionVisual -ComputerName $target
            Pause
            Show-NetworkMenu
        }
        "ports" {
            Show-PortScanner
            Pause
            Show-NetworkMenu
        }
        "speed" {
            Write-RGB "`nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞..." -FC YellowRGB -newline
            if (Get-Command speedtest -ErrorAction SilentlyContinue) {
                speedtest
            } else {
                Write-RGB "‚ö†Ô∏è  Speedtest CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -FC OrangeRGB -newline
                Write-RGB "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: winget install Ookla.Speedtest" -FC CyanRGB -newline
            }
            Pause
            Show-NetworkMenu
        }
        "external-ip" {
            try {
                Write-RGB "`nüåç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP..." -FC CyanRGB -newline
                $ip = (Invoke-RestMethod -Uri "https://api.ipify.org?format=json").ip
                $ipInfo = Invoke-RestMethod -Uri "http://ip-api.com/json/$ip"

                Write-RGB "üìç IP: " -FC White
                Write-RGB $ip -FC NeonGreenRGB -newline
                Write-RGB "üåç –°—Ç—Ä–∞–Ω–∞: " -FC White
                Write-RGB $ipInfo.country -FC YellowRGB -newline
                Write-RGB "üèôÔ∏è  –ì–æ—Ä–æ–¥: " -FC White
                Write-RGB $ipInfo.city -FC CyanRGB -newline
                Write-RGB "üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: " -FC White
                Write-RGB $ipInfo.isp -FC MagentaRGB -newline
            } catch {
                Write-RGB "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" -FC Red -newline
            }
            Pause
            Show-NetworkMenu
        }
        "back" { Show-MainMenu }
    }
}

# ===== RGB DEMO =====
function Show-RGBDemo {
    #Clear-Host
    Write-RGB "`nüåà RGB COLOR DEMONSTRATION üåà" -FC UkraineBlueRGB -newline

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–∏–Ω–∏—è
    for ($i = 0; $i -lt 60; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems 60 -StartColor "#FF0000" -EndColor "#0000FF" -GradientType "Sine"
        Write-RGB "‚ïê" -FC $color
    }
    Write-RGB "" -newline

    # –¶–≤–µ—Ç–æ–≤–∞—è –≤–æ–ª–Ω–∞
    Write-RGB "`nüé® Color Wave:" -FC White -newline
    for ($i = 0; $i -lt 360; $i += 5) {
        $r = [Math]::Sin($i * [Math]::PI / 180) * 127 + 128
        $g = [Math]::Sin(($i + 120) * [Math]::PI / 180) * 127 + 128
        $b = [Math]::Sin(($i + 240) * [Math]::PI / 180) * 127 + 128
        Write-RGB "‚ñà" -FC $PSStyle.Foreground.FromRgb([int]$r, [int]$g, [int]$b)
    }
    Write-RGB "" -newline

    # –ú–∞—Ç—Ä–∏—Ü–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    Write-RGB "`nüíª Matrix Effect:" -FC LimeRGB -newline
    for ($row = 0; $row -lt 5; $row++) {
        for ($col = 0; $col -lt 40; $col++) {
            $char = [char](Get-Random -Minimum 33 -Maximum 126)
            $greenShade = Get-GradientColor -Index $col -TotalItems 40 -StartColor "#00FF00" -EndColor "#003300"
            Write-RGB $char -FC $greenShade
        }
        Write-RGB "" -newline
    }

    # –ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    Write-RGB "`n‚ú® Neon Colors:" -FC White -newline
    $neonColors = @("NeonBlueRGB", "NeonGreenRGB", "NeonPinkRGB", "NeonRedRGB", "CyanRGB", "MagentaRGB", "YellowRGB", "OrangeRGB")
    foreach ($colorName in $neonColors) {
        Write-RGB "‚ñà‚ñà‚ñà‚ñà " -FC $colorName
        Write-RGB $colorName -FC $colorName -newline
    }

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    Write-RGB "`nüéØ Gradient Text:" -FC White -newline
    $text = "POWERSHELL ROCKS!"
    for ($i = 0; $i -lt $text.Length; $i++) {
        $color = Get-GradientColor -Index $i -TotalItems $text.Length -StartColor "#FF00FF" -EndColor "#00FFFF" -GradientType "Exponential"
        Write-RGB $text[$i] -FC $color
    }
    Write-RGB "" -newline

    Write-RGB "`n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É..." -FC CyanRGB -newline
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Show-MainMenu
}

# ===== –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–ï–ö–¢–û–í =====
function proj {
    param([string]$Name)

    $projects = @{
        "tauri"  = "C:\Projects\TauriApp"
        "react"  = "C:\Projects\ReactApp"
        "rust"   = "C:\Projects\RustProject"
        "web3"   = "C:\Projects\Web3App"
        "vite"   = "C:\Projects\ViteApp"
    }

    if ($Name -and $projects.ContainsKey($Name)) {
        Set-Location $projects[$Name]
        Write-RGB "üìÅ Switched to project: " -FC White
        Write-RGB $Name -FC NeonGreenRGB -newline
        ls
    } else {
        Write-RGB "üìÅ Available projects:" -FC CyanRGB -newline
        $i = 0
        $projects.Keys | Sort-Object | ForEach-Object {
            $color = Get-GradientColor -Index $i -TotalItems $projects.Count -StartColor "#00FF00" -EndColor "#FF00FF"
            Write-RGB "   ‚Ä¢ " -FC White
            Write-RGB $_ -FC $color
            Write-RGB " ‚Üí " -FC White
            Write-RGB $projects[$_] -FC DarkGray -newline
            $i++
        }
    }
}

# ===== –ê–õ–ò–ê–° –î–õ–Ø –ë–´–°–¢–†–û–ì–û –î–û–°–¢–£–ü–ê –ö –ú–ï–ù–Æ =====
Set-Alias -Name menu -Value Show-MainMenu

# ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° SECURITYWATCHER =====
if (Get-Module -ListAvailable -Name SecurityWatcher) {
    Import-Module SecurityWatcher -ErrorAction SilentlyContinue
    Write-RGB "üõ°Ô∏è  SecurityWatcher loaded" -FC LimeRGB -newline
}

# ===== –ü–û–ö–ê–ó–ê–¢–¨ –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====
Show-Welcome