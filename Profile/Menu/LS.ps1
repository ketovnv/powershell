Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1") -start

function Get-FormattedFileSize {
    <#
    .SYNOPSIS
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    #>
    param(
        [long]$Size,
        [switch]$ColorOnly
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞
    $color = if ($Size -eq 0) {
        '#666666'
    }
    elseif ($Size -lt 1KB) {
        '#00AA00'
    }
    elseif ($Size -lt 1MB) {
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –∫ –∂–µ–ª—Ç–æ–º—É
        $percent = [Math]::Min($Size / 1MB, 1)
        $r = [int](255 * $percent)
        $g = [int](255 * (1 - $percent * 0.3))
        $b = 0
        ConvertFrom-RGBToHex -R $r -G $g -B $b
    }
    elseif ($Size -lt 100MB) {
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∂–µ–ª—Ç–æ–≥–æ –∫ –æ—Ä–∞–Ω–∂–µ–≤–æ–º—É
        $percent = [Math]::Min(($Size - 1MB) / 99MB, 1)
        $r = 255
        $g = [int](255 - 100 * $percent)
        $b = 0
        ConvertFrom-RGBToHex -R $r -G $g -B $b
    }
    elseif ($Size -lt 1GB) {
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É
        $percent = [Math]::Min(($Size - 100MB) / 900MB, 1)
        $r = 255
        $g = [int](155 - 155 * $percent)
        $b = 0
        ConvertFrom-RGBToHex -R $r -G $g -B $b
    }
    else {
        '#FF0000'
    }
    
    if ($ColorOnly) {
        return $color
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    $formatted = if ($Size -eq 0) {
        "     0 B  "
    }
    elseif ($Size -lt 1KB) {
        "{0,6} B  " -f $Size
    }
    elseif ($Size -lt 1MB) {
        "{0,6:N1} KB" -f ($Size / 1KB)
    }
    elseif ($Size -lt 1GB) {
        "{0,6:N1} MB" -f ($Size / 1MB)
    }
    elseif ($Size -lt 1TB) {
        "{0,6:N1} GB" -f ($Size / 1GB)
    }
    else {
        "{0,6:N1} TB" -f ($Size / 1TB)
    }
    
    return @{
        Text  = $formatted
        Color = $color
    }
}

function Get-FormattedDate {
    <#
    .SYNOPSIS
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –¥–∞–≤–Ω–æ—Å—Ç–∏
    #>
    param(
        [DateTime]$Date,
        [switch]$Detailed
    )
    
    $age = (Get-Date) - $Date
    
    # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
    $color = if ($age.TotalDays -lt 1) {
        '#00FF00'  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–æ–≤—ã—Ö
    }
    elseif ($age.TotalDays -lt 7) {
        '#88FF88'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö
    }
    elseif ($age.TotalDays -lt 30) {
        '#FFFF88'  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö
    }
    elseif ($age.TotalDays -lt 365) {
        '#FF8888'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≥–æ–¥–æ–≤—ã—Ö
    }
    else {
        '#888888'  # –°–µ—Ä—ã–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    $formatted = if ($age.TotalDays -lt 1) {
        if ($age.TotalHours -lt 1) {
            "{0,3}m ago" -f [int]$age.TotalMinutes
        }
        else {
            "{0,3}h ago" -f [int]$age.TotalHours
        }
    }
    elseif ($age.TotalDays -lt 7) {
        "{0,3}d ago" -f [int]$age.TotalDays
    }
    elseif ($age.TotalDays -lt 30) {
        $Date.ToString("dd MMM")
    }
    elseif ($age.TotalDays -lt 365) {
        $Date.ToString("dd MMM")
    }
    else {
        $Date.ToString("MMM yyyy")
    }
    
    return @{
        Text  = $formatted
        Color = $color
    }
}

function Show-DirectoryListing {
    <#
    .SYNOPSIS
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    .PARAMETER Path
    –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    .PARAMETER ShowHidden
    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    
    .PARAMETER SortBy
    –ö—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: Name, Size, Date, Type
    
    .PARAMETER GroupBy
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: None, Type, Extension, Date
    
    .PARAMETER Filter
    –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
    
    .PARAMETER Recurse
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    
    .PARAMETER MaxDepth
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    
    .PARAMETER GradientStyle
    –°—Ç–∏–ª—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    #>
    [CmdletBinding()]
    param(
        [string]$Path = ".",
        
        [switch]$ShowHidden,
        
        [ValidateSet('Name', 'Size', 'Date', 'Type', 'Extension')]
        [string]$SortBy = 'Type',
        
        [ValidateSet('None', 'Type', 'Extension', 'Date', 'Size')]
        [string]$GroupBy = 'None',
        
        [string]$Filter = '*',
        
        [switch]$Recurse,
        
        [int]$MaxDepth = 3,
        
        [ValidateSet('Ocean', 'Fire', 'Nature', 'Neon', 'Ukraine', 'Custom')]
        [string]$GradientStyle = 'Ocean',
        
        [hashtable]$CustomGradient = @{
            Start = '#8B00FF'
            End   = '#00BFFF'
        }
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
    $fullPath = Resolve-Path -Path $Path -ErrorAction SilentlyContinue
    if (-not $fullPath) {
        wrgb "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $Path" -FC Red
        return
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    $headerGradient = switch ($GradientStyle) {
        'Ocean' { @{ Start = '#0080FF'; End = '#00FFD4' } }
        'Fire' { @{ Start = '#FF0000'; End = '#FFD700' } }
        'Nature' { @{ Start = '#00FF00'; End = '#90EE90' } }
        'Neon' { @{ Start = '#FF00FF'; End = '#00FFFF' } }
        'Ukraine' { @{ Start = '#0057B7'; End = '#FFD500' } }
        'Custom' { $CustomGradient }
    }
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    wrgb "`n" 
    wrgb "üìÅ " 
    Write-GradientText "Directory: $fullPath" `
        -StartColor $headerGradient.Start `
        -EndColor $headerGradient.End
    
    Write-GradientLine -Length 80 -Char "‚îÄ" `
        -StartColor $headerGradient.Start `
        -EndColor $headerGradient.End
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    $items = Get-ChildItem -Path $fullPath -Filter $Filter -Force:$ShowHidden -ErrorAction SilentlyContinue
    
    if (-not $items) {
        wrgb "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞" -FC DarkGray
        Write-GradientLine -Length 80 -Char "‚îÄ" `
            -StartColor $headerGradient.End`
            -StartColor $headerGradient.Start 
        return
    }
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    $sorted = switch ($SortBy) {
        'Name' {
            $items | Sort-Object Name
        }
        'Size' {
            $items | Sort-Object Length -Descending
        }
        'Date' {
            $items | Sort-Object LastWriteTime -Descending
        }
        'Type' {
            $items | Sort-Object `
            @{Expression = 'PSIsContainer'; Descending = $true }, `
                Extension, `
                Name
        }
        'Extension' {
            $items | Sort-Object @{
                Expression = { if ([string]::IsNullOrEmpty($_.Extension)) { "XXX" } else { $_.Extension } }
            }, Name
        }

        default { $items | Sort-Object Name }

    }

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    if ($GroupBy -ne 'None') {
        $groups = switch ($GroupBy) {
            'Type' { 
                $sorted | Group-Object { if ($_.PSIsContainer) { "Directories" } else { "Files" } }
            }
            'Extension' {
                $sorted | Group-Object { 
                    if ($_.PSIsContainer) { "üìÅ Folders" } 
                    else { 
                        $ext = $_.Extension
                        if ([string]::IsNullOrEmpty($ext)) { "üìÑ No Extension" }
                        else { "$ext Files" }
                    }
                }
            }
            'Date' {
                $sorted | Group-Object { $_.LastWriteTime.Date.ToString("yyyy-MM-dd") }
            }
            'Size' {
                $sorted | Group-Object {
                    if ($_.PSIsContainer) { "üìÅ Directories" }
                    elseif ($_.Length -eq 0) { "üìÑ Empty" }
                    elseif ($_.Length -lt 1KB) { "üìÑ < 1 KB" }
                    elseif ($_.Length -lt 1MB) { "üìÑ < 1 MB" }
                    elseif ($_.Length -lt 100MB) { "üìÑ < 100 MB" }
                    elseif ($_.Length -lt 1GB) { "üìÑ < 1 GB" }
                    else { "üìÑ > 1 GB" }
                }
            }
        }
        
        foreach ($group in $groups) {
            wrgb "`n  "
            wrgb $group.Name -FC Yellow
            wrgb "  "
            wrgb  ("‚îÄ" * ($group.Name.Length + 2)) -FC DarkGray -newline
            
            foreach ($item in $group.Group) {
                Format-FileItem -Item $item -Indent "    "
                wrgb "`n  "
            }
        }
    }
    else {
        # –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥
        $index = 0
        foreach ($item in $sorted) {
            $color = Get-GradientColor -Index $index -TotalItems $sorted.Count `
                -StartColor $headerGradient.Start -EndColor $headerGradient.End
            Format-FileItem -Item $item -GradientColor $color
            $index++
            wrgb "`n  "
        }
    }
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    wrgb "`n  "
    Write-GradientLine -Length 80 -Char "‚îÄ" `
        -StartColor $headerGradient.End `
        -EndColor $headerGradient.Start
    
    $stats = Get-DirectoryStats -Items $items
    wrgb "  üìä " -FC Yellow 
    wrgb "Total: " -FC White 
    wrgb "$($stats.TotalCount) items " -FC Cyan 
    wrgb "(" -FC DarkGray
    wrgb "üìÅ $($stats.DirectoryCount)" -FC Blue 
    wrgb ", " -FC DarkGray 
    wrgb "üìÑ $($stats.FileCount)" -FC Green 
    wrgb ", " -FC DarkGray 
    wrgb "üíæ $(Get-FormattedFileSize -Size $stats.TotalSize).Text.Trim()" -FC Magenta e
    wrgb ")" -FC DarkGray -newline
    
    if ($ShowHidden -and $stats.HiddenCount -gt 0) {
        wrgb "  üëª Hidden: $($stats.HiddenCount) items" -FC DarkGray
    }
}

function Format-FileItem {
    <#
    .SYNOPSIS
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    #>
    param(
        [Parameter(Mandatory)]
        $Item,
        
        [string]$Indent = "  ",
        
        [string]$GradientColor
    )
    
    wrgb $Indent 
    
    if ($Item.PSIsContainer) {
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        $icon = "üìÇ"
        $color = Get-DirectoryColor $Item.Name
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞–ø–æ–∫
        $specialIcons = @{
            '.git'         = 'üîÄ'
            'node_modules' = 'üì¶'
            '.vscode'      = 'üíª'
            'src'          = 'üíæ'
            'dist'         = 'üì§'
            'build'        = 'üèóÔ∏è'
            'test'         = 'üß™'
            'docs'         = 'üìö'
            'images'       = 'üñºÔ∏è'
            'videos'       = 'üé¨'
            'music'        = 'üéµ'
        }
        
        if ($specialIcons.ContainsKey($Item.Name.ToLower())) {
            $icon = $specialIcons[$Item.Name.ToLower()]
        }
        
        wrgb "$icon " 
        wrgb ("{0,-35}" -f $Item.Name) -FC $color 
        wrgb " <DIR>" -FC DarkCyan
        
        # –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è)
        try {
            $subItems = @(Get-ChildItem -Path $Item.FullName -Force -ErrorAction SilentlyContinue)
            if ($subItems.Count -gt 0) {
                wrgb "$Indent     " 
                wrgb "‚îî‚îÄ $($subItems.Count) items" -FC DarkGray
            }
        }
        catch {}
    }
    else {
        # –§–∞–π–ª
        $icon = Get-FileIcon $Item.Extension
        $nameColor = Get-FileColor $Item.Name
        $sizeInfo = Get-FormattedFileSize -Size $Item.Length
        $dateInfo = Get-FormattedDate -Date $Item.LastWriteTime
        
        wrgb "$icon " 
        
        # –ò–º—è —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        if ($GradientColor) {
            wrgb ("{0,-35}" -f $Item.Name.PadRight(35).Substring(0, 35)) `
                -FC $GradientColor 
        }
        else {
            wrgb ("{0,-35}" -f $Item.Name.PadRight(35).Substring(0, 35)) `
                -FC $nameColor 
        }
        
        # –†–∞–∑–º–µ—Ä
        wrgb " " 
        wrgb $sizeInfo.Text -FC $sizeInfo.Color 
        
        # –î–∞—Ç–∞
        wrgb "  " 
        wrgb $dateInfo.Text -FC $dateInfo.Color
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Å–æ–±—ã—Ö —Ñ–∞–π–ª–æ–≤
        if ($Item.Extension -in @('.ps1', '.psm1', '.psd1')) {
            try {
                $content = Get-Content $Item.FullName -First 10 -ErrorAction SilentlyContinue
                $synopsis = $content | Select-String -Pattern 'SYNOPSIS' -Context 0, 1
                if ($synopsis) {
                    $desc = $synopsis.Context.PostContext[0].Trim()
                    if ($desc) {
                        wrgb "$Indent     " 
                        wrgb "‚îî‚îÄ $desc" -FC DarkGray
                    }
                }
            }
            catch {}
        }
    }
}

function Get-DirectoryStats {
    <#
    .SYNOPSIS
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    #>
    param($Items)
    
    $stats = @{
        TotalCount     = $Items.Count
        FileCount      = ($Items | Where-Object { -not $_.PSIsContainer }).Count
        DirectoryCount = ($Items | Where-Object { $_.PSIsContainer }).Count
        TotalSize      = ($Items | Where-Object { -not $_.PSIsContainer } | 
            Measure-Object -Property Length -Sum).Sum
        HiddenCount    = ($Items | Where-Object { $_.Attributes -band [System.IO.FileAttributes]::Hidden }).Count
    }
    
    return $stats
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤
Set-Alias -Name ls -Value Show-DirectoryListing -Force
Set-Alias -Name ll -Value Show-DirectoryListing -Force
Set-Alias -Name ldd -Value Show-DirectoryListing -Force

# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function lss {
    Show-DirectoryListing @args
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function lst {
    Show-DirectoryListing -Recurse -MaxDepth 2 @args
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function lsd {
    Get-ChildItem -Directory @args | ForEach-Object {
        $icon = "üìÅ"
        wrgb  "$icon "
        wrgb $_.Name -FC Cyan
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
function lsf {
    param(
        [string]$Extension = '*',
        [string]$Path = '.'
    )
    
    if (-not $Extension.StartsWith('*')) {
        $Extension = "*.$Extension"
    }
    
    Show-DirectoryListing -Path $Path -Filter $Extension
}

Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1")
