
importProcess  $MyInvocation.MyCommand.Name.trim(".ps1") -start

#region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (-not $global:RGB) {
    $global:RGB = @{}
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if (Test-Path (Join-Path $PSScriptRoot 'NiceColors.ps1')) {
    . (Join-Path $PSScriptRoot 'NiceColors.ps1')
}
#endregion

#region –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
$script:ParserRules = @{
# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    Errors = @{
        Patterns = @(
            @{ Regex = '\b(ERROR|–û–®–ò–ë–ö–ê|FATAL|–ö–†–ò–¢–ò–ß–ù–û|EXCEPTION|FAILED|FAIL)\b'; Priority = 100 }
            @{ Regex = '(?i)\berr(or)?\s*[:=]\s*\S+'; Priority = 90 }
            @{ Regex = '‚ùå|‚ùó|‚ö†Ô∏è|üö®|üíÄ|‚ò†Ô∏è|üî•'; Priority = 95 }
            @{ Regex = '\[\s*FAIL(ED)?\s*\]'; Priority = 95 }
        )
        Style = @{
            FC = "LaserRed"
            BC = "#2C0000"
            Effects = @('Bold', 'Blink')
            Icon = "‚ùå"
        }
    }

    Success = @{
        Patterns = @(
            @{ Regex = '\b(SUCCESS|–£–°–ü–ï–®–ù–û|SUCCESSFUL|OK|COMPLETE|–ì–û–¢–û–í–û|DONE|PASSED?)\b'; Priority = 90 }
            @{ Regex = '‚úÖ|‚úì|üëç|üéâ|üéØ|üíö|üü¢'; Priority = 85 }
            @{ Regex = '\[\s*(OK|PASS(ED)?|DONE)\s*\]'; Priority = 85 }
        )
        Style = @{
            FC = "LimeGreen"
            Effects = @('Bold')
            Icon = "‚úÖ"
        }
    }

    Warnings = @{
        Patterns = @(
            @{ Regex = '\b(WARNING|–í–ù–ò–ú–ê–ù–ò–ï|WARN|–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï|CAUTION|ALERT)\b'; Priority = 80 }
            @{ Regex = '‚ö†Ô∏è|‚ö°|üîî|üü°|‚ö†'; Priority = 75 }
            @{ Regex = '\[\s*WARN(ING)?\s*\]'; Priority = 75 }
        )
        Style = @{
            FC = "GoldYellow"
            Effects = @('Bold')
            Icon = "‚ö†Ô∏è"
        }
    }

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    Code = @{
        Patterns = @(
        # PowerShell cmdlets
            @{ Regex = '\b(Get|Set|New|Remove|Add|Clear|Copy|Move|Rename|Test|Start|Stop|Restart|Select|Where|ForEach|Sort|Group|Measure|Export|Import|ConvertTo|ConvertFrom|Out|Write|Read)-[A-Z]\w+\b'; Priority = 70 }
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            @{ Regex = '\$[A-Za-z_]\w*'; Priority = 65 }
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            @{ Regex = '\B-[A-Za-z]\w*\b'; Priority = 65 }
        # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
            @{ Regex = '(-eq|-ne|-gt|-lt|-ge|-le|-like|-match|-contains|-in|-notin|-and|-or|-not)'; Priority = 60 }
        )
        Style = @{
            FC = "Material_Purple"
            Effects = @('Italic')
        }
    }

    # –î–∞–Ω–Ω—ã–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
    Numbers = @{
        Patterns = @(
            @{ Regex = '\b\d+(\.\d+)?([eE][+-]?\d+)?\b'; Priority = 50 }
            @{ Regex = '\b0x[0-9A-Fa-f]+\b'; Priority = 55 }  # Hex
            @{ Regex = '\b\d+[KMG]B?\b'; Priority = 55 }  # –†–∞–∑–º–µ—Ä—ã
        )
        Style = @{
            FC = "Material_Pink"
        }
    }

    Strings = @{
        Patterns = @(
            @{ Regex = '"[^"]*"'; Priority = 60 }
            @{ Regex = "'[^']*'"; Priority = 60 }
            @{ Regex = '@"[\s\S]*?"@'; Priority = 65 }  # Here-strings
            @{ Regex = "@'[\s\S]*?'@"; Priority = 65 }
        )
        Style = @{
            FC = "Material_Green"
        }
    }

    # –°–µ—Ç–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    Network = @{
        Patterns = @(
        # IP –∞–¥—Ä–µ—Å–∞
            @{ Regex = '\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b'; Priority = 70 }
        # –ü–æ—Ä—Ç—ã
            @{ Regex = ':\d{1,5}\b'; Priority = 65 }
        # MAC –∞–¥—Ä–µ—Å–∞
            @{ Regex = '\b([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})\b'; Priority = 70 }
        # URLs
            @{ Regex = 'https?://[^\s]+'; Priority = 75 }
        # Email
            @{ Regex = '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'; Priority = 70 }
        )
        Style = @{
            FC = "Turquoise"
            Effects = @('Underline')
        }
    }

    # –ü—É—Ç–∏ –∏ —Ñ–∞–π–ª—ã
    Paths = @{
        Patterns = @(
        # Windows –ø—É—Ç–∏
            @{ Regex = '(?:[A-Za-z]:)?\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*'; Priority = 60 }
        # Unix –ø—É—Ç–∏
            @{ Regex = '(?:/[^/\s]+)+/?'; Priority = 60 }
        # UNC –ø—É—Ç–∏
            @{ Regex = '\\\\[^\\]+\\[^\\]+(?:\\[^\\]+)*'; Priority = 65 }
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            @{ Regex = '\.\w{1,4}\b'; Priority = 50 }
        )
        Style = @{
            FC = "PastelGreen"
            Effects = @('Italic')
        }
    }

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    DateTime = @{
        Patterns = @(
        # ISO —Ñ–æ—Ä–º–∞—Ç
            @{ Regex = '\d{4}-\d{2}-\d{2}[T\s]\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?'; Priority = 70 }
        # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            @{ Regex = '\d{4}[-/]\d{2}[-/]\d{2}\s+\d{2}:\d{2}:\d{2}'; Priority = 65 }
        # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            @{ Regex = '\b\d{1,2}:\d{2}(:\d{2})?\s*(AM|PM)?\b'; Priority = 60 }
        )
        Style = @{
            FC = "Silver"
        }
    }

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    Markers = @{
        Patterns = @(
        # TO_DO, FIX_ME, etc
            @{ Regex = '\b(TODO|FIXME|HACK|BUG|XXX|NOTE|IMPORTANT|DEPRECATED)\b:?'; Priority = 85 }
        # –í–µ—Ä—Å–∏–∏
            @{ Regex = '\bv?\d+\.\d+(\.\d+)?(-\w+)?'; Priority = 60 }
        # GUIDs
            @{ Regex = '\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\b'; Priority = 70 }
        )
        Style = @{
            FC = "Material_Orange"
            Effects = @('Bold')
        }
    }

    # –°–µ–∫—Ü–∏–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    Headers = @{
        Patterns = @(
        # Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏
            @{ Regex = '^#{1,6}\s+.+$'; Priority = 90 }
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            @{ Regex = '^[A-Z][A-Z\s\d\W]+:?\s*$'; Priority = 85 }
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            @{ Regex = '^[-=_*]{3,}\s*$'; Priority = 80 }
        )
        Style = @{
            FC = "Material_Cyan"
            Effects = @('Bold', 'Underline')
        }
    }
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
$script:ContextualRules = @{
# PowerShell Help
    PSHelp = @{
        Patterns = @{
            Sections = '^(NAME|SYNOPSIS|SYNTAX|DESCRIPTION|PARAMETERS|INPUTS|OUTPUTS|NOTES|EXAMPLES?|RELATED LINKS).*$'
            Parameters = '\s+-\w+\s+<\w+>'
            Types = '\[[\w.]+\]'
            Required = '\[?Required\]?'
            Position = 'Position:\s*\d+'
        }
    }

    # JSON
    JSON = @{
        Patterns = @{
            Keys = '"[^"]+"\s*:'
            Values = ':\s*"[^"]*"'
            Numbers = ':\s*\d+\.?\d*'
            Booleans = ':\s*(true|false|null)'
            Arrays = '\[|\]'
            Objects = '\{|\}'
        }
    }

    # –õ–æ–≥–∏
    Logs = @{
        Patterns = @{
            Severity = '\[(ERROR|WARN|INFO|DEBUG|TRACE)\]'
            Thread = '\[Thread-\d+\]'
            Component = '\[[\w\.]+\]'
            Correlation = '\{[0-9a-f-]+\}'
        }
    }
}
#endregion

#region –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
function Out-ParsedText {
    <#
    .SYNOPSIS
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π

    .DESCRIPTION
        –ü–∞—Ä—Å–∏—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—è –µ–≥–æ —Ç–∏–ø –∏ –ø—Ä–∏–º–µ–Ω—è—è
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    .PARAMETER InputText
        –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pipeline)

    .PARAMETER Type
        –¢–∏–ø —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞

    .PARAMETER CustomRules
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞

    .PARAMETER NoIcon
        –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–∫–æ–Ω–∫–∏ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º

    .PARAMETER PassThru
        –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞

    .EXAMPLE
        Get-Content log.txt | Out-ParsedText

    .EXAMPLE
        Get-Help Get-Process | Out-String | Out-ParsedText -Type PSHelp
    #>
    [CmdletBinding()]
    param(
        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [string[]]$InputText,

        [ValidateSet('Auto', 'PSHelp', 'JSON', 'XML', 'Log', 'Code', 'Custom')]
        [string]$Type = 'Auto',

        [hashtable]$CustomRules = @{},

        [switch]$NoIcon,

        [switch]$PassThru,

        [switch]$ShowLineNumbers,

        [int]$LineNumberWidth = 4,

        [string]$LineNumberColor = "DarkGray"
    )

    begin {
        $lineCount = 0
        $allRules = $script:ParserRules

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        if ($CustomRules.Count -gt 0) {
            foreach ($ruleName in $CustomRules.Keys) {
                $allRules[$ruleName] = $CustomRules[$ruleName]
            }
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        $compiledRules = @()
        foreach ($category in $allRules.Keys) {
            $categoryRules = $allRules[$category]
            foreach ($pattern in $categoryRules.Patterns) {
                $compiledRules += @{
                    Category = $category
                    Pattern = [regex]$pattern.Regex
                    Priority = $pattern.Priority
                    Style = $categoryRules.Style
                }
            }
        }

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–π)
        $compiledRules = $compiledRules | Sort-Object -Property Priority -Descending
    }

    process {
        foreach ($line in $InputText) {
            $lineCount++

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if ($ShowLineNumbers) {
                $lineNum = $lineCount.ToString().PadLeft($LineNumberWidth)
                wrgb "$lineNum " -FC $LineNumberColor
                wrgb "‚îÇ " -FC $LineNumberColor
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            $segments = Get-ParsedSegments -Text $line -Rules $compiledRules

            # –í—ã–≤–æ–¥–∏–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if ($PassThru) {
                $segments
            } else {
                foreach ($segment in $segments) {
                    $outputParams = @{
                        Text = $segment.Text
                        FC = $segment.Style.FC
                    }

                    if ($segment.Style.BC) {
                        $outputParams.BC = $segment.Style.BC
                    }

                    if ($segment.Style.Effects) {
                        $outputParams.Style = $segment.Style.Effects
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                    if (-not $NoIcon -and $segment.Style.Icon -and $segment.IsStart) {
                        wrgb "$($segment.Style.Icon) " -FC $segment.Style.FC
                    }

                    wrgb @outputParams
                }
                Write-Host ""
            }
        }
    }
}

function Get-ParsedSegments {
    param(
        [string]$Text,
        [array]$Rules
    )

    $segments = @()
    $processedRanges = @()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    foreach ($rule in $Rules) {
        $matches = $rule.Pattern.Matches($Text)

        foreach ($match in $matches) {
            $start = $match.Index
            $end = $match.Index + $match.Length

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω
            $overlap = $false
            foreach ($range in $processedRanges) {
                if (($start -ge $range.Start -and $start -lt $range.End) -or
                        ($end -gt $range.Start -and $end -le $range.End)) {
                    $overlap = $true
                    break
                }
            }

            if (-not $overlap) {
                $segments += @{
                    Start = $start
                    End = $end
                    Text = $match.Value
                    Category = $rule.Category
                    Style = $rule.Style
                    IsStart = $true
                }

                $processedRanges += @{
                    Start = $start
                    End = $end
                }
            }
        }
    }

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    $segments = $segments | Sort-Object -Property Start

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    $result = @()
    $lastEnd = 0

    foreach ($segment in $segments) {
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        if ($segment.Start -gt $lastEnd) {
            $result += @{
                Text = $Text.Substring($lastEnd, $segment.Start - $lastEnd)
                Style = @{ FC = "White" }
                IsStart = $false
            }
        }

        $result += $segment
        $lastEnd = $segment.End
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if ($lastEnd -lt $Text.Length) {
        $result += @{
            Text = $Text.Substring($lastEnd)
            Style = @{ FC = "White" }
            IsStart = $false
        }
    }

    return $result
}
#endregion

#region –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
function Out-ParsedHelp {
    <#
    .SYNOPSIS
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è PowerShell Help
    #>
    param(
        [Parameter(ValueFromPipeline)]
        [string[]]$InputText,

        [string]$CommandName
    )

    begin {
        $style = @{
            SECTION = @{ FC = "Material_Pink"; Effects = @('Bold', 'Underline') }
            COMMAND = @{ FC = "Material_Yellow"; Effects = @('Bold') }
            PARAM = @{ FC = "Material_Cyan" }
            TYPE = @{ FC = "Material_Purple"; Effects = @('Italic') }
            REQUIRED = @{ FC = "Material_Red"; Effects = @('Bold') }
        }

        $buffer = @()
    }

    process {
        $buffer += $InputText
    }

    end {
        $text = $buffer -join "`n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if (-not $CommandName -and $text -match 'NAME\s+(\S+)') {
            $CommandName = $matches[1]
        }

        # Escape –¥–ª—è regex
        $commandEscaped = if ($CommandName) { [regex]::Escape($CommandName) } else { '\S+' }

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π regex –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        $regEx = @(
            "(?m)(?<=^[ \t]*)(?<SECTION>^[A-Z][A-Z \t\d\W]+$)"
            "(?<COMMAND>\b$commandEscaped\b)"
            "(?<PARAM>\B-\w+\b)"
            "(?<TYPE>\[[\w\[\]\.]+\])"
            "(?<REQUIRED>\[?(Required|Mandatory)\]?)"
        ) -join '|'

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        foreach ($line in ($text -split "`n")) {
            $formatted = [regex]::Replace($line, $regEx, {
                param($match)

                $group = $match.Groups | Where-Object { $_.Success -and $_.Name -ne '0' } | Select-Object -First 1
                if ($group) {
                    $st = $style[$group.Name]

                    # –§–æ—Ä–º–∏—Ä—É–µ–º ANSI –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    $ansi = ""
                    if ($st.FC -and $global:RGB[$st.FC]) {
                        $color = Get-RGBColor $global:RGB[$st.FC]
                        $ansi += $color
                    }

                    if ($st.Effects -contains 'Bold') {
                        $ansi += $PSStyle.Bold
                    }
                    if ($st.Effects -contains 'Italic') {
                        $ansi += $PSStyle.Italic
                    }
                    if ($st.Effects -contains 'Underline') {
                        $ansi += $PSStyle.Underline
                    }

                    return $ansi + $group.Value + $PSStyle.Reset
                }
                return $match.Value
            })

            Write-Host $formatted
        }
    }
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è gh
function gh {
    [CmdletBinding()]
    param(
        [Parameter(Position = 0)]
        [string]$Name,

        [switch]$Detailed,
        [switch]$Examples,
        [switch]$Full,
        [string[]]$Parameter
    )

    # –ü–æ–ª—É—á–∞–µ–º help
    $help = Get-Help @PSBoundParameters

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º
    $help | Out-String | Out-ParsedHelp -CommandName $help.Name
}
#endregion

#region –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
function New-ParserRule {
    <#
    .SYNOPSIS
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞

    .EXAMPLE
        New-ParserRule -Name "Emoji" -Pattern "üòÄ|üòÅ|üòÇ|üòÉ|üòÑ|üòÖ" -Color "Yellow" -Priority 50
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Name,

        [Parameter(Mandatory)]
        [string[]]$Pattern,

        [string]$ForegroundColor = "White",
        [string]$BackgroundColor,
        [string[]]$Effects,
        [string]$Icon,
        [int]$Priority = 50
    )

    $rule = @{
        Patterns = @()
        Style = @{
            FC = $ForegroundColor
        }
    }

    foreach ($p in $Pattern) {
        $rule.Patterns += @{
            Regex = $p
            Priority = $Priority
        }
    }

    if ($BackgroundColor) {
        $rule.Style.BC = $BackgroundColor
    }

    if ($Effects) {
        $rule.Style.Effects = $Effects
    }

    if ($Icon) {
        $rule.Style.Icon = $Icon
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    $script:ParserRules[$Name] = $rule

    Write-Status -Success "–ü—Ä–∞–≤–∏–ª–æ '$Name' –¥–æ–±–∞–≤–ª–µ–Ω–æ"

    return $rule
}

function Test-ParserRule {
    <#
    .SYNOPSIS
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–µ
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Text,

        [string]$RuleName
    )

    if ($RuleName) {
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        $rule = $script:ParserRules[$RuleName]
        if (-not $rule) {
            Write-Status -Error "–ü—Ä–∞–≤–∏–ª–æ '$RuleName' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            return
        }

        wrgb "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ " -FC "White"
        wrgb $RuleName -FC "Cyan" -Style Bold -newline
        wrgb "–ü–∞—Ç—Ç–µ—Ä–Ω—ã:" -FC "Yellow" -newline

        foreach ($pattern in $rule.Patterns) {
            wrgb "  ‚Ä¢ " -FC "DarkGray"
            wrgb $pattern.Regex -FC "Material_Green" -newline

            $matches = [regex]::Matches($Text, $pattern.Regex)
            if ($matches.Count -gt 0) {
                wrgb "    –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: " -FC "Gray"
                wrgb $matches.Count -FC "LimeGreen" -Style Bold -newline

                foreach ($match in $matches) {
                    wrgb "    ‚Üí " -FC "DarkGray"
                    wrgb $match.Value -FC $rule.Style.FC -newline
                }
            } else {
                wrgb "    –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -FC "Red" -newline
            }
        }
    } else {
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
        wrgb "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∫ —Ç–µ–∫—Å—Ç—É:" -FC "Cyan" -Style Bold -newline
        $Text | Out-ParsedText
    }
}
#endregion

#region –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
function Show-ParserDemo {
    Clear-Host

    Write-GradientHeader -Title "ADVANCED PARSER DEMO" -StartColor "#FF00FF" -EndColor "#00FFFF"

    # –ü—Ä–∏–º–µ—Ä 1: –õ–æ–≥–∏
    wrgb "`nüìã –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤:" -FC "Cyan" -Style Bold -newline

    $sampleLog = @"
2024-01-15 10:30:15 [INFO] Application started successfully ‚úÖ
2024-01-15 10:30:16 [SUCCESS] Connected to database at 192.168.1.100:5432
2024-01-15 10:30:17 [INFO] Loading configuration from C:\Config\app.json
2024-01-15 10:30:18 [WARNING] ‚ö†Ô∏è Low memory: 512MB available
2024-01-15 10:30:19 [ERROR] ‚ùå Failed to connect to https://api.example.com
2024-01-15 10:30:20 [DEBUG] Retry attempt 1/3...
2024-01-15 10:30:51 [SUCCESS] ‚úÖ Connection restored!
"@

    $sampleLog -split "`n" | Out-ParsedText -ShowLineNumbers

    wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -FC "DarkGray"
    Read-Host

    # –ü—Ä–∏–º–µ—Ä 2: PowerShell –∫–æ–¥
    wrgb "`nüíª –ü–∞—Ä—Å–∏–Ω–≥ PowerShell –∫–æ–¥–∞:" -FC "Cyan" -Style Bold -newline

    $sampleCode = @'
# TODO: Optimize this function
function Get-SystemInfo {
    param(
        [Parameter(Mandatory=$true)]
        [string]$ComputerName = "localhost",

        [switch]$Detailed
    )

    $result = @{
        Name = $ComputerName
        OS = Get-CimInstance -ClassName Win32_OperatingSystem
        Memory = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB
        IP = (Test-Connection -ComputerName $ComputerName -Count 1).IPV4Address.ToString()
    }

    if ($Detailed) {
        Write-Host "Processing detailed info..." -ForegroundColor Yellow
        $result.CPU = Get-CimInstance -ClassName Win32_Processor
    }

    return $result
}

# FIXME: Handle errors properly
$info = Get-SystemInfo -ComputerName "server01" -Detailed
Write-Output "Memory: $($info.Memory) GB"
'@

    $sampleCode -split "`n" | Out-ParsedText

    wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -FC "DarkGray"
    Read-Host

    # –ü—Ä–∏–º–µ—Ä 3: JSON
    wrgb "`nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON:" -FC "Cyan" -Style Bold -newline



    $sampleJSON = @'
{
    "name": "Advanced Parser",
    "version": "3.0.0",
    "features": [
        "Syntax highlighting",
        "Pattern recognition",
        "Context awareness"
    ],
    "settings": {
        "enabled": true,
        "priority": 100,
        "debug": false
    },
    "lastUpdate": "2024-01-15T10:30:00Z"
}
'@

    $sampleJSON -split "`n" | Out-ParsedText

    wrgb "`n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -FC "LimeGreen" -Style Bold -newline
}
#endregion

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Set-Alias -Name parse -Value Out-ParsedText -Force
Set-Alias -Name phelp -Value Out-ParsedHelp -Force

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
if ($MyInvocation.MyCommand.Path -match '\.psm1$') {
    Export-ModuleMember -Function @(
        'Out-ParsedText',
        'Out-ParsedHelp',
        'New-ParserRule',
        'Test-ParserRule',
        'Show-ParserDemo',
        'gh'
    ) -Alias @(
        'parse',
        'phelp'
    )
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å wrgb —Ñ—É–Ω–∫—Ü–∏–∏
if (Get-Command wrgb -ErrorAction SilentlyContinue) {
    wrgb "`nüöÄ " -FC "GoldRGB"
    Write-GradientText -Text "Advanced Parser System v3.0" `
                       -StartColor "#FF00FF" -EndColor "#00FFFF" `
                       -NoNewline
    wrgb " –∑–∞–≥—Ä—É–∂–µ–Ω!" -FC "GoldRGB" -newline

    wrgb "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " -FC "Gray"
    wrgb "Show-ParserDemo" -FC "Cyan" -Style Bold
    wrgb " –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏" -FC "Gray" -newline
} else {
    Write-Host "`nüöÄ Advanced Parser System v3.0 –∑–∞–≥—Ä—É–∂–µ–Ω!" -ForegroundColor Green
    Write-Host "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Show-ParserDemo –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏" -ForegroundColor Cyan
}




importProcess  $MyInvocation.MyCommand.Name.trim(".ps1")
