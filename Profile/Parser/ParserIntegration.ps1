
Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1") -start

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                   üåà ENHANCED RAINBOW & INTEGRATION                         ‚ïë
# ‚ïë                 –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤                ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#region –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Rainbow

#endregion

#region –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
function Watch-ParsedFile {
    <#
    .SYNOPSIS
        –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç –µ–≥–æ
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Path,

        [int]$RefreshInterval = 1000,

        [string]$Type = 'Auto'
    )

    if (-not (Test-Path $Path)) {
        Write-Status -Error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $Path"
        return
    }

    Write-Status -Info "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: $Path"
    wrgb "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" -FC "DarkGray" -newline

    $lastWriteTime = (Get-Item $Path).LastWriteTime

    try {
        while ($true) {
            $currentWriteTime = (Get-Item $Path -ErrorAction SilentlyContinue).LastWriteTime

            if ($currentWriteTime -ne $lastWriteTime) {
#                Clear-Host
                Write-Status -Info "–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                Out-ParsedFile -Path $Path -Type $Type -ShowLineNumbers
                $lastWriteTime = $currentWriteTime
            }

            Start-Sleep -Milliseconds $RefreshInterval
        }
    } catch {
        Write-Status -Warning "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    }
}

function Compare-ParsedFiles {
    <#
    .SYNOPSIS
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–∏–π
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Path1,

        [Parameter(Mandatory)]
        [string]$Path2,

        [switch]$SideBySide
    )

    if (-not (Test-Path $Path1) -or -not (Test-Path $Path2)) {
        Write-Status -Error "–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    }

    $content1 = Get-Content $Path1
    $content2 = Get-Content $Path2

    $diff = Compare-Object $content1 $content2 -IncludeEqual

    Write-GradientHeader -Title "FILE COMPARISON" -StartColor "#FF6B6B" -EndColor "#4ECDC4"

    wrgb "üìÑ –§–∞–π–ª 1: " -FC "Cyan"
    wrgb $Path1 -FC "White" -newline
    wrgb "üìÑ –§–∞–π–ª 2: " -FC "Cyan"
    wrgb $Path2 -FC "White" -newline
    wrgb "" -newline

    foreach ($line in $diff) {
        switch ($line.SideIndicator) {
            '<=' {
                wrgb "- " -FC "Red" -Style Bold
                wrgb $line.InputObject -FC "Material_Red" -newline
            }
            '=>' {
                wrgb "+ " -FC "Green" -Style Bold
                wrgb $line.InputObject -FC "Material_Green" -newline
            }
            '==' {
                wrgb "  " -FC "Gray"
                wrgb $line.InputObject -FC "DarkGray" -newline
            }
        }
    }
}
#endregion

#region –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Pipeline –ø–∞—Ä—Å–∏–Ω–≥
function ConvertTo-ParsedOutput {
    <#
    .SYNOPSIS
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥

    .EXAMPLE
        Get-Process | ConvertTo-ParsedOutput
        Get-Service | ConvertTo-ParsedOutput -HighlightProperty Status
    #>
    param(
        [Parameter(ValueFromPipeline)]
        $InputObject,

        [string]$HighlightProperty,

        [hashtable]$ColorMap = @{
        Running = "LimeGreen"
        Stopped = "Red"
        True = "Green"
        False = "Red"
    },

        [switch]$ShowType
    )

    process {
        if ($InputObject -is [string]) {
            $InputObject | Out-ParsedText
        } else {
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
            $props = $InputObject.PSObject.Properties

            if ($ShowType) {
                wrgb "[$($InputObject.GetType().Name)]" -FC "DarkCyan" -newline
            }

            foreach ($prop in $props) {
                wrgb "$($prop.Name): " -FC "Material_Purple" -Style Bold

                $value = $prop.Value
                $valueStr = if ($null -eq $value) { "<null>" } else { $value.ToString() }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
                $color = "White"
                if ($prop.Name -eq $HighlightProperty -or $ColorMap.ContainsKey($valueStr)) {
                    $color = $ColorMap[$valueStr] ?? "Yellow"
                }

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
                switch ($prop.TypeNameOfValue) {
                    { $_ -match 'DateTime' } { $color = "Material_Cyan" }
                    { $_ -match 'Int|Long|Double' } { $color = "Material_Pink" }
                    { $_ -match 'Bool' } { $color = if ($value) { "LimeGreen" } else { "Red" } }
                }

                wrgb $valueStr -FC $color -newline
            }

            wrgb "" -newline
        }
    }
}

# Pipeline-friendly –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞
filter Parse {
    param(
        [string]$Type = 'Auto'
    )

    $_ | Out-ParsedText -Type $Type
}
#endregion

#region –ú–µ–≥–∞-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function Show-MegaParserDemo {
#    Clear-Host

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    $title = "MEGA PARSER DEMONSTRATION"
    Write-Rainbow -Text $title -Mode Gradient -Style Neon -Animated -Speed 30

    wrgb "`nüöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞!" -FC "GoldRGB" -Style Bold -newline

    # –ú–µ–Ω—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
    $demos = @(
        "üåà Rainbow —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏"
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –≤—Å–µ—Ö –≤–∏–¥–æ–≤"
        "üìù –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞"
        "üìÅ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"
        "üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–µ—Ä–∞"
        "‚ö° Pipeline –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
        "üé® –í—Å–µ –≤–º–µ—Å—Ç–µ - –∫–æ–º–±–æ –¥–µ–º–æ"
        "‚ùå –í—ã—Ö–æ–¥"
    )

    do {
        wrgb "`n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:" -FC "Cyan" -Style Bold -newline

        for ($i = 0; $i -lt $demos.Length; $i++) {
            $color = Get-MenuGradientColor -Index $i -Total $demos.Length -Style Ocean
            wrgb "  [$($i + 1)] " -FC "White"
            wrgb $demos[$i] -FC $color -newline
        }

        wrgb "`n–í–∞—à –≤—ã–±–æ—Ä: " -FC "Yellow"
        $choice = Read-Host

        switch ($choice) {
            "1" {
                # Rainbow –¥–µ–º–æ
#                Clear-Host
                Write-GradientHeader -Title "RAINBOW EFFECTS"

                wrgb "`n–ë–∞–∑–æ–≤—ã–π Rainbow:" -FC "Cyan" -newline
                "Hello, PowerShell World!" | Write-Rainbow

                wrgb "`nRainbow –ø–æ —Å–ª–æ–≤–∞–º:" -FC "Cyan" -newline
                "The quick brown fox jumps over the lazy dog" | Write-Rainbow -Mode Word -Bold

                wrgb "`n–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π Rainbow:" -FC "Cyan" -newline
                "Gradient Rainbow Effect" | Write-Rainbow -Mode Gradient -Style Fire

                wrgb "`n–í–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç:" -FC "Cyan" -newline
                "~~~~ Wave Effect Demo ~~~~" | Write-Rainbow -Mode Wave -Style Ocean

                wrgb "`n–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rainbow:" -FC "Cyan" -newline
                "Animated Magic!" | Write-Rainbow -Animated -Speed 100 -Loop -LoopCount 3

                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }

            "2" {
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
#                Clear-Host
                Show-ProgressDemo
                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }

            "3" {
                # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
#                Clear-Host
                Show-ParserDemo
                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }

            "4" {
                # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤
#                Clear-Host
                Write-GradientHeader -Title "FILE PARSING DEMO"

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ
                $demoFile = "$env:TEMP\parser_demo.ps1"
                @'

# Demo PowerShell Script
function Get-DemoData {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Name,
        [int]$Count = 10
    )

    Write-Host "Processing $Name..." -ForegroundColor Cyan

    $results = @()
    for ($i = 1; $i -le $Count; $i++) {
        $results += @{
            Index = $i
            Name = $Name
            Value = Get-Random -Maximum 100
            Status = if ($i % 2) { "Active" } else { "Inactive" }
            Timestamp = Get-Date
        }
    }

    return $results | ConvertTo-Json
}

# TODO: Add error handling
$data = Get-DemoData -Name "Test" -Count 5
Write-Output $data
'@ | Out-File $demoFile

                Out-ParsedFile -Path $demoFile -ShowFileInfo -ShowLineNumbers

                Remove-Item $demoFile -Force
                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }

            "5" {
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                Start-InteractiveParser
            }

            "6" {
                # Pipeline –¥–µ–º–æ
#                Clear-Host
                Write-GradientHeader -Title "PIPELINE INTEGRATION"

                wrgb "Get-Process (top 5 by CPU):" -FC "Cyan" -Style Bold -newline
                Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 |
                        ConvertTo-ParsedOutput -HighlightProperty CPU -ShowType

                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }

            "7" {
                # –ö–æ–º–±–æ –¥–µ–º–æ
#                Clear-Host
                Write-Rainbow "ULTIMATE COMBO DEMO" -Mode Gradient -Style Rainbow -Bold -Animated

                wrgb "`nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞..." -FC "Cyan" -newline
                Show-AnimatedProgress -Activity "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" -TotalSteps 30

                wrgb "`n‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!" -FC "LimeGreen" -Style Bold -newline

                # –ü–∞—Ä—Å–∏–º –ª–æ–≥ —Å Rainbow –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                "=== SYSTEM LOG ===" | Write-Rainbow -Mode Line -Style Fire -Bold

                @"
2024-01-15 10:30:00 [INFO] System initialization started
2024-01-15 10:30:01 [SUCCESS] ‚úÖ Database connection established
2024-01-15 10:30:02 [WARNING] ‚ö†Ô∏è Low memory detected: 512MB available
2024-01-15 10:30:03 [ERROR] ‚ùå Failed to connect to API endpoint
2024-01-15 10:30:04 [INFO] Retrying connection...
2024-01-15 10:30:05 [SUCCESS] ‚úÖ Connection restored successfully!
"@ -split "`n" | Out-ParsedText

                wrgb "`n–ù–∞–∂–º–∏—Ç–µ Enter..." -FC "DarkGray"
                Read-Host
            }
        }
    } while ($choice -ne "8")

    # –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#    Clear-Host
    "Thanks for using MEGA PARSER!" | Write-Rainbow -Mode Gradient -Style Rainbow -Animated
    wrgb "`nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!" -FC "GoldRGB" -Style Bold -newline
}
#endregion

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
#Write-GradientHeader -Title "PARSER SYSTEM READY" -StartColor "#00C851" -EndColor "#00FF00"
#
#wrgb "üéØ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!" -FC "LimeGreen" -Style Bold -newline
#
#wrgb "`nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -FC "Cyan" -Style Bold -newline

$commands = @(
    @{ Cmd = "Write-Rainbow"; Desc = "–†–∞–¥—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏" }
    @{ Cmd = "Out-ParsedText"; Desc = "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞" }
    @{ Cmd = "Out-ParsedFile"; Desc = "–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º" }
    @{ Cmd = "Show-RGBProgress"; Desc = "–ö—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã" }
    @{ Cmd = "Start-InteractiveParser"; Desc = "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º" }
    @{ Cmd = "Show-MegaParserDemo"; Desc = "–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è" }
)

#foreach ($cmd in $commands) {
#    wrgb "  ‚Ä¢ " -FC "DarkGray"
#    wrgb $cmd.Cmd -FC "Yellow" -Style Bold
#    wrgb " - " -FC "DarkGray"
#    wrgb $cmd.Desc -FC "White" -newline
#}
#
#wrgb "`nüí° –°–æ–≤–µ—Ç: " -FC "Material_Orange"
#wrgb "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " -FC "Gray"
#wrgb "Show-MegaParserDemo" -FC "Cyan" -Style Bold
#wrgb " –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!" -FC "Gray" -newline

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ —ç—Ç–æ –º–æ–¥—É–ª—å
if ($MyInvocation.MyCommand.Path -match '\.psm1$') {
    Export-ModuleMember -Function * -Alias *
}
Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1")
