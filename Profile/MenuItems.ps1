

function Show-DevToolsMenu {
    $menuItems = @(
        @{ Text = "ü¶Ä Rust: –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ nightly"; Data = "rust-update" },
        @{ Text = "üì¶ Cargo: –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; Data = "cargo-update" },
        @{ Text = "‚ö° Bun: –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; Data = "bun-update" },
        @{ Text = "üöÄ Bun: dev server"; Data = "bun-dev" },
        @{ Text = "üèóÔ∏è  Bun: build –ø—Ä–æ–µ–∫—Ç"; Data = "bun-build" },
        @{ Text = "üìù Zed: –æ–±–Ω–æ–≤–∏—Ç—å (scoop)"; Data = "zed-update" },
        @{ Text = "üì¶ Winget: –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ"; Data = "winget-update" },
        @{ Text = "üíæ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"; Data = "db-ops" },
        @{ Text = "üîç –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–æ–≤"; Data = "port-scan" },
        @{ Text = "üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"; Data = "sys-monitor" },
        @{ Text = "üéØ –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"; Data = "net-tools" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#FF8C00"
        EndColor = "#FF1493"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üõ†Ô∏è  –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "rust-update" {
            Write-RGB "`nü¶Ä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Rust..." -FC OrangeRGB -newline
            Show-RGBLoader -Text "Updating Rust to nightly" -Duration 2
            rustup update nightly
            Write-RGB "‚úÖ Rust –æ–±–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "cargo-update" {
            Write-RGB "`nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Cargo –ø–∞–∫–µ—Ç–æ–≤..." -FC NeonBlueRGB -newline
            cargo update -v
            Write-RGB "‚úÖ –ü–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "bun-update" {
            Write-RGB "`n‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bun –ø–∞–∫–µ—Ç–æ–≤..." -FC YellowRGB -newline
            bun update
            Write-RGB "‚úÖ Bun –ø–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "bun-dev" {
            $projectDir = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π)"
            if (-not $projectDir) { $projectDir = Get-Location }
            Set-Location $projectDir
            Write-RGB "üöÄ –ó–∞–ø—É—Å–∫ Bun dev server..." -FC LimeRGB -newline
            bun run dev
        }
        "bun-build" {
            $projectDir = Read-Host "`n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π)"
            if (-not $projectDir) { $projectDir = Get-Location }
            Set-Location $projectDir
            Write-RGB "üèóÔ∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -FC CyanRGB -newline
            Show-RGBProgress -Activity "Building project" -TotalSteps 100 -Gradient
            bun run build
            Write-RGB "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "port-scan" {
            Show-PortScanner
            Pause
            Show-DevToolsMenu
        }
        "sys-monitor" {
            Show-SystemMonitor
            Pause
            Show-DevToolsMenu
        }
        "db-ops" {
            Show-DatabaseMenu
        }
        "net-tools" {
            Show-NetworkToolsMenu
        }
        "zed-update" {
            Write-RGB "`nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Zed —á–µ—Ä–µ–∑ Scoop..." -FC CyanRGB -newline
            scoop update zed
            Write-RGB "‚úÖ Zed –æ–±–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "winget-update" {
            Write-RGB "`nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ Winget..." -FC MagentaRGB -newline
            winget upgrade --all
            Write-RGB "‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-DevToolsMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ù–û–í–û–ï –ú–ï–ù–Æ –°–ï–¢–ï–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í =====


# ===== –ú–ï–ù–Æ –ë–ê–ó –î–ê–ù–ù–´–• =====
function Show-DatabaseMenu {
    $menuItems = @(
        @{ Text = "üêò PostgreSQL —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "postgres" },
        @{ Text = "ü¶≠ MySQL —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "mysql" },
        @{ Text = "üçÉ MongoDB —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "mongodb" },
        @{ Text = "üî¥ Redis —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; Data = "redis" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#32CD32"
        EndColor = "#00FA9A"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –ë–î" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "postgres" {
            Write-RGB "`nüêò PostgreSQL –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC CyanRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: pg_ctl start" -FC White -newline
            Write-RGB "2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: pg_ctl stop" -FC White -newline
            Write-RGB "3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: psql -U username -d database" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "mysql" {
            Write-RGB "`nü¶≠ MySQL –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC YellowRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: net start mysql" -FC White -newline
            Write-RGB "2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: mysql -u root -p" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "mongodb" {
            Write-RGB "`nüçÉ MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC LimeRGB -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: mongod" -FC White -newline
            Write-RGB "2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: mongosh" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "redis" {
            Write-RGB "`nüî¥ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏:" -FC Red -newline
            Write-RGB "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: redis-server" -FC White -newline
            Write-RGB "2. CLI: redis-cli" -FC White -newline
            Pause
            Show-DatabaseMenu
        }
        "back" {
            Show-DevToolsMenu
        }
    }
}


# ===== –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ô–ö–ò POWERSHELL =====
function Show-PowerShellConfigMenu {
    $menuItems = @(
        @{ Text = "üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É"; Data = "colors" },
        @{ Text = "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"; Data = "edit-profile" },
        @{ Text = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"; Data = "reload" },
        @{ Text = "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏"; Data = "install-modules" },
        @{ Text = "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PSReadLine"; Data = "psreadline" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#8A2BE2"
        EndColor = "#4169E1"
        GradientType = "Sine"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ê POWERSHELL" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "colors" {
            Show-ColorSchemeMenu
        }
        "edit-profile" {
            if (Get-Command code -ErrorAction SilentlyContinue) {
                code $PROFILE
            } else {
                notepad $PROFILE
            }
            Show-PowerShellConfigMenu
        }
        "reload" {
            Write-RGB "`nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è..." -FC YellowRGB -newline
            . $PROFILE
            Write-RGB "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-PowerShellConfigMenu
        }
        "install-modules" {
            Show-ModuleInstallMenu
        }
        "psreadline" {
            Write-RGB "`n‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PSReadLine:" -FC CyanRGB -newline
            Get-PSReadLineOption | Format-List
            Pause
            Show-PowerShellConfigMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ú–ï–ù–Æ –£–°–¢–ê–ù–û–í–ö–ò –ú–û–î–£–õ–ï–ô =====
function Show-ModuleInstallMenu {
    $modules = @(
        @{ Text = "üìä ImportExcel - —Ä–∞–±–æ—Ç–∞ —Å Excel"; Data = "ImportExcel" },
        @{ Text = "üé® PowerColorLS - —Ü–≤–µ—Ç–Ω–æ–π ls"; Data = "PowerColorLS" },
        @{ Text = "üìÅ z - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è"; Data = "z" },
        @{ Text = "üîç PSEverything - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"; Data = "PSEverything" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $selected = Show-Menu -MenuItems $modules -MenuTitle "üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ú–û–î–£–õ–ï–ô" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å"

    if ($selected.Data -eq "back") {
        Show-PowerShellConfigMenu
    } else {
        Write-RGB "`nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è $($selected.Data)..." -FC CyanRGB -newline
        Install-Module -Name $selected.Data -Scope CurrentUser -Force
        Write-RGB "‚úÖ –ú–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" -FC LimeRGB -newline
        Import-Module $selected.Data
        Pause
        Show-ModuleInstallMenu
    }
}


# ===== –ú–ï–ù–Æ –û–ß–ò–°–¢–ö–ò –°–ò–°–¢–ï–ú–´ =====
function Show-CleanupMenu {
    $menuItems = @(
        @{ Text = "üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"; Data = "temp" },
        @{ Text = "üìÅ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"; Data = "cache" },
        @{ Text = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"; Data = "recycle" },
        @{ Text = "üíæ –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"; Data = "disk-space" },
        @{ Text = "üîô –ù–∞–∑–∞–¥"; Data = "back" }
    )

    $gradientOptions = @{
        StartColor = "#228B22"
        EndColor = "#FF6347"
        GradientType = "Linear"
    }

    $selected = Show-Menu -MenuItems $menuItems -MenuTitle "üßπ –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´" -Prompt "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" -GradientOptions $gradientOptions

    switch ($selected.Data) {
        "temp" {
            Write-RGB "`nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." -FC YellowRGB -newline
            $tempFolders = @($env:TEMP, "C:\Windows\Temp")
            foreach ($folder in $tempFolders) {
                Get-ChildItem $folder -Recurse -Force -ErrorAction SilentlyContinue |
                        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
            }
            Write-RGB "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "cache" {
            Write-RGB "`nüìÅ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞..." -FC OrangeRGB -newline
            Clear-RecycleBin -Force -ErrorAction SilentlyContinue
            Write-RGB "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "recycle" {
            Write-RGB "`nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã..." -FC CyanRGB -newline
            Clear-RecycleBin -Force -ErrorAction SilentlyContinue
            Write-RGB "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!" -FC LimeRGB -newline
            Pause
            Show-CleanupMenu
        }
        "disk-space" {
            Show-DiskSpaceAnalysis
            Pause
            Show-CleanupMenu
        }
        "back" {
            Show-MainMenu
        }
    }
}

# ===== –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê =====
function Show-DiskSpaceAnalysis {
    Write-RGB "`nüíæ –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê" -FC GoldRGB -newline

    Get-PSDrive -PSProvider FileSystem | ForEach-Object {
        if ($_.Used -gt 0) {
            $usedPercent = [Math]::Round(($_.Used / ($_.Used + $_.Free)) * 100, 2)

            Write-RGB "`nüìÅ –î–∏—Å–∫ " -FC White
            Write-RGB "$($_.Name):" -FC CyanRGB -newline

            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            $filled = [int]($usedPercent / 3.33)
            for ($i = 0; $i -lt $filled; $i++) {
                $color = Get-GradientColor -Index $i -TotalItems 30 -StartColor "#00FF00" -EndColor "#FF0000"
                Write-RGB "‚ñà" -FC $color
            }
            Write-Host ("‚ñë" * (30 - $filled)) -NoNewline

            Write-RGB " $usedPercent%" -FC White -newline
            Write-RGB "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " -FC White
            Write-RGB "$([Math]::Round($_.Used / 1GB, 2)) GB" -FC YellowRGB
            Write-RGB " | –°–≤–æ–±–æ–¥–Ω–æ: " -FC White
            Write-RGB "$([Math]::Round($_.Free / 1GB, 2)) GB" -FC LimeRGB -newline
        }
    }
}

function proj {
    param([string]$Name)

    $projects = @{
        "tauri"  = "C:\Projects\TauriApp"
        "react"  = "C:\Projects\ReactApp"
        "rust"   = "C:\Projects\RustProject"
        "web3"   = "C:\Projects\Web3App"
        "vite"   = "C:\Projects\ViteApp"
    }

    if ($Name -and $projects.ContainsKey($Name)) {
        Set-Location $projects[$Name]
        Write-RGB "üìÅ Switched to project: " -FC White
        Write-RGB $Name -FC NeonGreenRGB -newline
        ls
    } else {
        Write-RGB "üìÅ Available projects:" -FC CyanRGB -newline
        $i = 0
        $projects.Keys | Sort-Object | ForEach-Object {
            $color = Get-GradientColor -Index $i -TotalItems $projects.Count -StartColor "#00FF00" -EndColor "#FF00FF"
            Write-RGB "   ‚Ä¢ " -FC White
            Write-RGB $_ -FC $color
            Write-RGB " ‚Üí " -FC White
            Write-RGB $projects[$_] -FC DarkGray -newline
            $i++
        }
    }
}