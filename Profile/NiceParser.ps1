# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                       üé® NICE PARSER v2.0 - RGB Edition                    ‚ïë
# ‚ïë                     Enhanced PowerShell Text Parser                         ‚ïë
# ‚ïë                         With Full RGB Support üåà                           ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

#region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
$requiredModules = @('Parser', 'ColoredText')
foreach ($module in $requiredModules) {
    if (-not (Get-Module -ListAvailable -Name $module)) {
        Write-Warning "–ú–æ–¥—É–ª—å $module –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: Install-Module $module"
    } else {
        Import-Module $module -ErrorAction SilentlyContinue
    }
}

#endregion

#region RGB –ü–∞–ª–∏—Ç—Ä–∞ –∏ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è RGB –ø–∞–ª–∏—Ç—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
if (-not $global:RGB) {
    $global:RGB = @{}
}

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ª–∏—Ç—Ä–µ
$additionalColors = @{
# –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞
    "PastelPink"     = "#FFD1DC"
    "PastelBlue"     = "#AEC6CF"
    "PastelGreen"    = "#77DD77"
    "PastelYellow"   = "#FDFD96"
    "PastelPurple"   = "#B19CD9"

    # –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏
    "Silver"         = "#C0C0C0"
    "Bronze"         = "#CD7F32"
    "Copper"         = "#B87333"
    "Platinum"       = "#E5E4E2"

    # –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞
    "SkyBlue"        = "#87CEEB"
    "SeaGreen"       = "#2E8B57"
    "SandyBrown"     = "#F4A460"
    "Turquoise"      = "#40E0D0"

    # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
    "ElectricLime"   = "#CCFF00"
    "LaserRed"       = "#FF0F0F"
    "NeonOrange"     = "#FF6600"
    "PlasmaViolet"   = "#8B00FF"
}

foreach ($color in $additionalColors.GetEnumerator()) {
    if (-not $global:RGB.ContainsKey($color.Key)) {
        $global:RGB[$color.Key] = $color.Value
    }
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEX –≤ RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
function ConvertTo-RGBComponents {
    param([string]$HexColor)

    $hex = $HexColor.TrimStart('#')
    if ($hex.Length -eq 3) {
        $hex = $hex[0] + $hex[0] + $hex[1] + $hex[1] + $hex[2] + $hex[2]
    }

    return @{
        R = [Convert]::ToInt32($hex.Substring(0, 2), 16)
        G = [Convert]::ToInt32($hex.Substring(2, 2), 16)
        B = [Convert]::ToInt32($hex.Substring(4, 2), 16)
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è ANSI escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è RGB
function Get-RGBAnsiSequence {
    param(
        [string]$HexColor,
        [switch]$Background
    )

    $rgb = ConvertTo-RGBComponents -HexColor $HexColor
    $type = if ($Background) { 48 } else { 38 }

    return "`e[${type};2;$($rgb.R);$($rgb.G);$($rgb.B)m"
}

#endregion

#region –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Write-RGB

function Write-RGB {
    <#
    .SYNOPSIS
        –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RGB —Ü–≤–µ—Ç–æ–≤
    
    .DESCRIPTION
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å RGB —Ü–≤–µ—Ç–∞–º–∏ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ñ–æ–Ω–∞,
        –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∏–ª–µ–π –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤—ã–≤–æ–¥–∞
    
    .PARAMETER Text
        –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    
    .PARAMETER ForegroundColor
        –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–∏–º—è –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –∏–ª–∏ HEX)
    
    .PARAMETER BackgroundColor
        –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–∏–º—è –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –∏–ª–∏ HEX)
    
    .PARAMETER Style
        –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: Bold, Italic, Underline, Blink
    
    .PARAMETER NoNewLine
        –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    
    .EXAMPLE
        Write-RGB "Hello World" -ForegroundColor "#FF6B6B" -Style Bold
    
    .EXAMPLE
        Write-RGB "Warning!" -ForegroundColor "ElectricLime" -BackgroundColor "#2C0000" -Style Blink
    #>

    [CmdletBinding()]
    param(
        [Parameter(Position = 0, ValueFromPipeline = $true)]
        [string]$Text,

        [Alias('FC', 'FG')]
        [string]$ForegroundColor = 'White',

        [Alias('BC', 'BG')]
        [string]$BackgroundColor,

        [ValidateSet('Normal', 'Bold', 'Italic', 'Underline', 'Blink')]
        [string[]]$Style = 'Normal',

        [Alias('NNL')]
        [switch]$NoNewLine
    )

    begin {
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ANSI
        if (-not $PSStyle) {
            Write-Warning "PSStyle –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ PowerShell"
            return
        }
    }

    process {
        $output = ""

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        foreach ($s in $Style) {
            switch ($s) {
                'Bold'      { $output += $PSStyle.Bold }
                'Italic'    { $output += $PSStyle.Italic }
                'Underline' { $output += $PSStyle.Underline }
                'Blink'     { $output += $PSStyle.Blink }
            }
        }

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
        if ($global:RGB.ContainsKey($ForegroundColor)) {
            $output += Get-RGBAnsiSequence -HexColor $global:RGB[$ForegroundColor]
        } elseif ($ForegroundColor -match '^#[0-9A-Fa-f]{3,6}$') {
            $output += Get-RGBAnsiSequence -HexColor $ForegroundColor
        } else {
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
            try {
                $output += $PSStyle.Foreground.$ForegroundColor
            } catch {
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                $output += $PSStyle.Foreground.White
            }
        }

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        if ($BackgroundColor) {
            if ($global:RGB.ContainsKey($BackgroundColor)) {
                $output += Get-RGBAnsiSequence -HexColor $global:RGB[$BackgroundColor] -Background
            } elseif ($BackgroundColor -match '^#[0-9A-Fa-f]{3,6}$') {
                $output += Get-RGBAnsiSequence -HexColor $BackgroundColor -Background
            } else {
                try {
                    $output += $PSStyle.Background.$BackgroundColor
                } catch {
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                }
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
        $output += $Text + $PSStyle.Reset

        # –í—ã–≤–æ–¥
        if ($NoNewLine) {
            Write-Host $output -NoNewline
        } else {
            Write-Host $output
        }
    }
}

#endregion

#region –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤

function Get-GradientColor {
    <#
    .SYNOPSIS
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏
    
    .PARAMETER StartColor
        –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    
    .PARAMETER EndColor
        –ö–æ–Ω–µ—á–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    
    .PARAMETER Position
        –ü–æ–∑–∏—Ü–∏—è –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ (0.0 - 1.0)
    
    .PARAMETER Steps
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ (–¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤)
    #>

    param(
        [string]$StartColor,
        [string]$EndColor,
        [double]$Position,
        [int]$Steps = 0
    )

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –≤ RGB
    $start = ConvertTo-RGBComponents -HexColor $StartColor
    $end = ConvertTo-RGBComponents -HexColor $EndColor

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —à–∞–≥–∏, –∫–≤–∞–Ω—Ç—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    if ($Steps -gt 0) {
        $Position = [Math]::Floor($Position * $Steps) / $Steps
    }

    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    $r = [Math]::Round($start.R + ($end.R - $start.R) * $Position)
    $g = [Math]::Round($start.G + ($end.G - $start.G) * $Position)
    $b = [Math]::Round($start.B + ($end.B - $start.B) * $Position)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HEX —Ü–≤–µ—Ç
    return "{0:X2}{1:X2}{2:X2}" -f [int][double]$r, [int][double]$g, [int][double]$b
}

function Get-GradientColorVariant {
    param(
        [string]$StartColor,
        [string]$EndColor,
        [double]$Ratio
    )

    $startR = [Convert]::ToInt32($StartColor.Substring(1, 2), 16)
    $startG = [Convert]::ToInt32($StartColor.Substring(3, 2), 16)
    $startB = [Convert]::ToInt32($StartColor.Substring(5, 2), 16)

    $endR = [Convert]::ToInt32($EndColor.Substring(1, 2), 16)
    $endG = [Convert]::ToInt32($EndColor.Substring(3, 2), 16)
    $endB = [Convert]::ToInt32($EndColor.Substring(5, 2), 16)

    $newR = [int]($startR + ($endR - $startR) * $Ratio)
    $newG = [int]($startG + ($endG - $startG) * $Ratio)
    $newB = [int]($startB + ($endB - $startB) * $Ratio)

    return "#{0:X2}{1:X2}{2:X2}" -f $newR, $newG, $newB
}

function Write-GradientText {
    <#
    .SYNOPSIS
        –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    
    .PARAMETER Text
        –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    
    .PARAMETER StartColor
        –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    
    .PARAMETER EndColor
        –ö–æ–Ω–µ—á–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    
    .PARAMETER Style
        –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
    #>

    param(
        [string]$Text,
        [string]$StartColor = "#FF0000",
        [string]$EndColor = "#0000FF",
        [string[]]$Style = 'Normal'
    )

    $chars = $Text.ToCharArray()
    $length = $chars.Length

    for ($i = 0; $i -lt $length; $i++) {
        $position = if ($length -eq 1) { 0.5 } else { $i / ($length - 1) }
        $color = Get-GradientColor -StartColor $StartColor -EndColor $EndColor -Position $position

        Write-RGB -Text $chars[$i] -ForegroundColor $color -Style $Style -NoNewLine
    }

    Write-Host ""  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
}

#endregion

#region –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –ó–∞–≥–æ–ª–æ–≤–∫–∏

function Show-RGBHeader {
    <#
    .SYNOPSIS
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ —Ä–∞–º–∫–æ–π
    
    .PARAMETER Title
        –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    
    .PARAMETER Width
        –®–∏—Ä–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ)
    
    .PARAMETER BorderStyle
        –°—Ç–∏–ª—å —Ä–∞–º–∫–∏: Single, Double, Rounded, Heavy, Dashed
    
    .PARAMETER TitleColor
        –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
    
    .PARAMETER BorderColor
        –¶–≤–µ—Ç —Ä–∞–º–∫–∏
    #>

    param(
        [Parameter(Mandatory = $true)]
        [string]$Title,

        [int]$Width = 0,

        [ValidateSet('Single', 'Double', 'Rounded', 'Heavy', 'Dashed')]
        [string]$BorderStyle = 'Double',

        [hashtable]$TitleColor = @{
        StartColor = "#FF6B6B"
        EndColor = "#4ECDC4"
    },

        [string]$BorderColor = "DeepPurple"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–º–∫–∏
    $borders = @{
        'Single'  = @{ TL = "‚îå"; TR = "‚îê"; BL = "‚îî"; BR = "‚îò"; H = "‚îÄ"; V = "‚îÇ" }
        'Double'  = @{ TL = "‚ïî"; TR = "‚ïó"; BL = "‚ïö"; BR = "‚ïù"; H = "‚ïê"; V = "‚ïë" }
        'Rounded' = @{ TL = "‚ï≠"; TR = "‚ïÆ"; BL = "‚ï∞"; BR = "‚ïØ"; H = "‚îÄ"; V = "‚îÇ" }
        'Heavy'   = @{ TL = "‚îè"; TR = "‚îì"; BL = "‚îó"; BR = "‚îõ"; H = "‚îÅ"; V = "‚îÉ" }
        'Dashed'  = @{ TL = "‚îå"; TR = "‚îê"; BL = "‚îî"; BR = "‚îò"; H = "‚ïå"; V = "‚îÜ" }
    }

    $border = $borders[$BorderStyle]

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
    if ($Width -eq 0) {
        $Width = $Title.Length + 6
    }
    $Width = [Math]::Max($Width, $Title.Length + 6)

    # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    $padding = [Math]::Max(0, ($Width - $Title.Length - 2) / 2)
    $leftPad = [Math]::Floor($padding)
    $rightPad = [Math]::Ceiling($padding)

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB -Text $border.TL -ForegroundColor $BorderColor -NoNewLine
    Write-RGB -Text ($border.H * ($Width - 2)) -ForegroundColor $BorderColor -NoNewLine
    Write-RGB -Text $border.TR -ForegroundColor $BorderColor

    # –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    Write-RGB -Text $border.V -ForegroundColor $BorderColor -NoNewLine
    Write-RGB -Text (" " * $leftPad) -NoNewLine

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if ($TitleColor.StartColor -and $TitleColor.EndColor) {
        Write-GradientText -Text $Title -StartColor $TitleColor.StartColor -EndColor $TitleColor.EndColor -Style Bold
        # –ö—É—Ä—Å–æ—Ä —É–∂–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ Write-GradientText
        Write-RGB -Text ("`r" + $border.V + (" " * $leftPad + $Title + " " * $rightPad)) -ForegroundColor $BorderColor -NoNewLine
    } else {
        Write-RGB -Text $Title -ForegroundColor $TitleColor -Style Bold -NoNewLine
        Write-RGB -Text (" " * $rightPad) -NoNewLine
    }

    Write-RGB -Text $border.V -ForegroundColor $BorderColor

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB -Text $border.BL -ForegroundColor $BorderColor -NoNewLine
    Write-RGB -Text ($border.H * ($Width - 2)) -ForegroundColor $BorderColor -NoNewLine
    Write-RGB -Text $border.BR -ForegroundColor $BorderColor
}

#endregion

#region –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã

function Show-RGBProgress {
    <#
    .SYNOPSIS
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    
    .PARAMETER Activity
        –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    .PARAMETER PercentComplete
        –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
    
    .PARAMETER Status
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    
    .PARAMETER Width
        –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    .PARAMETER ShowPercentage
        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç
    
    .PARAMETER BarStyle
        –°—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    #>

    param(
        [string]$Activity = "Processing",

        [ValidateRange(0, 100)]
        [int]$PercentComplete = 0,

        [string]$Status = "",

        [int]$Width = 50,

        [switch]$ShowPercentage,

        [ValidateSet('Blocks', 'Gradient', 'Dots', 'Lines')]
        [string]$BarStyle = 'Gradient'
    )

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    $styles = @{
        'Blocks'   = @{ Full = "‚ñà"; Empty = "‚ñë" }
        'Gradient' = @{ Full = "‚ñà"; Empty = "‚ñë" }
        'Dots'     = @{ Full = "‚óè"; Empty = "‚óã" }
        'Lines'    = @{ Full = "‚îÅ"; Empty = "‚ïå" }
    }

    $chars = $styles[$BarStyle]
    $filled = [Math]::Floor(($PercentComplete / 100) * $Width)
    $empty = $Width - $filled

    # –í—ã–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    Write-RGB -Text "$Activity " -ForegroundColor "Lavender" -Style Bold -NoNewLine

    if ($Status) {
        Write-RGB -Text "($Status) " -ForegroundColor "PastelYellow" -NoNewLine
    }

    # –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    Write-RGB -Text "[" -ForegroundColor "Silver" -NoNewLine

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if ($BarStyle -eq 'Gradient') {
        for ($i = 0; $i -lt $filled; $i++) {
            $position = $i / $Width
            $color = Get-GradientColor -StartColor "#FF0000" -EndColor "#00FF00" -Position $position
            Write-RGB -Text $chars.Full -ForegroundColor $color -NoNewLine
        }
    } else {
        $progressColor = if ($PercentComplete -lt 33) { "#FF6B6B" }
        elseif ($PercentComplete -lt 66) { "#FFD93D" }
        else { "#6BCF7F" }

        Write-RGB -Text ($chars.Full * $filled) -ForegroundColor $progressColor -NoNewLine
    }

    # –ü—É—Å—Ç–∞—è —á–∞—Å—Ç—å
    Write-RGB -Text ($chars.Empty * $empty) -ForegroundColor "#333333" -NoNewLine

    # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    Write-RGB -Text "]" -ForegroundColor "Silver" -NoNewLine

    # –ü—Ä–æ—Ü–µ–Ω—Ç
    if ($ShowPercentage) {
        Write-RGB -Text " $PercentComplete%" -ForegroundColor "ElectricBlue" -Style Bold
    } else {
        Write-Host ""
    }
}

#endregion

#region –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å RGB –ø—Ä–∞–≤–∏–ª–∞–º–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
$script:RGBParsingRules = @(
    @{
        Name = "Errors"
        Pattern = '\b(ERROR|–û–®–ò–ë–ö–ê|FATAL|–ö–†–ò–¢–ò–ß–ù–û|EXCEPTION)\b'
        ForegroundColor = "LaserRed"
        BackgroundColor = "#2C0000"
        Style = @('Bold')
    },
    @{
        Name = "Success"
        Pattern = '\b(SUCCESS|–£–°–ü–ï–®–ù–û|OK|COMPLETE|–ì–û–¢–û–í–û)\b'
        ForegroundColor = "LimeGreen"
        Style = @('Bold')
    },
    @{
        Name = "Warnings"
        Pattern = '\b(WARNING|–í–ù–ò–ú–ê–ù–ò–ï|WARN|–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï)\b'
        ForegroundColor = "GoldYellow"
        Style = @('Bold')
    },
    @{
        Name = "Info"
        Pattern = '\b(INFO|–ò–ù–§–û–†–ú–ê–¶–ò–Ø|–°–í–ï–î–ï–ù–ò–Ø|NOTE)\b'
        ForegroundColor = "ElectricBlue"
    },
    @{
        Name = "Timestamps"
        Pattern = '\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}'
        ForegroundColor = "Silver"
    },
    @{
        Name = "IPAddresses"
        Pattern = '\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
        ForegroundColor = "Turquoise"
    },
    @{
        Name = "URLs"
        Pattern = 'https?://[^\s]+'
        ForegroundColor = "SkyBlue"
        Style = @('Underline')
    },
    @{
        Name = "Paths"
        Pattern = '(?:[A-Za-z]:)?[\\/](?:[^\\/\s]+[\\/])*[^\\/\s]+'
        ForegroundColor = "PastelGreen"
    }
)

function Out-RGBParsed {
    <#
    .SYNOPSIS
        –ü–∞—Ä—Å–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å RGB –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
    
    .PARAMETER InputText
        –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    .PARAMETER Rules
        –ú–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    .PARAMETER PassThru
        –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞
    #>

    param(
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [string[]]$InputText,

        [array]$Rules = $script:RGBParsingRules,

        [switch]$PassThru
    )

    process {
        foreach ($line in $InputText) {
            $segments = @()
            $lastIndex = 0

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            $matches = @()
            foreach ($rule in $Rules) {
                $regex = [regex]$rule.Pattern
                $regexMatches = $regex.Matches($line)

                foreach ($match in $regexMatches) {
                    $matches += @{
                        Index = $match.Index
                        Length = $match.Length
                        Value = $match.Value
                        Rule = $rule
                    }
                }
            }

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            $matches = $matches | Sort-Object Index

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            foreach ($match in $matches) {
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if ($match.Index -gt $lastIndex) {
                    $segments += @{
                        Text = $line.Substring($lastIndex, $match.Index - $lastIndex)
                        ForegroundColor = "White"
                        Style = @('Normal')
                    }
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                $segments += @{
                    Text = $match.Value
                    ForegroundColor = $match.Rule.ForegroundColor
                    BackgroundColor = $match.Rule.BackgroundColor
                    Style = $match.Rule.Style
                }

                $lastIndex = $match.Index + $match.Length
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
            if ($lastIndex -lt $line.Length) {
                $segments += @{
                    Text = $line.Substring($lastIndex)
                    ForegroundColor = "White"
                    Style = @('Normal')
                }
            }

            # –í—ã–≤–æ–¥–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã
            if ($PassThru) {
                return $segments
            } else {
                foreach ($segment in $segments) {
                    $params = @{
                        Text = $segment.Text
                        ForegroundColor = $segment.ForegroundColor
                        NoNewLine = $true
                    }

                    if ($segment.BackgroundColor) {
                        $params.BackgroundColor = $segment.BackgroundColor
                    }

                    if ($segment.Style) {
                        $params.Style = $segment.Style
                    }

                    Write-RGB @params
                }
                Write-Host ""  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            }
        }
    }
}

#endregion
function Write-Rainbow {
    param([string]$Text)

    $rainbowColors = @("#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF", "#4B0082", "#9400D3")
    $chars = $Text.ToCharArray()

    for ($i = 0; $i -lt $chars.Length; $i++) {
        $colorIndex = $i % $rainbowColors.Length
        Write-RGB $chars[$i] -FC $rainbowColors[$colorIndex] -Bold
    }
    Write-Host ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥–∞—é—â–µ–≥–æ RGB —Ç–µ–∫—Å—Ç–∞
function Write-BlinkingRGB {
    param(
        [string]$Text,
        [int]$Times = 5,
        [string]$Color1 = "#FF0080",
        [string]$Color2 = "#00FFFF"
    )

    for ($i = 0; $i -lt $Times; $i++) {
        $color = if ($i % 2 -eq 0) { $Color1 } else { $Color2 }
        Write-RGB $Text -FC $color -Bold
        Start-Sleep -Milliseconds 500
        Write-Host ("`r" + (" " * $Text.Length) + "`r") -NoNewline
    }
}
#region –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

function Show-NiceParserDemo {
    <#
    .SYNOPSIS
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ NiceParser
    #>

    Clear-Host

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    Show-RGBHeader -Title "NICE PARSER RGB DEMO" -BorderStyle Double
    Write-Host ""

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    Write-RGB "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:" -ForegroundColor "Lavender" -Style Bold
    Write-GradientText -Text "PowerShell RGB Paradise!" -StartColor "#FF00FF" -EndColor "#00FFFF"
    Write-Host ""

    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    Write-RGB "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:" -ForegroundColor "Lavender" -Style Bold
    $colorIndex = 0
    foreach ($colorName in $global:RGB.Keys | Select-Object -First 20) {
        Write-RGB "  $colorName " -ForegroundColor $colorName -NoNewLine
        $colorIndex++
        if ($colorIndex % 4 -eq 0) { Write-Host "" }
    }
    Write-Host "`n"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    Write-RGB "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤:" -ForegroundColor "Lavender" -Style Bold

    Show-RGBProgress -Activity "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö" -PercentComplete 25 -ShowPercentage
    Show-RGBProgress -Activity "–û–±—Ä–∞–±–æ—Ç–∫–∞" -PercentComplete 60 -BarStyle Dots -ShowPercentage
    Show-RGBProgress -Activity "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ" -PercentComplete 95 -BarStyle Lines -ShowPercentage
    Write-Host ""

    # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤
    Write-RGB "–ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤:" -ForegroundColor "Lavender" -Style Bold

    $sampleLog = @"
2024-01-15 10:30:15 INFO: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
2024-01-15 10:30:16 SUCCESS: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 192.168.1.100
2024-01-15 10:30:17 INFO: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ C:\Config\app.json
2024-01-15 10:30:18 WARNING: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ (15%)
2024-01-15 10:30:19 ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ https://api.example.com
2024-01-15 10:30:20 INFO: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥–û–®–ò–ë–ö–ê
2024-01-15 10:30:51 SUCCESS: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
"@

    $sampleLog -split "`n" | Out-RGBParsed

    Write-Host "`n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
}

#endregion

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
#if ($MyInvocation.MyCommand.Path -match '\.psm1) {
#    Export-ModuleMember -Function @(
#        'Write-RGB',
#        'Write-GradientText',
#        'Get-GradientColor',
#        'Show-RGBHeader',
#        'Show-RGBProgress',
#        'Out-RGBParsed',
#        'Show-NiceParserDemo'
#)


# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Set-Alias -Name wrgb -Value Write-RGB
Set-Alias -Name wgrad -Value Write-GradientText
Set-Alias -Name orgb -Value Out-RGBParsed

Write-RGB "`n‚ú® NiceParser v2.0 –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor "ElectricLime" -Style Bold
Write-RGB "–í–≤–µ–¥–∏—Ç–µ " -ForegroundColor "Silver" -NoNewLine
Write-RGB "Show-NiceParserDemo" -ForegroundColor "SkyBlue" -Style @('Bold', 'Underline') -NoNewLine
Write-RGB " –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`n" -ForegroundColor "Silver"