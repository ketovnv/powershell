# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                       üé® NICE PARSER v2.1 - RGB Edition                    ‚ïë
# ‚ïë                     Enhanced PowerShell Text Parser                         ‚ïë
# ‚ïë                         With Full RGB Support üåà                           ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

#region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
$requiredModules = @('Parser', 'ColoredText')
foreach ($module in $requiredModules)
{
    if (-not (Get-Module -ListAvailable -Name $module))
    {
        Write-Warning "–ú–æ–¥—É–ª—å $module –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: Install-Module $module"
    }
    else
    {
        Import-Module $module -ErrorAction SilentlyContinue
    }
}

# –ò–º–ø–æ—Ä—Ç —Ü–≤–µ—Ç–æ–≤
            . (Join-Path $PSScriptRoot 'NiceColors.ps1')
#endregion

if (-not $global:RGB)
{
    $global:RGB = @{ }
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)


#endregion

#region –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –ó–∞–≥–æ–ª–æ–≤–∫–∏

function Show-RGBHeader
{
    <#
    .SYNOPSIS
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ —Ä–∞–º–∫–æ–π

    .PARAMETER Title
        –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞

    .PARAMETER Width
        –®–∏—Ä–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ)

    .PARAMETER BorderStyle
        –°—Ç–∏–ª—å —Ä–∞–º–∫–∏: Single, Double, Rounded, Heavy, Dashed

    .PARAMETER TitleColor
        –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç

    .PARAMETER BorderColor
        –¶–≤–µ—Ç —Ä–∞–º–∫–∏
    #>

    param(
        [Parameter(Mandatory = $true)]
        [string]$Title,

        [int]$Width = 0,

        [ValidateSet('Single', 'Double', 'Rounded', 'Heavy', 'Dashed')]
        [string]$BorderStyle = 'Double',

        [hashtable]$TitleColor = @{
        StartColor = "#FF6B6B"
        EndColor = "#4ECDC4"
    },

        [string]$BorderColor = "DeepPurple"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–º–∫–∏
    $borders = @{
        'Single' = @{ TL = "‚îå"; TR = "‚îê"; BL = "‚îî"; BR = "‚îò"; H = "‚îÄ"; V = "‚îÇ" }
        'Double' = @{ TL = "‚ïî"; TR = "‚ïó"; BL = "‚ïö"; BR = "‚ïù"; H = "‚ïê"; V = "‚ïë" }
        'Rounded' = @{ TL = "‚ï≠"; TR = "‚ïÆ"; BL = "‚ï∞"; BR = "‚ïØ"; H = "‚îÄ"; V = "‚îÇ" }
        'Heavy' = @{ TL = "‚îè"; TR = "‚îì"; BL = "‚îó"; BR = "‚îõ"; H = "‚îÅ"; V = "‚îÉ" }
        'Dashed' = @{ TL = "‚îå"; TR = "‚îê"; BL = "‚îî"; BR = "‚îò"; H = "‚ïå"; V = "‚îÜ" }
    }

    $border = $borders[$BorderStyle]

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
    if ($Width -eq 0)
    {
        $Width = $Title.Length + 6
    }
    $Width = [Math]::Max($Width, $Title.Length + 6)

    # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    $padding = [Math]::Max(0, ($Width - $Title.Length - 2) / 2)
    $leftPad = [Math]::Floor($padding)
    $rightPad = [Math]::Ceiling($padding)

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB -Text $border.TL -FC $BorderColor
    Write-RGB -Text ($border.H * ($Width - 2)) -FC $BorderColor
    Write-RGB -Text $border.TR -FC $BorderColor

    # –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    Write-RGB -Text $border.V -FC $BorderColor
    Write-RGB -Text (" " * $leftPad)

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if ($TitleColor.StartColor -and $TitleColor.EndColor)
    {
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        $currentY = $Host.UI.RawUI.CursorPosition.Y

        # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
#

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É
        $Host.UI.RawUI.CursorPosition = @{X = 0; Y = $currentY}

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        Write-RGB -Text $border.V -FC $BorderColor
        Write-RGB -Text (" " * $leftPad)
        Write-GradientText -Text $Title -StartColor $TitleColor.StartColor -EndColor $TitleColor.EndColor
#        Write-RGB -Text $Title -FC "#1177FF"
        Write-RGB -Text (" " * $rightPad)
    }
    else
    {
        $titleColorName = if ($TitleColor -is [string])
        {
            $TitleColor
        }
        else
        {
            "White"
        }
        Write-RGB -Text $Title -FC $titleColorName -Style Bold
        Write-RGB -Text (" " * $rightPad)
    }

    Write-RGB -Text $border.V -FC $BorderColor -newline

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB -Text $border.BL -FC $BorderColor
    Write-RGB -Text ($border.H * ($Width - 2)) -FC $BorderColor
    Write-RGB -Text $border.BR -FC $BorderColor -newline
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
function Show-Header
{
    param(
        [string]$Title,
        [string]$StartColor = "#FF6B6B",
        [string]$EndColor = "#4ECDC4"
    )

    Show-RGBHeader -Title $Title -TitleColor @{
        StartColor = $StartColor
        EndColor = $EndColor
    }
}

#endregion

#region –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã

function Show-RGBProgress
{
    <#
    .SYNOPSIS
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º

    .PARAMETER Activity
        –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

    .PARAMETER PercentComplete
        –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)

    .PARAMETER Status
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

    .PARAMETER Width
        –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

    .PARAMETER ShowPercentage
        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç

    .PARAMETER BarStyle
        –°—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    #>

    param(
        [string]$Activity = "Processing",

        [ValidateRange(0, 100)]
        [int]$PercentComplete = 0,

        [string]$Status = "",

        [int]$Width = 30,

        [switch]$ShowPercentage,

        [ValidateSet('Blocks', 'Gradient', 'Dots', 'Lines')]
        [string]$BarStyle = 'Gradient'
    )

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    $styles = @{
        'Blocks' = @{ Full = "‚ñà"; Empty = "‚ñë" }
        'Gradient' = @{ Full = "‚ñà"; Empty = "‚ñë" }
        'Dots' = @{ Full = "‚óè"; Empty = "‚óã" }
        'Lines' = @{ Full = "‚îÅ"; Empty = "‚ïå" }
    }

    $chars = $styles[$BarStyle]
    $filled = [Math]::Floor(($PercentComplete / 100) * $Width)
    $empty = $Width - $filled

    # –í—ã–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    Write-RGB -Text "$Activity " -FC "Lavender" -Style Bold -newline

    if ($Status)
    {
        Write-RGB -Text "($Status) " -FC "PastelYellow"
    }

    # –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    Write-RGB -Text "[" -FC "Silver"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if ($BarStyle -eq 'Gradient')
    {
        for ($i = 0; $i -lt $filled; $i++) {
            $position = $i / $Width
            $color = Get-GradientColor -StartColor "#FF0000" -EndColor "#00FF00" -Position $position
            Write-RGB -Text $chars.Full -FC $color
        }
    }
    else
    {
        $progressColor = if ($PercentComplete -lt 33)
        {
            "#FF6B6B"
        }
        elseif ($PercentComplete -lt 66)
        {
            "#FFD93D"
        }
        else
        {
            "#6BCF7F"
        }

        Write-RGB -Text ($chars.Full * $filled) -FC $progressColor
    }

    # –ü—É—Å—Ç–∞—è —á–∞—Å—Ç—å
    Write-RGB -Text ($chars.Empty * $empty) -FC "#333333" -newline

    # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    Write-RGB -Text "]" -FC "Silver" -newline

    # –ü—Ä–æ—Ü–µ–Ω—Ç
    if ($ShowPercentage)
    {
        Write-RGB -Text " $PercentComplete%" -FC "ElectricBlue" -Style Bold
    }
    else
    {
        Write-Host ""
    }

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if ($PercentComplete -eq 100)
    {
        Write-RGB "‚úÖ Complete!" -FC "LimeGreen" -Style Bold
    }
}

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
function Show-Progress
{
    param(
        [int]$Current,
        [int]$Total,
        [string]$Activity = "–û–±—Ä–∞–±–æ—Ç–∫–∞",
        [string]$ProgressColor = "#00FF7F",
        [string]$BC = "#333333"
    )

    $percent = if ($Total -gt 0)
    {
        [Math]::Round(($Current / $Total) * 100)
    }
    else
    {
        0
    }
    Show-RGBProgress -Activity $Activity -PercentComplete $percent -ShowPercentage
}

#endregion

#region –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å RGB –ø—Ä–∞–≤–∏–ª–∞–º–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
$script:RGBParsingRules = @(
    @{
        Name = "Errors"
        Pattern = '\b(ERROR|–û–®–ò–ë–ö–ê|FATAL|–ö–†–ò–¢–ò–ß–ù–û|EXCEPTION)\b'
        FC = "LaserRed"
        BC = "#2C0000"
        Style = @('Bold')
    },
    @{
        Name = "Success"
        Pattern = '\b(SUCCESS|–£–°–ü–ï–®–ù–û|OK|COMPLETE|–ì–û–¢–û–í–û)\b'
        FC = "LimeGreen"
        Style = @('Bold')
    },
    @{
        Name = "Warnings"
        Pattern = '\b(WARNING|–í–ù–ò–ú–ê–ù–ò–ï|WARN|–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï)\b'
        FC = "GoldYellow"
        Style = @('Bold')
    },
    @{
        Name = "Info"
        Pattern = '\b(INFO|–ò–ù–§–û–†–ú–ê–¶–ò–Ø|–°–í–ï–î–ï–ù–ò–Ø|NOTE)\b'
        FC = "ElectricBlue"
    },
    @{
        Name = "Timestamps"
        Pattern = '\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}'
        FC = "Silver"
    },
    @{
        Name = "IPAddresses"
        Pattern = '\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
        FC = "Turquoise"
    },
    @{
        Name = "URLs"
        Pattern = 'https?://[^\s]+'
        FC = "SkyBlue"
        Style = @('Underline')
    },
    @{
        Name = "Paths"
        Pattern = '(?:[A-Za-z]:)?[\\/](?:[^\\/\s]+[\\/])*[^\\/\s]+'
        FC = "PastelGreen"
    }
)

function Out-RGBParsed
{
    <#
    .SYNOPSIS
        –ü–∞—Ä—Å–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å RGB –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º

    .PARAMETER InputText
        –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

    .PARAMETER Rules
        –ú–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª –ø–∞—Ä—Å–∏–Ω–≥–∞

    .PARAMETER PassThru
        –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞
    #>

    param(
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [string[]]$InputText,

        [array]$Rules = $script:RGBParsingRules,

        [switch]$PassThru
    )

    process {
        foreach ($line in $InputText)
        {
            $segments = @()
            $lastIndex = 0

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            $matches = @()
            foreach ($rule in $Rules)
            {
                $regex = [regex]$rule.Pattern
                $regexMatches = $regex.Matches($line)

                foreach ($match in $regexMatches)
                {
                    $matches += @{
                        Index = $match.Index
                        Length = $match.Length
                        Value = $match.Value
                        Rule = $rule
                    }
                }
            }

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            $matches = $matches | Sort-Object Index

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            foreach ($match in $matches)
            {
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if ($match.Index -gt $lastIndex)
                {
                    $segments += @{
                        Text = $line.Substring($lastIndex, $match.Index - $lastIndex)
                        FC = "White"
                        Style = @('Normal')
                    }
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                $segments += @{
                    Text = $match.Value
                    FC = $match.Rule.FC
                    BC = $match.Rule.BC
                    Style = $match.Rule.Style
                }

                $lastIndex = $match.Index + $match.Length
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
            if ($lastIndex -lt $line.Length)
            {
                $segments += @{
                    Text = $line.Substring($lastIndex)
                    FC = "White"
                    Style = @('Normal')
                }
            }

            # –í—ã–≤–æ–¥–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã
            if ($PassThru)
            {
                return $segments
            }
            else
            {
                foreach ($segment in $segments)
                {
                    $params = @{
                        Text = $segment.Text
                        FC = $segment.FC
                        newline = $false
                    }

                    if ($segment.BC)
                    {
                        $params.BC = $segment.BC
                    }

                    if ($segment.Style)
                    {
                        $params.Style = $segment.Style
                    }

                    Write-RGB @params
                }
                Write-Host ""  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            }
        }
    }
}

#endregion

#region –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–¥—É–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-Rainbow
{
    param([string]$Text)

    $rainbowColors = @("#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF", "#4B0082", "#9400D3")
    $chars = $Text.ToCharArray()

    for ($i = 0; $i -lt $chars.Length; $i++) {
        $colorIndex = $i % $rainbowColors.Length
        Write-RGB $chars[$i] -FC $rainbowColors[$colorIndex] -Bold -NoNewLine
    }
    Write-Host ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥–∞—é—â–µ–≥–æ RGB —Ç–µ–∫—Å—Ç–∞
function Write-BlinkingRGB
{
    param(
        [string]$Text,
        [int]$Times = 5,
        [string]$Color1 = "#FF0080",
        [string]$Color2 = "#00FFFF"
    )

    for ($i = 0; $i -lt $Times; $i++) {
        $color = if ($i % 2 -eq 0)
        {
            $Color1
        }
        else
        {
            $Color2
        }
        Write-RGB $Text -FC $color -Bold
        Start-Sleep -Milliseconds 500
        Write-Host ("`r" + (" " * $Text.Length) + "`r") -NoNewline
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RGB —Ä–∞–º–∫–∏
function Write-RGBBox
{
    param(
        [string[]]$Content,
        [string]$BorderColor = "#00FFFF",
        [string]$TextColor = "#FFFFFF"
    )

    $maxLength = ($Content | Measure-Object -Property Length -Maximum).Maximum
    $boxWidth = $maxLength + 4

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB "‚ïî" -FC $BorderColor
    Write-RGB ("‚ïê" * ($boxWidth - 2)) -FC $BorderColor
    Write-RGB "‚ïó" -FC $BorderColor

    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    foreach ($line in $Content)
    {
        $padding = $boxWidth - $line.Length - 3
        Write-RGB "‚ïë " -FC $BorderColor
        Write-RGB $line -FC $TextColor
        Write-RGB (" " * $padding) -FC $TextColor
        Write-RGB "‚ïë" -FC $BorderColor -newline
    }

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-RGB "‚ïö" -FC $BorderColor
    Write-RGB ("‚ïê" * ($boxWidth - 2)) -FC $BorderColor
    Write-RGB "‚ïù" -FC $BorderColor -newline
}

#endregion

#region –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

function Show-NiceParserDemo
{
    <#
    .SYNOPSIS
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ NiceParser
    #>

    Clear-Host

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    Show-RGBHeader -Title "NICE PARSER RGB DEMO" -BorderStyle Double
    Write-Host ""

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    Write-RGB "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:" -FC "SeaGreen" -Style Bold -newline
    Write-GradientText -Text "PowerShell RGB Paradise!" -StartColor "#FF00FF" -EndColor "#00FFFF"
    Write-Host ""

    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    Write-RGB "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:" -FC "SeaGreen" -Style Bold -newline
    showColors

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    Write-RGB "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤:" -FC "Lavender" -Style Bold

    Show-RGBProgress -Activity "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö" -PercentComplete 25 -ShowPercentage
    Show-RGBProgress -Activity "–û–±—Ä–∞–±–æ—Ç–∫–∞" -PercentComplete 60 -BarStyle Dots -ShowPercentage
    Show-RGBProgress -Activity "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ" -PercentComplete 100 -BarStyle Lines -ShowPercentage
    Write-Host ""

    # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤
    Write-RGB "–ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤:" -FC "SeaGreen" -Style Bold

    $sampleLog = @"
2024-01-15 10:30:15 INFO: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
2024-01-15 10:30:16 SUCCESS: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 192.168.1.100
2024-01-15 10:30:17 INFO: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ C:\Config\app.json
2024-01-15 10:30:18 WARNING: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ (15%)
2024-01-15 10:30:19 ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ https://api.example.com
2024-01-15 10:30:20 INFO: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
2024-01-15 10:30:51 SUCCESS: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
"@

    $sampleLog -split "`n" | Out-RGBParsed

    Write-Host "`n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
}

#endregion

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å)
if ($MyInvocation.MyCommand.Path -match '\.psm1$')
{
    Export-ModuleMember -Function @(
        'Write-RGB',
        'Write-GradientText',
        'Get-GradientColor',
        'Show-RGBHeader',
        'Show-Header',
        'Show-RGBProgress',
        'Show-Progress',
        'Out-RGBParsed',
        'Write-Rainbow',
        'Write-BlinkingRGB',
        'Write-RGBBox',
        'Show-NiceParserDemo'
    )
}

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Set-Alias -Name wrgb -Value Write-RGB -Scope Global -Force
Set-Alias -Name wgrad -Value Write-GradientText -Scope Global -Force
Set-Alias -Name orgb -Value Out-RGBParsed -Scope Global -Force

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
#Write-RGB "`n‚ú® NiceParser v2.1 –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -FC "ElectricLime" -Style Bold
#Write-RGB "–í–≤–µ–¥–∏—Ç–µ " -FC "Silver" -NoNewLine
#Write-RGB "Show-NiceParserDemo" -FC "SkyBlue" -Style @('Bold', 'Underline') -NoNewLine
#Write-RGB " –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`n" -FC "Silver"