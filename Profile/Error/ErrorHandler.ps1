Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1") -start
# Advanced ErrorView Handler with Templates and Translation
# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º

#errorImports
. "${global:profilePath}/Error/ExtractErrorDetails.ps1"
. "${global:profilePath}/Error/SmartError.ps1"
. "${global:profilePath}/Error/ShowError.ps1"

#endregion
#region –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
$ErrorViewConfig = @{
    Language = "ru"  # ru, en
    AutoTranslate = $true
    ShowStackTrace = $false
    ShowInnerExceptions = $true
    UseColors = $true
    LogErrors = $true
    LogPath = "$env:TEMP\PowerShell_Errors.log"
    NotifyOnCritical = $true
}



function Show-RecentErrors
{
    param(
        [int]$Count = 5,
        [string]$View = "Colorful"
    )

    wrgb "–ü–æ—Å–ª–µ–¥–Ω–∏–µ $Count –æ—à–∏–±–æ–∫ (–≤–∏–¥: $View):" -FC Yellow -newline
    if ($Error.Count -gt 0)
    {
        $ErrorsToShow = if ($Error.Count -lt $Count)
        {
            $Error
        }
        else
        {
            $Error[0..($Count - 1)]
        }
        $ErrorsToShow | Format-Error $View
    }
    else
    {
        wrgb "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è" -FC Green
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
function Get-ErrorSummary
{
    if ($Error.Count -eq 0)
    {
        wrgb "–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏" -FC Green
        return
    }

    wrgb "`n--- –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º ---" -FC Yellow -newline

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    $ErrorsByType = $Error | Group-Object { $_.Exception.GetType().Name } | Sort-Object Count -Descending

    wrgb "–ü–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è:" -FC Material_Orange -newline
    $ErrorsByType | ForEach-Object {
        wrgb   $_.Name" : " -FC Material_Purple
        wrgb   $_.Count" " -FC White  -newline
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $ErrorsByCategory = $Error | Group-Object { $_.CategoryInfo.Category } | Sort-Object Count -Descending

    wrgb "`n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:" -FC Material_Orange -newline
    $ErrorsByCategory | ForEach-Object {
        wrgb   $_.Name" : " -FC Material_Purple
        wrgb   $_.Count" " -FC White -newline
    }

    wrgb "`n–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:  "  -FC "FF0000"
    wrgb $Error.Count -FC "FFFF00" -newline
}


Import-Module ErrorView -Force

$global:ErrorView = "Smart"

function Set-MyErrorView
{
    param(
        [ValidateSet("Simple", "Normal", "Category", "Full", "SingleLine", "Colorful")]
        [string]$View = "Simple"
    )

    $global:ErrorView = $View
    wrgb "ErrorView —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $View" -FC Green
}



function ConvertTo-SingleLineErrorView
{
    param([System.Management.Automation.ErrorRecord]$InputObject)
    -join @(
        $originInfo = &{ Set-StrictMode -Version 1; $InputObject.OriginInfo }
    if (($null -ne $originInfo) -and ($null -ne $originInfo.PSComputerName))
    {
        "[" + $originInfo.PSComputerName + "]: "
    }
        $errorDetails = &{ Set-StrictMode -Version 1; $InputObject.ErrorDetails }
    if (($null -ne $errorDetails) -and ($null -ne $errorDetails.Message) -and ($InputObject.FullyQualifiedErrorId -ne "NativeCommandErrorMessage"))
    {
        $errorDetails.Message
    }
    else
    {
        $InputObject.Exception.Message
    }
        wrgb "Type:  "  -FC "#ff99AA"
        wrgb $InputObject.Exception.GetType().Name -FC "#ff0000"
        wrgb "  |  "  -FC "#ffFFFF"
        wrgb "  ID:  " -FC "#ff99AA"
        wrgb  $InputObject.FullyQualifiedErrorId -FC "#ff0000"
        wrgb "  |  "  -FC "#ffFFFF"

    if ($ErrorViewRecurse)
    {
        $Prefix = " | Exception: "
        $Exception = &{ Set-StrictMode -Version 1; $InputObject.Exception }
        do
        {
            $Prefix + $Exception.GetType().FullName
            $Prefix = wrgb " | "  -FC "#ffFFFF"
            $Prefix = wrgb "InnerException:  "  -FC "#ff99AA"
        } while ($Exception = $Exception.InnerException)
    }
    )
}



#region –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —à–∞–±–ª–æ–Ω–∞–º–∏




function Log-Error
{
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord,
        [string]$FormattedMessage

    )

    if (-not $ErrorViewConfig.LogErrors)
    {
        return
    }

    $logEntry = @"
[$( Get-Date -Format 'yyyy-MM-dd HH:mm:ss' )] ERROR
Type: $( $ErrorRecord.Exception.GetType().Name )
Message: $( $ErrorRecord.Exception.Message )
Formatted: $FormattedMessage
Command: $( $ErrorRecord.InvocationInfo.MyCommand.Name )
Line: $( $ErrorRecord.InvocationInfo.ScriptLineNumber )
Script: $( $ErrorRecord.InvocationInfo.ScriptName )
---

"@

    Add-Content -Path $ErrorViewConfig.LogPath -Value $logEntry -Encoding UTF8
}
#endregion


function ConvertTo-CompactErrorView
{
    [CmdletBinding()]
    param(
        [System.Management.Automation.ErrorRecord]$InputObject
    )

    $template = Get-ErrorTemplate -ErrorRecord $InputObject
    $translatedMessage = Translate-ErrorMessage -Message $InputObject.Exception.Message -ExceptionType $InputObject.Exception.GetType().Name
    Test-GradientDemo


    return "$( $template.Icon ) $translatedMessage"
}
#endregion

#region –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
function Set-ErrorViewConfig
{
    param(
        [string]$Language,
        [bool]$AutoTranslate,
        [bool]$ShowStackTrace,
        [bool]$ShowInnerExceptions,
        [bool]$UseColors,
        [bool]$LogErrors,
        [string]$LogPath,
        [bool]$NotifyOnCritical
    )

    if ($Language)
    {
        $ErrorViewConfig.Language = $Language
    }
    if ( $PSBoundParameters.ContainsKey('AutoTranslate'))
    {
        $ErrorViewConfig.AutoTranslate = $AutoTranslate
    }
    if ( $PSBoundParameters.ContainsKey('ShowStackTrace'))
    {
        $ErrorViewConfig.ShowStackTrace = $ShowStackTrace
    }
    if ( $PSBoundParameters.ContainsKey('ShowInnerExceptions'))
    {
        $ErrorViewConfig.ShowInnerExceptions = $ShowInnerExceptions
    }
    if ( $PSBoundParameters.ContainsKey('UseColors'))
    {
        $ErrorViewConfig.UseColors = $UseColors
    }
    if ( $PSBoundParameters.ContainsKey('LogErrors'))
    {
        $ErrorViewConfig.LogErrors = $LogErrors
    }
    if ($LogPath)
    {
        $ErrorViewConfig.LogPath = $LogPath
    }
    if ( $PSBoundParameters.ContainsKey('NotifyOnCritical'))
    {
        $ErrorViewConfig.NotifyOnCritical = $NotifyOnCritical
    }

    wrgb "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" -FC Green
}

function Get-ErrorViewConfig
{
    return $ErrorViewConfig
}

function Add-ErrorTemplate
{
    param(
        [string]$ExceptionType,
        [string]$Icon,
        [string]$Pattern,
        [string]$Template,
        [string]$Suggestion,
        [string]$Color = "Red"
    )

    $ErrorTemplates[$ExceptionType] = @{
        Icon = $Icon
        Pattern = $Pattern
        Template = $Template
        Suggestion = $Suggestion
        Color = $Color
    }

    wrgb "–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è $ExceptionType" -FC Green
}

function Add-ErrorTranslation
{
    param(
        [string]$Pattern,
        [string]$Translation
    )

    $ErrorTranslations[$Pattern] = $Translation
    wrgb "–î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '$Pattern'" -FC Green
}
#endregion

#region –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
function Enable-GlobalErrorHandler
{
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    $global:ErrorView = "Smart"
    wrgb "‚úÖ  –í–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: " -FC TealRGB
    wrgb  $global:ErrorView -BC GoldRGB -FC BlackRGB -Style Bold -newline
}

function Disable-GlobalErrorHandler
{

    wrgb "‚ùå –û—Ç–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: " -FC Material_Yellow
    wrgb $global:ErrorView -FC WhiteRGB
    $global:ErrorView = "Simple"
}
#endregion


# –í–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
Enable-GlobalErrorHandler
#Clear-Host



function errorMethodsInfo
{
    wrgb "`n--- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã ---" -FC Yellow
    wrgb "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -FC Material_Pink -newline
    $config = Get-ErrorViewConfig
    $i = 0
    $config.GetEnumerator() | Sort-Object Key | ForEach-Object {
        wrgb   $_.Key" :  " -FC Gray
        $color = Get-GradientColor -Index (++$i) -TotalItems 4 -StartColor "#0057B7" -EndColor "#FFD700"
        wrgb   $_.Value -FC $color -newline
    }

    wrgb "`n--- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---" -FC Yellow
    @(
        "Enable-GlobalErrorHandler  - –≤–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫",
        "Disable-GlobalErrorHandler - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫",
        "Set-ErrorViewConfig        - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "Add-ErrorTemplate          - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—à–∏–±–∫–∏",
        "Add-ErrorTranslation       - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
        "Format-Error Smart         - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π",
        "Format-Error Compact       - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"
    ) | ForEach-Object {
        wrgb "  $_" -FC White -newline
    }

    #wrgb "`n--- –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ ---" -FC Yellow

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω
    Add-ErrorTemplate -ExceptionType "CustomException" -Icon "üéØ" -Pattern "custom.*error" -Template "{Icon} –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {Message}" -Suggestion "üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    Add-ErrorTranslation -Pattern "custom error occurred" -Translation "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞"
    #wrgb "`n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üöÄ" -FC Green
    #wrgb "–í—Å–µ –æ—à–∏–±–∫–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —É–º–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏." -FC White

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö
    if ($ErrorViewConfig.LogErrors)
    {
        wrgb "`nüìù –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤: " -FC "Material_Comment"
        wrgb  $ErrorViewConfig.LogPath  -BC "#162022" -FC "#000000"
    }
    else
    {
        Write-Host ""
    }
}


Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1")
