importProcess  $MyInvocation.MyCommand.Name.trim('.ps1') -start

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Oh My Posh –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏

function Show-OmpSegments {
    <#
    .SYNOPSIS
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    #>
    Write-Host "`nüé® Oh My Posh Custom Segments Status" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Cyan
    
    $segments = @{
        "Weather" = $env:OMP_WEATHER
        "Network" = $env:OMP_NETWORK  
        "System Health" = $env:OMP_SYSTEM_HEALTH
        "Disk Usage" = $env:OMP_DISK_USAGE
        "Process Info" = $env:OMP_PROCESS_INFO
        "Last Update" = $env:OMP_LAST_UPDATE
    }
    
    foreach ($segment in $segments.GetEnumerator()) {
        $value = if ($segment.Value) { $segment.Value } else { "Not set" }
        Write-Host "$($segment.Key): " -NoNewline -ForegroundColor Yellow
        Write-Host $value -ForegroundColor White
    }
    Write-Host ""
}

function Reset-OmpSegments {
    <#
    .SYNOPSIS
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç updater
    #>
    Write-Host "üîÑ Resetting OMP segments..." -ForegroundColor Yellow
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π updater
    Stop-OmpSegmentUpdater
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    $env:OMP_WEATHER = $null
    $env:OMP_NETWORK = $null
    $env:OMP_SYSTEM_HEALTH = $null
    $env:OMP_DISK_USAGE = $null
    $env:OMP_PROCESS_INFO = $null
    $env:OMP_LAST_UPDATE = $null
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    Start-OmpSegmentUpdater -IntervalSeconds 30
    
    Write-Host "‚úÖ OMP segments reset complete" -ForegroundColor Green
}

function Test-OmpSegments {
    <#
    .SYNOPSIS
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    #>
    Write-Host "`nüß™ Testing OMP Segments" -ForegroundColor Cyan
    Write-Host "=" * 30 -ForegroundColor Cyan
    
    Write-Host "Testing Weather segment..." -ForegroundColor Yellow
    try {
        $weather = Get-WeatherSegment
        Write-Host "‚úÖ Weather: $weather" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Weather failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "Testing Network segment..." -ForegroundColor Yellow
    try {
        $network = Get-NetworkSegment
        Write-Host "‚úÖ Network: $network" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Network failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "Testing System Health segment..." -ForegroundColor Yellow
    try {
        $health = Get-SystemHealthSegment
        Write-Host "‚úÖ System Health: $health" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå System Health failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "Testing Disk Usage segment..." -ForegroundColor Yellow
    try {
        $disk = Get-DiskUsageSegment
        Write-Host "‚úÖ Disk Usage: $disk" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Disk Usage failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "Testing Process Info segment..." -ForegroundColor Yellow
    try {
        $process = Get-ProcessInfoSegment
        Write-Host "‚úÖ Process Info: $process" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Process Info failed: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Set-WeatherApiKey {
    <#
    .SYNOPSIS
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –¥–ª—è Weather —Å–µ–≥–º–µ–Ω—Ç–∞
    .PARAMETER ApiKey
    API –∫–ª—é—á –æ—Ç OpenWeatherMap
    #>
    param(
        [Parameter(Mandatory=$true)]
        [string]$ApiKey
    )
    
    $env:WEATHER_API_KEY = $ApiKey
    Write-Host "‚úÖ Weather API key set. Updating weather segment..." -ForegroundColor Green
    Update-WeatherSegment
}

function Show-OmpHelp {
    <#
    .SYNOPSIS
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º OMP —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    #>
    Write-Host "`nüìö Oh My Posh Custom Segments Commands" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Cyan
    
    $commands = @(
        @{ Name = "Show-OmpSegments"; Description = "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤" }
        @{ Name = "Reset-OmpSegments"; Description = "–°–±—Ä–æ—Å–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã" }
        @{ Name = "Test-OmpSegments"; Description = "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç" }
        @{ Name = "Update-WeatherSegment"; Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ–≥–æ–¥—ã" }
        @{ Name = "Update-NetworkSegment"; Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç —Å–µ—Ç–∏" }
        @{ Name = "Update-SystemHealthSegment"; Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã" }
        @{ Name = "Update-DiskUsageSegment"; Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç –¥–∏—Å–∫–∞" }
        @{ Name = "Update-ProcessInfoSegment"; Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤" }
        @{ Name = "Set-WeatherApiKey"; Description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã" }
        @{ Name = "Start-OmpSegmentUpdater"; Description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" }
        @{ Name = "Stop-OmpSegmentUpdater"; Description = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" }
    )
    
    foreach ($cmd in $commands) {
        Write-Host "$($cmd.Name)" -ForegroundColor Yellow -NoNewline
        Write-Host " - $($cmd.Description)" -ForegroundColor White
    }
    
    Write-Host "`nüí° Tip: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEATHER_API_KEY –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã:" -ForegroundColor Magenta
    Write-Host "Set-WeatherApiKey 'your_api_key_here'" -ForegroundColor Gray
    Write-Host "API –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ openweathermap.org" -ForegroundColor Gray
}

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Set-Alias -Name omps -Value Show-OmpSegments
Set-Alias -Name ompr -Value Reset-OmpSegments
Set-Alias -Name ompt -Value Test-OmpSegments
Set-Alias -Name omph -Value Show-OmpHelp

Export-ModuleMember -Function Show-OmpSegments, Reset-OmpSegments, Test-OmpSegments, Set-WeatherApiKey, Show-OmpHelp -Alias omps, ompr, ompt, omph

importProcess  $MyInvocation.MyCommand.Name.trim('.ps1')