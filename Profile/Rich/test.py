from rich import print

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Å—Ç–∏–ª–µ BBCode
print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:")

# –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä–µ–π –∏ —Å–ø–∏—Å–∫–æ–≤
my_dict = {"name": "John Doe", "age": 30, "is_active": True}
my_list = [1, 2, "a", "b"]
print(my_dict)
print(my_list)

# –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –æ–±—ä–µ–∫—Ç Console –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
from rich.console import Console
from rich.text import Text

console = Console()
text: Text = Text("Hello, [bold red]world![/bold red]")
console.print(text)
console.print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [bold magenta]Rich[/bold magenta]! üåüüá∫üá¶'")
console.print("–≠—Ç–æ [underline green]PowerShell 7.6[/underline green]!", style="blink yellow on blue")


from rich.table import Table

table = Table(title="–°–ø–∏—Å–æ–∫ –¥–µ–ª")
table.add_column("‚Ññ", style="#1177DD")
table.add_column("–ó–∞–¥–∞—á–∞", style="#2299FF")
table.add_column("–°—Ç–∞—Ç—É—Å", style="#55aacc")

table.add_row("1", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Rich", "[‚úì] –ì–æ—Ç–æ–≤–æ ")
table.add_row("2", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", "[‚åõ] –í –ø—Ä–æ—Ü–µ—Å—Å–µ ")
table.add_row("3", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ PowerShell", "[üêë ] –û–∂–∏–¥–∞–µ—Ç ")

console.print(table)

from rich.progress import track
import time

for step in track(range(10), description="–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
    time.sleep(0.2)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
console.print("[bold green]–ì–æ—Ç–æ–≤–æ![/bold green]")

from rich.markdown import Markdown
md_text = "# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n- –°–ø–∏—Å–æ–∫\n- –≠–ª–µ–º–µ–Ω—Ç—ã"
console.print(Markdown(md_text))

# –ß–∞—Å—Ç—å 1: –¢–µ–∫—Å—Ç
console.print("[bold]–ü—Ä–∏–≤–µ—Ç, PowerShell![/bold]", style="on white")
console.print("–≠—Ç–æ [italic yellow]–ø—Ä–∏–º–µ—Ä Rich[/italic yellow] :snake:", emoji=True)

# –ß–∞—Å—Ç—å 2: –¢–∞–±–ª–∏—Ü–∞
table = Table(title="–î–µ–º–æ-—Ç–∞–±–ª–∏—Ü–∞")
table.add_column("ID", justify="right")
table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ")
table.add_row("1", "[blink]–ê–Ω–∏–º–∞—Ü–∏—è[/blink] :rocket:", style="bold red")
table.add_row("2", "[underline]–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ[/underline] :sparkles:")
console.print(table)

# –ß–∞—Å—Ç—å 3: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
with console.status("[magenta]–†–∞–±–æ—Ç–∞—é...") as status:
    for _ in track(range(5)):
        time.sleep(0.5)
console.print("[green]–ì–æ—Ç–æ–≤–æ![/green]")


from rich.layout import Layout
from rich.panel import Panel
from rich.live import Live
from rich.table import Table
import time

console = Console()
layout = Layout()

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
layout.split(
    Layout(name="header", size=3),
    Layout(name="main", ratio=1),
    Layout(name="footer", size=3)
)
layout["main"].split_row(
    Layout(name="side", size=20),
    Layout(name="body", ratio=2)
)


def generate_dashboard() -> Layout:
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    layout["header"].update(
        Panel(f"[bold]Dashboard[/] | [green]System Online[/] | {time.strftime('%X')}",
              style="white on blue")
    )

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    metrics = Table.grid(padding=1)
    metrics.add_column(style="cyan")
    metrics.add_row("[bold]CPU:[/] 42%")
    metrics.add_row("[bold]MEM:[/] 78%")
    metrics.add_row("[bold]NET:[/] 1.2Gbps")
    layout["side"].update(Panel(metrics, title="Metrics"))

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Å —Ç–∞–±–ª–∏—Ü–µ–π
    main_table = Table(title="Active Processes")
    main_table.add_column("PID", justify="right")
    main_table.add_column("Name")
    main_table.add_column("Status")
    main_table.add_row("1289", "python.exe", "[green]Running")
    main_table.add_row("4521", "powershell.exe", "[yellow]Waiting")
    layout["body"].update(Panel(main_table))

    # –§—É—Ç–µ—Ä
    layout["footer"].update(
        Panel("[bold]F1[/]: Help | [bold]F2[/]: Refresh | [bold]ESC[/]: Exit",
              style="black on yellow")
    )
    return layout


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫
with Live(generate_dashboard(), refresh_per_second=4, screen=True) as live:
    while True:
        time.sleep(0.5)
        live.update(generate_dashboard())

from rich.console import Console
from rich.plot import Plot
from rich import box
import numpy as np

console = Console()


# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
def create_plot():
    plot = Plot(title="3D Surface", width=60, height=20)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3D –¥–∞–Ω–Ω—ã–µ
    x = np.linspace(-5, 5, 50)
    y = np.linspace(-5, 5, 50)
    X, Y = np.meshgrid(x, y)
    Z = np.sin(np.sqrt(X ** 2 + Y ** 2))

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Rich
    for i in range(len(Z)):
        line = []
        for j in range(len(Z[i])):
            height = int((Z[i][j] + 1) * 5)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã—Å–æ—Ç—É
            line.append((height, f"{height:02d}"))  # (–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        plot.add_line(line, style="gradient(200, 40)")

    return plot


# –ü–∞–Ω–µ–ª—å —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
with console.screen(style="white on black") as screen:
    frames = 30
    for frame in range(frames):
        angle = 2 * np.pi * frame / frames
        rotated_plot = create_plot()
        rotated_plot.title = f"3D Surface Rotation | Angle: {angle:.2f} rad"

        screen.update(
            Panel(
                rotated_plot,
                title="[bold]Scientific Visualization[/]",
                subtitle=f"Frame {frame + 1}/{frames}",
                box=box.DOUBLE,
                padding=1,
                style="bright_yellow"
            )
        )
        time.sleep(0.1)