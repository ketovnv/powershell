from rich.console import Console
from rich.theme import Theme
from rich.syntax import Syntax
from rich.text import Text
from rich.panel import Panel
from rich.color import Color
from pygments.lexer import RegexLexer
from pygments.token import Generic, Name, Comment, String, Number, Keyword, Text as PygmentsText
import re
import logging
from pythonjsonlogger.json import JsonFormatter

logger = logging.getLogger()
logger.setLevel(logging.INFO)

handler = logging.StreamHandler()
handler.setFormatter(JsonFormatter())

logger.addHandler(handler)

logger.info("Logging using pythonjsonlogger!", extra={"more_data": True})

# {"message": "Logging using pythonjsonlogger!", "more_data": true}
# ==================== –ï–î–ò–ù–ê–Ø –ì–†–ê–î–ò–ï–ù–¢–ù–ê–Ø –¢–ï–ú–ê ====================

GRADIENT_THEME = Theme({
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏
    'primary': 'bold #3498db',
    'primary.light': '#5dade2',
    'primary.dark': '#2980b9',
    
    'success': 'bold #2ecc71', 
    'success.light': '#58d68d',
    'success.dark': '#27ae60',
    
    'error': 'bold #e74c3c',
    'error.light': '#ec7063', 
    'error.dark': '#c0392b',
    
    'warning': 'bold #f39c12',
    'warning.light': '#f7dc6f',
    'warning.dark': '#e67e22',
    
    'accent': 'bold #9b59b6',
    'accent.light': '#bb8fce',
    'accent.dark': '#8e44ad',
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏
    'gradient.fire': '#ff4444',
    'gradient.ocean': '#44aaff', 
    'gradient.forest': '#44ff44',
    'gradient.sunset': '#ff8844',
    'gradient.aurora': '#aa44ff',
    
    # –õ–æ–≥–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
    'log.critical': 'bold #ff0000 on #330000',
    'log.error': 'bold #ff4444',
    'log.warn': 'bold #ffaa44', 
    'log.info': 'bold #44aaff',
    'log.debug': 'dim #888888',
    'log.trace': 'dim #444444',
    
    # JSON —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    'json.key': 'bold #3498db',
    'json.string': '#2ecc71',
    'json.number': '#f39c12',
    'json.bool': 'bold #9b59b6',
    'json.null': 'italic #95a5a6',
})

# ==================== –ö–ê–°–¢–û–ú–ù–´–ô –õ–ï–ö–°–ï–† –° –ì–†–ê–î–ò–ï–ù–¢–ê–ú–ò ====================
class GradientLogLexer(RegexLexer):
    """–õ–µ–∫—Å–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
    name = 'GradientLog'
    aliases = ['gradlog', 'glog']
    
    tokens = {
        'root': [
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –∫—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b(CRITICAL|FATAL|PANIC)\b', Generic.Error),
            # –û—à–∏–±–∫–∏ - –∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç  
            (r'\b(ERROR|FAIL|FAILED)\b', Name.Exception),
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –∂–µ–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b(WARN|WARNING|CAUTION)\b', Generic.Subheading),
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–∏–Ω–µ-–≥–æ–ª—É–±–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b(INFO|NOTICE)\b', Generic.Inserted),
            # –û—Ç–ª–∞–¥–∫–∞ - —Å–µ—Ä—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b(DEBUG|TRACE|VERBOSE)\b', Comment.Single),
            # –£—Å–ø–µ—Ö - –∑–µ–ª—ë–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b(SUCCESS|OK|PASS|PASSED|COMPLETE)\b', String.Symbol),
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\d{4}-\d{2}-\d{2}[\sT]\d{2}:\d{2}:\d{2}(?:\.\d{3})?(?:Z|[+-]\d{2}:\d{2})?', Comment.Preproc),
            
            # JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - cyan –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\{[^}]*\}', String.Doc),
            (r'\[[^\]]*\]', String.Doc),
            
            # –°—Ç—Ä–æ–∫–∏ - –∑–µ–ª—ë–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'"[^"]*"|\'[^\']*\'', String.Double),
            
            # –ß–∏—Å–ª–∞ - –º–∞–≥–µ–Ω—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b\d+\.\d+\b', Number.Float),
            (r'\b\d+\b', Number.Integer),
            
            # IP –∞–¥—Ä–µ—Å–∞ - –≥–æ–ª—É–±–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', Number.Hex),
            
            # URLs - —Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            (r'https?://[^\s]+', String.Other),
            
            # HTTP —Å—Ç–∞—Ç—É—Å—ã
            (r'\b[1-5]\d{2}\b', Keyword.Type),  # 200, 404, etc.
            
            # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            (r'\b\d+\.?\d*\s*(KB|MB|GB|TB|B)\b', Number.Oct),
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            (r'\b\d+\.?\d*%\b', Number.Bin),
            
            # –û—Å—Ç–∞–ª—å–Ω–æ–µ
            (r'\s+', Text),
            (r'.', Text),
        ]
    }

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–°–û–õ–¨ ====================
console = Console(theme=GRADIENT_THEME, force_terminal=True, width=120)

# ==================== –§–£–ù–ö–¶–ò–ò –° –ì–†–ê–î–ò–ï–ù–¢–ê–ú–ò ====================
def create_rainbow_text(text, colors=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–¥—É–∂–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
    if colors is None:
        colors = ["#ff0000", "#ff8800", "#ffff00", "#88ff00", "#00ff00", 
                 "#00ff88", "#00ffff", "#0088ff", "#0000ff", "#8800ff"]
    
    result = Text()
    color_count = len(colors)
    
    for i, char in enumerate(text):
        color_index = (i * color_count) // len(text)
        color_index = min(color_index, color_count - 1)
        result.append(char, style=colors[color_index])
    
    return result

def print_gradient_log(text):
    """–ü–µ—á–∞—Ç—å –ª–æ–≥–æ–≤ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–µ–∫—Å–µ—Ä"""
    syntax = Syntax(
        text,
        lexer=GradientLogLexer(),
        theme="material",
        background_color="#1a1a1a",
        line_numbers=True
    )
    console.print(syntax)

def print_rainbow_title(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ä–∞–¥—É–∂–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
    rainbow_title = create_rainbow_text(title)
    console.print(Panel(rainbow_title, style="bold"))

def print_fire_gradient(text):
    """–û–≥–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç: –∫—Ä–∞—Å–Ω—ã–π -> –æ—Ä–∞–Ω–∂–µ–≤—ã–π -> –∂–µ–ª—Ç—ã–π"""
    fire_colors = ["#ff0000", "#ff3300", "#ff6600", "#ff9900", "#ffcc00", "#ffff00"]
    fire_text = create_rainbow_text(text, fire_colors)
    console.print(fire_text)

def print_ocean_gradient(text):
    """–û–∫–µ–∞–Ω—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç: —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π -> –≥–æ–ª—É–±–æ–π -> –±–µ–ª—ã–π"""
    ocean_colors = ["#000080", "#0033cc", "#0066ff", "#3399ff", "#66ccff", "#99ffff"]
    ocean_text = create_rainbow_text(text, ocean_colors)
    console.print(ocean_text)

def print_code_with_gradient_borders(code, language="python", line_numbers=True):
    """–ö–æ–¥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    syntax = Syntax(code, language, theme="material", line_numbers=True)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = create_rainbow_text(f"‚ú® {language.upper()} CODE ‚ú®")
    
    console.print(Panel(
        syntax, 
        title=title,
        border_style="bold magenta",
        padding=(1, 2)
    ))

# ==================== –ü–†–û–î–í–ò–ù–£–¢–´–ô –ì–†–ê–î–ò–ï–ù–¢–ù–´–ô –õ–ï–ö–°–ï–† ====================
def highlight_with_custom_gradients(text):
    """–°–ª–æ–∂–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏"""
    result = Text()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    patterns = [
        (r'\b(CRITICAL|FATAL)\b', lambda m: create_rainbow_text(m.group(), ["#ff0000", "#cc0000"])),
        (r'\b(ERROR|FAIL)\b', lambda m: create_rainbow_text(m.group(), ["#ff4444", "#ff0000"])),
        (r'\b(WARN|WARNING)\b', lambda m: create_rainbow_text(m.group(), ["#ffff00", "#ff8800"])),
        (r'\b(INFO|NOTICE)\b', lambda m: create_rainbow_text(m.group(), ["#00aaff", "#cc001f"])),
        (r'\b(DEBUG|TRACE)\b', lambda m: create_rainbow_text(m.group(), ["#888888", "#444444"])),
        (r'\b(SUCCESS|OK|PASS)\b', lambda m: create_rainbow_text(m.group(), ["#00ff00", "#00cc00"])),
        (r'"[^"]*"', lambda m: create_rainbow_text(m.group(), ["#00ff88", "#00ccaa"])),
        (r'\b\d+\.?\d*\b', lambda m: create_rainbow_text(m.group(), ["#ff00ff", "#cc00cc"])),
    ]
    
    last_end = 0
    
    for pattern, gradient_func in patterns:
        for match in re.finditer(pattern, text):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if match.start() > last_end:
                result.append(text[last_end:match.start()])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
            gradient_text = gradient_func(match)
            result.append_text(gradient_text)
            last_end = match.end()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if last_end < len(text):
        result.append(text[last_end:])
    
    return result

# ==================== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ====================
def setup_gradient_console():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ - –≤—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑"""
    global console
    console = Console(theme=GRADIENT_THEME, force_terminal=True)
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    title = create_rainbow_text("üåà GRADIENT CONSOLE INITIALIZED üåà")
    console.print(Panel(title, style="bold"))

def log(message, level="INFO", use_gradients=True):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏"""
    timestamp = "2024-01-15 10:30:45"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ datetime.now()
    log_line = f"{timestamp} {level}: {message}"
    
    if use_gradients:
        highlighted = highlight_with_custom_gradients(log_line)
        console.print(highlighted)
    else:
        console.print(log_line)

# ==================== –≠–ö–°–ü–û–†–¢ ====================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
setup_gradient_console()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'console', 'setup_gradient_console', 'log', 'print_gradient_log', 'print_rainbow_title',
    'print_fire_gradient', 'print_ocean_gradient', 'print_code_with_gradient_borders',
    'create_rainbow_text', 'highlight_with_custom_gradients'
]

# ==================== –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ====================
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    
    print_rainbow_title("GRADIENT LOGGING SYSTEM")
    
    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    log("Application started successfully", "SUCCESS")
    log("Loading configuration from config.json", "INFO") 
    log("Memory usage is getting high: 89.5%", "WARN")
    log("Database connection failed after 30.2 seconds", "ERROR")
    log("Trace: function_call() -> return_value", "DEBUG")
    
    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    print_fire_gradient("üî• FIRE GRADIENT TEXT üî•")
    print_ocean_gradient("üåä OCEAN GRADIENT TEXT üåä")
    
    # –ö–æ–¥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    sample_code = '''
def process_data(items):
    results = []
    for item in items:
        if item.is_valid():
            results.append(item.process())
    return results
'''
    
    print_code_with_gradient_borders(sample_code, "python")
    
    # –°–ª–æ–∂–Ω—ã–π –ª–æ–≥ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
    complex_log = '''
2024-01-15 10:30:45 INFO: Processing "user_data.json" with 1250 records
2024-01-15 10:30:46 DEBUG: Memory usage: 85.7 MB, CPU: 45%
2024-01-15 10:30:47 ERROR: Connection to 192.168.1.100 failed
2024-01-15 10:30:48 SUCCESS: Backup completed in 12.5 seconds
2024-01-15 10:30:49 WARN: Cache hit ratio dropped to 67%
'''
    
    console.print("\n" + "="*60)
    console.print("Complex log with multiple gradients:", style="bold")
    console.print("="*60)
    
    highlighted_complex = highlight_with_custom_gradients(complex_log)
    console.print(highlighted_complex)