#!/usr/bin/env python3
"""
examples.py - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è EmojiSystem
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç–º–æ–¥–∑–∏
"""

from EmojiSystem.py import (get_emoji, get_file_icon, emoji_system)
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.live import Live
from rich.layout import Layout
from rich.text import Text
import time
import random

console = Console()


def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    console.print(Panel.fit(
        "[bold cyan]üöÄ –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EmojiSystem[/bold cyan]",
        border_style="cyan"
    ))

    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    examples = [
        ("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", get_emoji("docker", "devops")),
        ("Python —Ñ–∞–π–ª", get_file_icon("script.py")),
        ("–£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å", get_emoji("success", "status")),
        ("Git –∫–æ–º–º–∏—Ç", get_emoji("commit", "git")),
        ("–°–µ—Ä–≤–µ—Ä", get_emoji("server", "network")),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", get_emoji("database", "database")),
        ("–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–ª–∞–≥", get_emoji("ukraine", "ukraine")),
    ]

    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", width=20)
    table.add_column("–ö–æ–¥", width=40)
    table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", width=10)

    for desc, emoji in examples:
        if "—Ñ–∞–π–ª" in desc:
            code = f'get_file_icon("script.py")'
        elif "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" in desc:
            code = f'get_emoji("docker", "devops")'
        elif "—Å—Ç–∞—Ç—É—Å" in desc:
            code = f'get_emoji("success", "status")'
        elif "–∫–æ–º–º–∏—Ç" in desc:
            code = f'get_emoji("commit", "git")'
        elif "–°–µ—Ä–≤–µ—Ä" in desc:
            code = f'get_emoji("server", "network")'
        elif "–ë–∞–∑–∞" in desc:
            code = f'get_emoji("database", "database")'
        else:
            code = f'get_emoji("ukraine", "ukraine")'

        table.add_row(desc, f"[green]{code}[/green]", emoji)

    console.print(table)


def demo_file_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
    console.print(Panel.fit(
        "[bold yellow]üìÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤[/bold yellow]",
        border_style="yellow"
    ))

    files = [
        "app.py", "requirements.txt", "docker-compose.yml", "README.md",
        "config.json", "styles.css", "main.js", "database.sql",
        "backup.tar.gz", "script.sh", "Dockerfile", "package.json"
    ]

    table = Table(show_header=True, header_style="bold blue")
    table.add_column("–§–∞–π–ª", width=20)
    table.add_column("–¢–∏–ø", width=15)
    table.add_column("–ò–∫–æ–Ω–∫–∞", width=8)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=12)

    statuses = ["running", "success", "warning", "error"]

    for file in files:
        ext = file.split('.')[-1] if '.' in file else file
        file_icon = get_file_icon(file)
        status = random.choice(statuses)
        status_icon = get_emoji(status, "status")

        table.add_row(
            file,
            ext.upper(),
            file_icon,
            f"{status_icon} {status}"
        )

    console.print(table)


def demo_devops_dashboard():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DevOps –¥–∞—à–±–æ—Ä–¥–∞"""
    console.print(Panel.fit(
        "[bold green]üîß DevOps Dashboard[/bold green]",
        border_style="green"
    ))

    services = [
        ("Frontend", "react", "running", "devops"),
        ("Backend API", "node", "running", "devops"),
        ("Database", "postgres", "healthy", "status"),
        ("Redis Cache", "redis", "running", "database"),
        ("Docker", "docker", "running", "devops"),
        ("Kubernetes", "k8s", "running", "devops"),
        ("Monitoring", "monitor", "warning", "devops"),
        ("CI/CD Pipeline", "pipeline", "success", "devops"),
    ]

    table = Table(show_header=True, header_style="bold green")
    table.add_column("–°–µ—Ä–≤–∏—Å", width=20)
    table.add_column("–¢–∏–ø", width=15)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=15)
    table.add_column("–î–µ–π—Å—Ç–≤–∏—è", width=20)

    for service, tech, status, category in services:
        tech_icon = get_emoji(tech, category if tech != "react" and tech != "node" else "development")
        if tech == "react":
            tech_icon = "‚öõÔ∏è"
        elif tech == "node":
            tech_icon = "üü¢"

        status_icon = get_emoji(status, "status")

        # –î–µ–π—Å—Ç–≤–∏—è
        actions = []
        if status == "running":
            actions.append(f"{get_emoji('stop', 'status')} Stop")
        if status == "warning":
            actions.append(f"{get_emoji('fix', 'development')} Fix")
        if "pipeline" in service.lower():
            actions.append(f"{get_emoji('deploy', 'devops')} Deploy")

        table.add_row(
            f"{tech_icon} {service}",
            tech.upper(),
            f"{status_icon} {status.title()}",
            " | ".join(actions[:2])
        )

    console.print(table)


def demo_git_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Git workflow"""
    console.print(Panel.fit(
        "[bold magenta]üåø Git Workflow[/bold magenta]",
        border_style="magenta"
    ))

    git_actions = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏", "branch", "feature/user-auth"),
        ("–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π", "commit", "Add user authentication"),
        ("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "push", "origin feature/user-auth"),
        ("–°–æ–∑–¥–∞–Ω–∏–µ PR", "pr", "User authentication feature"),
        ("–ö–æ–¥ —Ä–µ–≤—å—é", "review", "2 approvals required"),
        ("–°–ª–∏—è–Ω–∏–µ", "merge", "Merge to main branch"),
        ("–†–µ–ª–∏–∑", "release", "v1.2.0"),
        ("–¢–µ–≥", "tag", "v1.2.0"),
    ]

    for i, (action, git_type, details) in enumerate(git_actions, 1):
        icon = get_emoji(git_type, "git")
        status_icon = get_emoji("success", "status") if i <= 6 else get_emoji("pending", "status")

        console.print(f"{i}. {icon} [bold]{action}[/bold]: {details} {status_icon}")


def demo_system_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    console.print(Panel.fit(
        "[bold red]üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥[/bold red]",
        border_style="red"
    ))

    # –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    metrics = [
        ("CPU", "cpu", random.randint(10, 90), "%"),
        ("RAM", "memory", random.randint(30, 85), "%"),
        ("–î–∏—Å–∫", "disk", random.randint(40, 75), "%"),
        ("–°–µ—Ç—å", "network", random.randint(5, 50), "Mbps"),
        ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "temperature", random.randint(35, 80), "¬∞C"),
        ("–ë–∞—Ç–∞—Ä–µ—è", "battery", random.randint(20, 100), "%"),
    ]

    table = Table(show_header=True, header_style="bold red")
    table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", width=15)
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", width=12)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=12)
    table.add_column("–ì—Ä–∞—Ñ–∏–∫", width=30)

    for name, metric_type, value, unit in metrics:
        icon = get_emoji(metric_type, "performance")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        if metric_type == "temperature":
            status = "hot" if value > 70 else "good"
        elif metric_type == "battery":
            status = "warning" if value < 30 else "good"
        else:
            status = "warning" if value > 80 else "good"

        status_icon = get_emoji(status, "status")

        # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
        bar_length = min(20, int(value / 5))
        bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)

        table.add_row(
            f"{icon} {name}",
            f"{value}{unit}",
            f"{status_icon} {status}",
            f"[green]{bar}[/green]"
        )

    console.print(table)


def demo_progress_with_emojis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —ç–º–æ–¥–∑–∏"""
    console.print(Panel.fit(
        "[bold blue]‚è≥ –ü—Ä–æ—Ü–µ—Å—Å—ã —Å —ç–º–æ–¥–∑–∏[/bold blue]",
        border_style="blue"
    ))

    tasks = [
        ("–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞", "docker", 100),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", "package", 85),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "test", 60),
        ("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", "deploy", 30),
    ]

    with Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]{task.description}"),
            *Progress.get_default_columns(),
            console=console
    ) as progress:

        task_ids = []
        for desc, emoji_type, total in tasks:
            icon = get_emoji(emoji_type, "devops")
            task_id = progress.add_task(f"{icon} {desc}", total=total)
            task_ids.append((task_id, total))

        # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for _ in range(100):
            for task_id, total in task_ids:
                progress.advance(task_id, random.uniform(0.1, 1.0))
            time.sleep(0.05)


def demo_ukraine_support():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –£–∫—Ä–∞–∏–Ω—ã"""
    console.print(Panel.fit(
        "[bold yellow]üá∫üá¶ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –£–∫—Ä–∞—ó–Ω–∏[/bold yellow]",
        border_style="yellow"
    ))

    ukraine_messages = [
        ("ukraine", "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!"),
        ("heart", "–õ—é–±–æ–≤ —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"),
        ("sunflower", "–°–∏–º–≤–æ–ª –Ω–∞–¥—ñ—ó"),
        ("peace", "–ú–∏—Ä –≤ –£–∫—Ä–∞—ó–Ω—ñ"),
        ("victory", "–ü–µ—Ä–µ–º–æ–≥–∞ –±—É–¥–µ –∑–∞ –Ω–∞–º–∏"),
        ("strong", "–£–∫—Ä–∞—ó–Ω–∞ —Å–∏–ª—å–Ω–∞"),
        ("freedom", "–°–≤–æ–±–æ–¥–∞ —ñ –Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å"),
        ("unity", "–Ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞—Ä–æ–¥—É"),
    ]

    for emoji_name, message in ukraine_messages:
        icon = get_emoji(emoji_name, "ukraine")
        console.print(f"{icon} [bold blue]{message}[/bold blue]", justify="center")

    # –§–ª–∞–≥ –£–∫—Ä–∞–∏–Ω—ã
    flag_text = Text()
    flag_text.append("üá∫üá¶ " * 10, style="bold")
    console.print(Panel(flag_text, border_style="blue"))


def demo_interactive_search():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞"""
    console.print(Panel.fit(
        "[bold cyan]üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫[/bold cyan]",
        border_style="cyan"
    ))

    search_queries = ["docker", "git", "status", "ukraine", "network"]

    for query in search_queries:
        console.print(f"\n[bold]–ü–æ–∏—Å–∫: '{query}'[/bold]")
        results = emoji_system.find_emoji(query)

        if results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for result in results[:5]:
                console.print(f"  {result['emoji']} {result['name']} [{result['category']}]")

            if len(results) > 5:
                console.print(f"  [dim]... –∏ –µ—â–µ {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/dim]")
        else:
            console.print("  [red]–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/red]")


if __name__ == "__main__":
    console.print(Panel.fit(
        "[bold magenta]üé® EmojiSystem Examples[/bold magenta]\n"
        "[cyan]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã —ç–º–æ–¥–∑–∏[/cyan]",
        border_style="magenta"
    ))

    demos = [
        ("–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", demo_basic_usage),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤", demo_file_monitoring),
        ("DevOps Dashboard", demo_devops_dashboard),
        ("Git Workflow", demo_git_workflow),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", demo_system_monitoring),
        ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –£–∫—Ä–∞–∏–Ω—ã", demo_ukraine_support),
        ("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫", demo_interactive_search),
        ("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å —ç–º–æ–¥–∑–∏", demo_progress_with_emojis),
    ]

    for i, (name, func) in enumerate(demos, 1):
        console.print(f"\n[bold green]–î–µ–º–æ {i}: {name}[/bold green]")
        console.print("‚îÄ" * 50)
        func()

        if i < len(demos):
            console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/dim]")
            input()

    console.print(Panel.fit(
        "[bold green]‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã![/bold green]\n"
        "[yellow]–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ![/yellow]",
        border_style="green"
    ))