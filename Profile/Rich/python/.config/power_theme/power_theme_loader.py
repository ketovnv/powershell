
from pathlib import Path
import site
import os
import sys

# Принудительно устанавливаем UTF-8 для Windows
if sys.platform == 'win32':
    import subprocess
    subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['PYTHONUTF8'] = '1'

# Определяем путь к теме
THEME_PATH = Path(__file__).parent

def emergency_cleanup():
    """Удаляет поврежденный sitecustomize.py"""
    try:
        site_packages_list = site.getsitepackages()
        if not site_packages_list:
            import sysconfig
            site_packages = sysconfig.get_path("purelib")
        else:
            site_packages = site_packages_list[0]

        sitecustomize_path = Path(site_packages) / 'sitecustomize.py'

        if sitecustomize_path.exists():
            content = sitecustomize_path.read_text(encoding='utf-8')
            if 'Power Theme installer' in content:
                sitecustomize_path.unlink()
                print(f"[Cleanup] Removed broken sitecustomize.py from {sitecustomize_path}")
                return True

        print("[Cleanup] No broken sitecustomize.py found")
        return False

    except Exception as e:
        print(f"[Cleanup] Failed: {e}")
        return False

def install_theme():
    """Установить тему глобально для всех Python скриптов"""
    print("[Install] Power Theme installing...")
    print(f"[Install] Theme path: {THEME_PATH}")

    # Проверяем импорт
    try:
        current_dir = str(THEME_PATH.parent)
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)

        import power_theme
        console = power_theme.get_console()
        print("[Install] Power theme module loads successfully")

    except Exception as e:
        print(f"[Install] Power theme module test failed: {e}")
        return False

    # Содержимое для sitecustomize.py БЕЗ проблемных символов
    sitecustomize_content = f"""
# Auto-generated by Power Theme installer
import sys
import os

# Принудительно устанавливаем UTF-8 для Windows
if sys.platform == 'win32':
    import subprocess
    try:
        subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
    except:
        pass
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['PYTHONUTF8'] = '1'

# Добавляем путь к теме
theme_path = r'{THEME_PATH.parent}'
if theme_path not in sys.path:
    sys.path.insert(0, theme_path)

# Безопасная инициализация
try:
    import power_theme
    
    console = power_theme.get_console()
    
    if hasattr(power_theme, 'register_power_style'):
        power_theme.register_power_style()
    
    # Глобальный доступ только в интерактивном режиме
    if hasattr(sys, 'ps1'):
        import builtins
        builtins.console = console
        builtins.rprint = console.print
    
    os.environ['PYGMENTS_STYLE'] = 'power'
    
except ImportError:
    pass
except Exception:
    pass
"""

    try:
        site_packages_list = site.getsitepackages()
        if not site_packages_list:
            import sysconfig
            site_packages = sysconfig.get_path("purelib")
        else:
            site_packages = site_packages_list[0]

        sitecustomize_path = Path(site_packages) / 'sitecustomize.py'

        print(f"[Install] Installing to: {sitecustomize_path}")

        sitecustomize_path.write_text(sitecustomize_content, encoding='utf-8')
        print(f"[Install] Power Theme installed to {sitecustomize_path}")

        test_theme_installation()

    except Exception as e:
        print(f"[Install] Installation failed: {e}")

def test_theme_installation():
    """Тестирует установленную тему"""
    try:
        import subprocess

        test_code = f"""
import sys
import os

if sys.platform == 'win32':
    import subprocess
    subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['PYTHONUTF8'] = '1'

sys.path.insert(0, r'{THEME_PATH.parent}')

try:
    import power_theme
    console = power_theme.get_console()
    print("[Test] Power Theme test successful!")
    
    from pygments.styles import get_style_by_name
    style = get_style_by_name('power')
    print(f"[Test] Pygments style loaded: {{style}}")
    
except Exception as e:
    print(f"[Test] Failed: {{e}}")
"""

        result = subprocess.run([sys.executable, "-c", test_code],
                                capture_output=True, text=True, timeout=10,
                                encoding='utf-8', errors='replace')

        if result.returncode == 0:
            print("[Test] Theme installation test passed")
            if result.stdout:
                print(result.stdout)
        else:
            print("[Test] Theme installation test failed")
            if result.stderr:
                print(result.stderr)

    except Exception as e:
        print(f"[Test] Execution failed: {e}")

def uninstall_theme():
    """Удаляет установленную тему"""
    emergency_cleanup()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        if command == 'cleanup':
            emergency_cleanup()
        elif command == 'install':
            install_theme()
        elif command == 'uninstall':
            uninstall_theme()
        elif command == 'test':
            test_theme_installation()
        else:
            print("Usage: python power_theme_loader.py [cleanup|install|uninstall|test]")
    else:
        print("[Emergency] Cleanup mode")
        emergency_cleanup()
        print("Use 'python power_theme_loader.py install' to reinstall properly")