# === Power Theme –¥–ª—è Python ===
$global:RichPath = "${global:profilePath}Rich"
$global:PowerThemePath = "${global:profilePath}Rich"

# –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
if (-not (Test-Path $global:PowerThemePath))
{
    New-Item -ItemType Directory -Path $global:PowerThemePath -Force
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã
function Install-PowerTheme
{
    $themeFile = Join-Path $global:PowerThemePath "\power_theme.py"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–µ–º—ã (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ power_theme.py –≤—ã—à–µ)
    # ... –∫–æ–¥ —Ç–µ–º—ã ...

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    python -c @"
import sys
sys.path.insert(0, r"${$global:RichPath}")
from power_theme_loader import install_theme
install_theme()
"@
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Å —Ç–µ–º–æ–π
function Invoke-ThemedPython
{
    param(
        [Parameter(ValueFromRemainingArguments)]
        [string[]]$Arguments
    )

    $env:PYTHONPATH = "$global:RichPath;$env:PYTHONPATH"
    $env:FORCE_COLOR = "1"

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç —Ç–µ–º—ã
    $initCode = @"
import sys
sys.path.insert(0, f"${global:Rich}")
from power_theme import console, print as rprint
"@

    if ($Arguments[0] -eq "-c")
    {
        # –ï—Å–ª–∏ —ç—Ç–æ inline –∫–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        $code = $initCode + "`n" + $Arguments[1]
        python -c $code
    }
    else
    {
        python @Arguments
    }
}

Install-PowerTheme

function Import-PythonModule
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$Path,

        [string[]]$Functions = @(),

        [switch]$AsGlobal,

        [string]$Prefix = ""
    )

    # Resolve full path
    if (-not [System.IO.Path]::IsPathRooted($Path))
    {
        $Path = Join-Path $global:RichPath $Path
    }

    if (-not $Path.EndsWith('.py'))
    {
        $Path = "$Path.py"
    }

    if (-not (Test-Path $Path))
    {
        Write-Error "Python module not found: $Path"
        return
    }

    # Get available functions
    $availableFuncs = python $global:PythonBridgePath list $Path |
            Where-Object { $_ -like "function:*" } |
            ForEach-Object { ($_ -split ':')[1].Split('(')[0].Trim() }

    # Import specific or all functions
    $targetFuncs = if ($Functions.Count -gt 0)
    { $Functions }
    else
    { $availableFuncs }

    foreach ($funcName in $targetFuncs)
    {
        $psName = if ($Prefix)
        { "$Prefix$funcName" }
        else
        { $funcName }

        # Create PowerShell function wrapper
        $functionDef = @"
function ${psName} {
    param(
        [Parameter(ValueFromRemainingArguments)]
        `$Arguments
    )

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    `$pyArgs = @()
    `$pyKwargs = @{}

    foreach (`$arg in `$Arguments) {
        if (`$arg -match '^--(\w+)=(.*)$') {
            `$pyKwargs[`$matches[1]] = `$matches[2]
        } else {
            `$pyArgs += `$arg
        }
    }

    # –í—ã–∑–æ–≤ Python —Ñ—É–Ω–∫—Ü–∏–∏
    `$argString = (`$pyArgs | ForEach-Object { `"'`$_'`" }) -join ' '
    `$kwargString = if (`$pyKwargs.Count -gt 0) {
        '--kwargs "' + (`$pyKwargs | ConvertTo-Json -Compress).Replace('"', '\"') + '"'
    } else { '' }

    `$cmd = "python `"$global:PythonBridgePath`" execute `"$Path`" --function $funcName"
    if (`$argString) { `$cmd += " --args `$argString" }
    if (`$kwargString) { `$cmd += " `$kwargString" }

    `$result = Invoke-Expression `$cmd

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
        `$result | ConvertFrom-Json
    } catch {
        `$result
    }
}
"@

        if ($AsGlobal)
        {
            Invoke-Expression $functionDef
            Write-Host "‚úÖ Imported: $psName" -ForegroundColor Green
        }
        else
        {
            # Return function definition for local scope
            $functionDef
        }
    }
}

# –ê–ª–∏–∞—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
Set-Alias pyimport Import-PythonModule



function Test-Theme
{

    $themeScript = @"
#from rich.console import Console
#from rich.theme import Theme
#from rich.syntax import Syntax
from rich.table import Table
from rich.json import JSON
from rich.panel import Panel
#from rich.progress import Progress, TextColumn, BarColumn, TaskProgressColumn
#from rich.tree import Tree
#import json
#import time

try:

    # === –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===

    console.print(Panel(f"[bold]üé® –¢–µ–º–∞: ${Theme}.upper() üé®[/bold]", style="panel.style"))

    # 1. –ö–æ–¥
    console.print(Panel("[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞[/bold]", style="panel.border"))
    code = '''
    def analyze_data(dataset):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(dataset)
        average = sum(dataset) / total
        return {"total": total, "average": average}
    '''
    syntax = Syntax(code, 'python', theme=material.MaterialStyle, line_numbers=True)
    console.print(syntax)

    # 2. JSON
    console.print(Panel("[panel.style]JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞[/]", style="panel.border"))
    data = {"server": "production","active": True,"connections": 1250,"load": 0.85,"errors": None,"services": ["api", "web", "db"]}
    json_obj = JSON.from_data(data)
    console.print(json_obj)

    api_data = {
            "status": "success",
            "data": {
                "users": [
                    {"id": 1, "name": "John Doe", "email": "john@example.com", "active": True},
                    {"id": 2, "name": "Jane Smith", "email": "jane@example.com", "active": False}
                ],
                "pagination": {
                    "page": 1,
                    "per_page": 10,
                    "total": 25,
                    "total_pages": 3
                }
            },
            "timestamp": "2024-01-15T14:30:00Z"
        }

        # –ö—Ä–∞—Å–∏–≤—ã–π JSON
    json_obj = JSON.from_data(api_data)
    console.print(Panel(json_obj, title="üì° API Response", style="panel.border"))

    # 3. –¢–∞–±–ª–∏—Ü–∞
    console.print(Panel("[bold]–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫[/bold]"))
    table = Table(title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    table.add_column("–°–µ—Ä–≤–∏—Å", style="primary")
    table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")
    table.add_column("CPU", justify="right", style="accent")
    table.add_column("RAM", justify="right", style="accent")

    table.add_row("API", "[success]–†–∞–±–æ—Ç–∞–µ—Ç[/success]", "[info]23%[/]", "[info]45%[/]")
    table.add_row("Database", "[warning]–ó–∞–≥—Ä—É–∂–µ–Ω–∞[/warning]", "[warning]78%[/]", "[warning]89%[/]")
    table.add_row("Cache", "[error]–û—à–∏–±–∫–∞[/error]", "[info]5%[/]", "[info]12%[/]")
    console.print(table)

    # 4. –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
    console.print(Panel("[bold]–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞[/]", style="panel.border"))
    tree = Tree("[bold]project[/bold]")
    tree.add("src").add("[info]main.py[/]")
    tree.add("tests").add("[info]test_main.py[/]")
    tree.add("[secondary]README.md[/secondary]")
    console.print(tree)

    # 5. –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.print(Panel("[bold]–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏[/bold]", style="panel.border"))
    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(style="success", complete_style="primary"),
        TaskProgressColumn(style="info"),
        console=console
    ) as progress:
        task = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", total=100)
        for i in range(100):
            progress.update(task, advance=1)
            time.sleep(0.005)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    with open('current_theme.json', 'w') as f:
       json.dump('$colors', f)

    console.print(f"[primary] –¢–µ–º–∞ '${Theme}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞![/primary]")
except ZeroDivisionError:
    # Handle the specific exception
    print("Error: Cannot divide by zero!")
except Exception as e:
    # Handle any other exceptions
    rprint("[gradient]An unexpected error occurred: [/]")
    rprint(f"[red]{e}[/]")
"@

    python -c $themeScript
    Write-Host "" -ForegroundColor Green
    ggrad " üéØ –¢–µ–º–∞ $Theme —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! ‚ú®" -color1 $colors.primary  -color2 $colors.gradient  -justify start
    spt $colors
}

Set-Alias tt Test-Theme



Set-Alias py Invoke-ThemedPython -Force