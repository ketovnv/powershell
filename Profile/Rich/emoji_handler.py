# !/usr/bin/env python3
"""
Python Rich Emoji Handler - –∞–Ω–∞–ª–æ–≥ PowerShell —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∂–∏
–¢—Ä–µ–±—É–µ—Ç: pip install rich
"""

import sys
from typing import List, Dict, Tuple, Union, Optional, Any
from dataclasses import dataclass
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.columns import Columns
from rich.text import Text
from rich.progress import track
import unicodedata

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich console
console = Console()


@dataclass
class EmojiResult:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∂–∏"""
    unicode: str
    code_point: Optional[int]
    emoji: str
    status: str
    type: str
    is_supported: bool
    category: str


class EmojiHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∂–∏ –≤ Python Rich"""

    def __init__(self):
        self.emoji_ranges = {
            (0x1F600, 0x1F64F): "Emoticons (–ª–∏—Ü–∞)",
            (0x1F300, 0x1F5FF): "Misc Symbols (—Ä–∞–∑–Ω–æ–µ)",
            (0x1F680, 0x1F6FF): "Transport (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)",
            (0x1F700, 0x1F77F): "Alchemical Symbols",
            (0x1F780, 0x1F7FF): "Geometric Shapes Extended",
            (0x1F800, 0x1F8FF): "Supplemental Arrows-C",
            (0x1F900, 0x1F9FF): "Supplemental Symbols (–¥–æ–ø.—Å–∏–º–≤–æ–ª—ã)",
            (0x1FA00, 0x1FA6F): "Chess Symbols",
            (0x1FA70, 0x1FAFF): "Symbols and Pictographs Extended-A",
            (0x2600, 0x26FF): "Miscellaneous Symbols",
            (0x2700, 0x27BF): "Dingbats",
            (0x1F1E6, 0x1F1FF): "Regional Indicators (—Ñ–ª–∞–≥–∏)"
        }

    def get_emoji_category(self, code_point: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–º–æ–¥–∂–∏ –ø–æ code point"""
        for (start, end), category in self.emoji_ranges.items():
            if start <= code_point <= end:
                return category
        return "Unknown"

    def test_emoji_support(self, emoji: str, code_point: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–º–æ–¥–∂–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not emoji or emoji in ["ÔøΩ", "?", ""]:
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8
            byte_length = len(emoji.encode('utf-8'))

            # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –æ–¥–Ω–∏–º –±–∞–π—Ç–æ–º, –Ω–æ code point –±–æ–ª—å—à–µ ASCII
            if byte_length == 1 and code_point > 0x7F:
                return False

            # –î–ª—è —ç–º–æ–¥–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - –±–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if code_point >= 0x1F000:
                return emoji not in ["ÔøΩ", "?","üõõ"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ unicodedata
            try:
                name = unicodedata.name(emoji, None)
                return name is not None
            except (ValueError, TypeError):
                return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º

        except Exception:
            return False

        return True

    def convert_single_emoji(self, code_point: int, unicode_str: str = None) -> EmojiResult:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω code point –≤ —ç–º–æ–¥–∂–∏"""
        if unicode_str is None:
            unicode_str = f"0x{code_point:X}"

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ code point
            if code_point < 0 or code_point > 0x10FFFF:
                raise ValueError("Code point –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Unicode")

            if 0xD800 <= code_point <= 0xDFFF:
                raise ValueError("Code point –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã—Ö –ø–∞—Ä")

            emoji = chr(code_point)
            category = self.get_emoji_category(code_point)
            is_supported = self.test_emoji_support(emoji, code_point)

            return EmojiResult(
                unicode=unicode_str,
                code_point=code_point,
                emoji=emoji,
                status="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if is_supported else "–ú–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è",
                type="Emoji",
                is_supported=is_supported,
                category=category
            )

        except Exception as e:
            return EmojiResult(
                unicode=unicode_str,
                code_point=code_point,
                emoji="‚ùå",
                status=f"–û—à–∏–±–∫–∞: {str(e)}",
                type="Error",
                is_supported=False,
                category="Error"
            )

    def convert_emoji_range(self, start_code: int, end_code: int,
                            max_samples: int = 1000, show_all: bool = True) -> List[EmojiResult]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —ç–º–æ–¥–∂–∏"""
        results = []
        total_in_range = end_code - start_code + 1

        console.print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω: {total_in_range} —Å–∏–º–≤–æ–ª–æ–≤", style="dim")

        if show_all or total_in_range <= max_samples:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
            for code in track(range(start_code, end_code + 1),
                              description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞..."):
                results.append(self.convert_single_emoji(code))
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü—ã
            step = max(1, total_in_range // max_samples)

            for i in range(max_samples):
                code = start_code + (i * step)
                if code <= end_code:
                    results.append(self.convert_single_emoji(code))

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            results.append(EmojiResult(
                unicode="Range Info",
                code_point=None,
                emoji="...",
                status=f"–ü–æ–∫–∞–∑–∞–Ω–æ {len([r for r in results if r.type == 'Emoji'])} –∏–∑ {total_in_range} —Å–∏–º–≤–æ–ª–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                type="RangeInfo",
                is_supported=None,
                category="Info"
            ))

        return results

    def convert_emoji_array(self, items: List[Union[str, int, Tuple[int, int]]]) -> List[EmojiResult]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        results = []

        for item in items:
            if isinstance(item, tuple) and len(item) == 2:
                # –î–∏–∞–ø–∞–∑–æ–Ω
                start, end = item
                console.print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: 0x{start:X} - 0x{end:X}", style="yellow")
                range_results = self.convert_emoji_range(start, end)
                results.extend(range_results)

            elif isinstance(item, str):
                # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Unicode
                try:
                    if item.startswith("U+"):
                        code_point = int(item[2:], 16)
                    elif item.startswith("0x"):
                        code_point = int(item[2:], 16)
                    else:
                        code_point = int(item, 16)

                    results.append(self.convert_single_emoji(code_point, item))
                except ValueError as e:
                    results.append(EmojiResult(
                        unicode=item,
                        code_point=None,
                        emoji="‚ùå",
                        status=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}",
                        type="String",
                        is_supported=False,
                        category="Error"
                    ))

            elif isinstance(item, int):
                # –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ code point
                results.append(self.convert_single_emoji(item))

            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
                results.append(EmojiResult(
                    unicode=str(item),
                    code_point=None,
                    emoji="‚ùå",
                    status=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(item).__name__}",
                    type=type(item).__name__,
                    is_supported=False,
                    category="Error"
                ))

        return results

    def display_emoji_table(self, results: List[EmojiResult], title: str = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∂–∏"):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        table = Table(title=title, show_header=True, header_style="bold magenta")

        table.add_column("Unicode", style="cyan", no_wrap=True)
        table.add_column("Emoji", justify="center", style="bold", no_wrap=True)
        table.add_column("Status", style="green")
        table.add_column("Category", style="blue")

        for result in results:
            # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if result.is_supported:
                status_style = "green"
            elif result.is_supported is False:
                status_style = "red"
            else:
                status_style = "yellow"

            table.add_row(
                result.unicode,
                result.emoji,
                Text(result.status, style=status_style),
                result.category
            )

        console.print(table)

    def display_emoji_grid(self, results: List[EmojiResult], title: str = "–≠–º–æ–¥–∂–∏ Grid"):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–º–æ–¥–∂–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏"""
        emoji_panels = []
        r=0
        g=150
        b=255
        for result in results:
            if result.type == "Emoji":
                style = "green" if result.is_supported else "red"
                # panel = Panel(
                #     f"[bold]{result.emoji}[/bold]\n{result.unicode.strip("0x")}",
                #     style=style,
                #     width=10,
                #     height=4
                # )
                panel = Panel(result.emoji,
                    style=f"#{r:02x}{g:02x}{b:02x}",
                    width=6,
                    height=3
                )
                r = 0 if r >= 215 else r + 2
                g = 255 if g <= 3 else g-2
                b = 255 if b <= 3 else b-2
                emoji_panels.append(panel)

        if emoji_panels:
            console.print(Panel(Columns(emoji_panels, equal=True), title=title))

    def get_emojis_from_range(self, start_hex: int, end_hex: int,
                              only_supported: bool = False, sample_size: int = 0) -> List[EmojiResult]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∂–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∞–Ω–∞–ª–æ–≥ PowerShell —Ñ—É–Ω–∫—Ü–∏–∏)"""
        console.print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0x{start_hex:X} - 0x{end_hex:X}", style="yellow")

        results = self.convert_emoji_array([(start_hex, end_hex)])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∂–∏
        emoji_results = [r for r in results if r.type == "Emoji"]

        if only_supported:
            valid_emojis = [r for r in emoji_results if r.is_supported]
            console.print(f"–ù–∞–π–¥–µ–Ω–æ —ç–º–æ–¥–∂–∏: {len(emoji_results)}, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö: {len(valid_emojis)}",
                          style="green")
            return valid_emojis
        else:
            console.print(f"–ù–∞–π–¥–µ–Ω–æ —ç–º–æ–¥–∂–∏: {len(emoji_results)}", style="green")
            return emoji_results


def demo_emoji_handler():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    handler = EmojiHandler()

    console.print(Panel.fit("üêç Python Rich Emoji Handler Demo üêç", style="bold magenta"))

    # 1. –°–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.print("\n[bold cyan]1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:[/bold cyan]")
    mixed_data = [
        "U+1F600",  # –°—Ç—Ä–æ–∫–∞
        0x1F601,  # –ß–∏—Å–ª–æ
        (0x1F602, 0x1F605),  # –î–∏–∞–ø–∞–∑–æ–Ω (–º–∞–ª–µ–Ω—å–∫–∏–π)
        "0x2764",  # –°—Ç—Ä–æ–∫–∞ —Å 0x
        (0x1F680, 0x1F685)  # –î–∏–∞–ø–∞–∑–æ–Ω
    ]

    results = handler.convert_emoji_array(mixed_data)
    handler.display_emoji_table(results, "–°–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # 2. –î–∏–∞–ø–∞–∑–æ–Ω—ã —ç–º–æ–¥–∂–∏
    console.print("\n[bold cyan]2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —ç–º–æ–¥–∂–∏:[/bold cyan]")
    emoji_ranges = [
        (0x1F600, 0x1F64F),  # Emoticons - –ë–û–õ–¨–®–û–ô –¥–∏–∞–ø–∞–∑–æ–Ω
        (0x1F680, 0x1F6FF),  # Transport
        (0x2764, 0x2764)  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
    ]

    range_results = handler.convert_emoji_array(emoji_ranges)
    console.print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {len(emoji_ranges)}")
    console.print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(range_results)}")

    # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    console.print("\n[bold cyan]3. –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Emoticons:[/bold cyan]")
    detailed_results = handler.convert_emoji_range(0x1F600, 0x1F610, show_all=True)
    emoji_only = [r for r in detailed_results if r.type == "Emoji"]
    handler.display_emoji_table(emoji_only, "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–µ—Ä–≤—ã–µ 10)")

    # 4. Grid –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.print("\n[bold cyan]4. Grid –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏:[/bold cyan]")
    handler.display_emoji_grid(emoji_only, "Emoticons Grid")

    # 5. –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    console.print("\n[bold cyan]5. –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:[/bold cyan]")

    predefined_ranges = [
        {"name": "Emoticons", "range": (0x1F600, 0x1F64F), "description": "–°–º–∞–π–ª–∏–∫–∏ –∏ –ª–∏—Ü–∞"},
        {"name": "Transport", "range": (0x1F680, 0x1F6FF), "description": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –º–µ—Å—Ç–∞"},
        {"name": "Symbols", "range": (0x2600, 0x26FF), "description": "–†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"}
    ]

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    ranges_table = Table(title="–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã", show_header=True)
    ranges_table.add_column("Name", style="cyan")
    ranges_table.add_column("Count", justify="right", style="magenta")
    ranges_table.add_column("Description", style="green")

    for range_info in predefined_ranges:
        start, end = range_info["range"]
        count = end - start + 1
        ranges_table.add_row(range_info["name"], str(count), range_info["description"])

    console.print(ranges_table)

    # 6. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    console.print("\n[bold cyan]6. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏:[/bold cyan]")

    # –í—Å–µ —ç–º–æ–¥–∂–∏
    all_emojis = handler.get_emojis_from_range(0x1F600, 0x1F610)
    handler.display_emoji_table(all_emojis, "–í—Å–µ —ç–º–æ–¥–∂–∏ (–ø–µ—Ä–≤—ã–µ 10)")

    # –¢–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ
    supported_only = handler.get_emojis_from_range(0x1F600, 0x1F610, only_supported=True)
    if supported_only:
        handler.display_emoji_table(supported_only, "–¢–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ")

    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    console.print("\n[bold cyan]7. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–∏–º–≤–æ–ª–æ–≤:[/bold cyan]")

    test_sets = {
        "Basic Emoji": ["üòÄ", "‚ù§Ô∏è", "üöÄ", "üìÅ", "‚≠ê", "üî•"],
        "Flags": ["üá∫üá∏", "üá∫üá¶", "üá∑üá∫", "üá©üá™", "üáØüáµ", "üá®üá≥"],
        "Complex Emoji": ["üë®‚Äçüíª", "üë©‚ÄçüöÄ"],
        "Symbols": ["‚Üê", "‚Üí", "‚Üë", "‚Üì", "‚åò"]
    }

    for category, symbols in test_sets.items():
        console.print(f"\n[yellow]{category}:[/yellow]")
        symbol_results = []

        for symbol in symbols:
            # –ü–æ–ª—É—á–∞–µ–º code point –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            code_point = ord(symbol[0]) if symbol else 0
            result = handler.convert_single_emoji(code_point, symbol)
            result.emoji = symbol  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            symbol_results.append(result)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        display_line = " ".join([f"{r.emoji} ({'‚úÖ' if r.is_supported else '‚ùå'})" for r in symbol_results])
        console.print(f"  {display_line}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def quick_emoji_range(start: int, end: int, show_table: bool = True) -> List[EmojiResult]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    handler = EmojiHandler()
    results = handler.get_emojis_from_range(start, end)

    if show_table:
        handler.display_emoji_table(results, f"–î–∏–∞–ø–∞–∑–æ–Ω 0x{start:X} - 0x{end:X}")

    return results


def quick_emoji_grid(start: int, end: int):
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –≤ grid"""
    handler = EmojiHandler()
    results = handler.get_emojis_from_range(start, end)
    handler.display_emoji_grid(results, f"Grid 0x{start:X} - 0x{end:X}")


def quick_emoji(code: int):
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –≤ grid"""
    handler = EmojiHandler()
    result = handler.convert_single_emoji(code)
    if result.type == "Emoji":
        style = "green" if result.is_supported else "red"
        panel = Panel(
            f"[bold]{result.emoji}[/bold]\n{result.unicode}",
            style=style,
            width=10,
            height=4
        )
        console.print(panel)


if __name__ == "__main__":
    import argparse

parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ —ç–º–æ–¥–∑–∏ —Å Rich –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
parser.add_argument("--qe", "-e", help="–ü–æ–∏—Å–∫ —ç–º–æ–¥–∑–∏")
parser.add_argument("--qs", "-s", help="–ü–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç–º–æ–¥–∑–∏ (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤ hex)")
parser.add_argument("--qg", "-g", help="–ü–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç–º–æ–¥–∑–∏ (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤ hex) grid")
args = parser.parse_args()

if args.qe:
    quick_emoji(int(args.qe,16))
if args.qs:
    start, end = args.qs.split('-')
    quick_emoji_range(int(start, 16), int(end, 16))
if args.qg:
    start, end = args.qg.split('-')
    quick_emoji_grid(int(start, 16), int(end, 16))


    # demo_emoji_handler()
    #
    # # –ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # console.print("\n" + "=" * 50)
    # console.print("[bold green]–ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:[/bold green]")
    #
    # console.print("\n[cyan]# –ë—ã—Å—Ç—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —ç–º–æ–¥–∂–∏:[/cyan]")
    # console.print("quick_emoji_range(0x1F600, 0x1F610)")
    #
    # console.print("\n[cyan]# –ë—ã—Å—Ç—Ä–∞—è grid —ç–º–æ–¥–∂–∏:[/cyan]")
    # console.print("quick_emoji_grid(0x1F680, 0x1F690)")
    #
    # # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    # try:
    #     console.print("\n[yellow]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...[/yellow]")
    #     input()
    #
    #     console.print("\n[bold]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:[/bold]")
    #     quick_emoji_range(0x1F600, 0x1F610)
    #     quick_emoji_grid(0x1F680, 0x1F690)
    #
    # except KeyboardInterrupt:
    #     console.print("\n[red]–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/red]")
    #     sys.exit(0)
    #
    # quick_emoji_range(0x260e, 0x26e9)
    # quick_emoji_grid(0x260e, 0x26e9)
    #
# quick_emoji(int('0x1F680',16))
