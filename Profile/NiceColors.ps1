# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –≤ PowerShell
# –í–µ—Ä—Å–∏—è: 2.0
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è

#region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
$global:RGB = @{}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI/PSStyle —Å—Ä–∞–∑—É
$global:ColorSupport = $null -ne $PSStyle

if (-not $global:ColorSupport) {
    Write-Warning "–í–∞—à–∞ –≤–µ—Ä—Å–∏—è PowerShell –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PSStyle. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
}
#endregion

#region –¶–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
# –ü–∞–ª–∏—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω—ã)
$newHexColors = @{
# –ü–∞–ª–∏—Ç—Ä–∞ Nord (—Å–ø–æ–∫–æ–π–Ω—ã–µ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ç–æ–Ω–∞)
    "Nord_PolarNight"   = "#2E3440" # –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π —Å–∏–Ω–µ-—Å–µ—Ä—ã–π
    "Nord_DarkBlue"     = "#3B4252" # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
    "Nord_SteelBlue"    = "#4C566A" # –°—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
    "Nord_LightGray"    = "#D8DEE9" # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    "Nord_Snow"         = "#D8DEE9" # –°–Ω–µ–∂–Ω—ã–π (–¥—É–±–ª–∏–∫–∞—Ç —É–±—Ä–∞–Ω)
    "Nord_White"        = "#ECEFF4" # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
    "Nord_FrostBlue"    = "#88C0D0" # –ú–æ—Ä–æ–∑–Ω—ã–π –≥–æ–ª—É–±–æ–π
    "Nord_FrostGreen"   = "#8FBCBB" # –ú–æ—Ä–æ–∑–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
    "Nord_AuroraRed"    = "#BF616A" # –ê–≤—Ä–æ—Ä–∞ (–∫—Ä–∞—Å–Ω—ã–π)
    "Nord_AuroraOrange" = "#D08770" # –ê–≤—Ä–æ—Ä–∞ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
    "Nord_AuroraYellow" = "#EBCB8B" # –ê–≤—Ä–æ—Ä–∞ (–∂–µ–ª—Ç—ã–π)
    "Nord_AuroraGreen"  = "#A3BE8C" # –ê–≤—Ä–æ—Ä–∞ (–∑–µ–ª–µ–Ω—ã–π)
    "Nord_AuroraPurple" = "#B48EAD" # –ê–≤—Ä–æ—Ä–∞ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)

    # –ü–∞–ª–∏—Ç—Ä–∞ Dracula (—è—Ä–∫–∞—è –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è)
    "Dracula_Background"  = "#282A36" # –§–æ–Ω
    "Dracula_CurrentLine" = "#44475A" # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    "Dracula_Foreground"  = "#F8F8F2" # –¢–µ–∫—Å—Ç
    "Dracula_Comment"     = "#6272A4" # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    "Dracula_Cyan"        = "#8BE9FD" # –¶–∏–∞–Ω
    "Dracula_Green"       = "#50FA7B" # –ó–µ–ª–µ–Ω—ã–π
    "Dracula_Orange"      = "#FFB86C" # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    "Dracula_Pink"        = "#FF79C6" # –†–æ–∑–æ–≤—ã–π
    "Dracula_Purple"      = "#BD93F9" # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "Dracula_Red"         = "#FF5555" # –ö—Ä–∞—Å–Ω—ã–π
    "Dracula_Yellow"      = "#F1FA8C" # –ñ–µ–ª—Ç—ã–π

    # –ü–∞–ª–∏—Ç—Ä–∞ Material Design
    "Material_Red"        = "#F44336"
    "Material_Pink"       = "#E91E63"
    "Material_Purple"     = "#9C27B0"
    "Material_DeepPurple" = "#673AB7"
    "Material_Indigo"     = "#3F51B5"
    "Material_Blue"       = "#2196F3"
    "Material_LightBlue"  = "#03A9F4"
    "Material_Cyan"       = "#00BCD4"
    "Material_Teal"       = "#009688"
    "Material_Green"      = "#4CAF50"
    "Material_LightGreen" = "#8BC34A"
    "Material_Lime"       = "#CDDC39"
    "Material_Yellow"     = "#FFEB3B"
    "Material_Amber"      = "#FFC107"
    "Material_Orange"     = "#FF9800"
    "Material_DeepOrange" = "#FF5722"
    "Material_Brown"      = "#795548"
    "Material_Grey"       = "#9E9E9E"
    "Material_BlueGrey"   = "#607D8B"

    # –ù–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ - Cyber/Synthwave
    "Cyber_Neon"          = "#00FFFF"
    "Cyber_Pink"          = "#FF006E"
    "Cyber_Purple"        = "#8338EC"
    "Cyber_Blue"          = "#006FFF"
    "Cyber_Green"         = "#00F5FF"
    "Cyber_Orange"        = "#FF9500"
    "Cyber_Background"    = "#0D1117"
    "Cyber_Dark"          = "#161B22"

    # –ü–∞–ª–∏—Ç—Ä–∞ One Dark (–ø–æ–ø—É–ª—è—Ä–Ω–∞ –≤ VS Code)
    "OneDark_Background"  = "#282C34"
    "OneDark_Red"         = "#E06C75"
    "OneDark_Green"       = "#98C379"
    "OneDark_Yellow"      = "#E5C07B"
    "OneDark_Blue"        = "#61AFEF"
    "OneDark_Purple"      = "#C678DD"
    "OneDark_Cyan"        = "#56B6C2"
    "OneDark_White"       = "#ABB2BF"
}

$additionalColors = @{
# –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞
    "PastelPink"     = "#FFD1DC"
    "PastelBlue"     = "#AEC6CF"
    "PastelGreen"    = "#77DD77"
    "PastelYellow"   = "#FDFD96"
    "PastelPurple"   = "#B19CD9"
    "PastelLavender" = "#E6E6FA"
    "PastelMint"     = "#F5FFFA"
    "PastelPeach"    = "#FFCBA4"

    # –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏
    "Silver"         = "#C0C0C0"
    "Bronze"         = "#CD7F32"
    "Copper"         = "#B87333"
    "Platinum"       = "#E5E4E2"
    "Rose Gold"      = "#E8B4B8"
    "Champagne"      = "#F7E7CE"

    # –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞
    "SkyBlue"        = "#87CEEB"
    "SeaGreen"       = "#2E8B57"
    "SandyBrown"     = "#F4A460"
    "Turquoise"      = "#40E0D0"
    "Olive"          = "#808000"
    "Maroon"         = "#800000"
    "Navy"           = "#000080"

    # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ/–Ω–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    "ElectricLime"   = "#CCFF00"
    "LaserRed"       = "#FF0F0F"
    "NeonOrange"     = "#FF6600"
    "PlasmaViolet"   = "#8B00FF"
    "ElectricBlue"   = "#7DF9FF"
    "NeonGreen"      = "#39FF14"
    "HotPink"        = "#FF69B4"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞
    "Lavender"       = "#E6E6FA"
    "Coral"          = "#FF7F50"
    "Mint"           = "#98FB98"
    "Salmon"         = "#FA8072"
    "DeepPurple"     = "#6A0DAD"
    "OceanBlue"      = "#006994"
    "ForestGreen"    = "#228B22"
    "SunsetOrange"   = "#FF8C00"
    "RoyalPurple"    = "#7851A9"
    "LimeGreen"      = "#32CD32"
    "GoldYellow"     = "#FFD700"
    "CrimsonRed"     = "#DC143C"
    "TealBlue"       = "#008080"
    "Violet"         = "#8A2BE2"
    "Indigo"         = "#4B0082"

    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ üá∫üá¶
    "UkraineBlue"    = "#0057B7"
    "UkraineYellow"  = "#FFD500"
}

# RGB –≤–µ—Ä—Å–∏–∏ —Ü–≤–µ—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
$colorsRGB = @{
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    "WhiteRGB"        = @{ R = 255; G = 255; B = 255 }
    "CyanRGB"         = @{ R = 0; G = 255; B = 255 }
    "MagentaRGB"      = @{ R = 255; G = 0; B = 255 }
    "YellowRGB"       = @{ R = 255; G = 255; B = 0 }
    "OrangeRGB"       = @{ R = 255; G = 165; B = 0 }
    "PinkRGB"         = @{ R = 255; G = 192; B = 203 }
    "PurpleRGB"       = @{ R = 128; G = 0; B = 128 }
    "LimeRGB"         = @{ R = 0; G = 255; B = 0 }
    "TealRGB"         = @{ R = 0; G = 128; B = 128 }
    "GoldRGB"         = @{ R = 255; G = 215; B = 0 }
    "CocoaBeanRGB"    = @{ R = 79; G = 56; B = 53 }

    # –ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    "NeonBlueRGB"     = @{ R = 77; G = 200; B = 255 }
    "NeonGreenRGB"    = @{ R = 57; G = 255; B = 20 }
    "NeonPinkRGB"     = @{ R = 255; G = 70; B = 200 }
    "NeonRedRGB"      = @{ R = 255; G = 55; B = 100 }

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    "Sunset1RGB"      = @{ R = 255; G = 94; B = 77 }
    "Sunset2RGB"      = @{ R = 255; G = 154; B = 0 }
    "Ocean1RGB"       = @{ R = 0; G = 119; B = 190 }
    "Ocean2RGB"       = @{ R = 0; G = 180; B = 216 }
    "Ocean3RGB"       = @{ R = 0; G = 150; B = 160 }
    "Ocean4RGB"       = @{ R = 0; G = 205; B = 230 }

    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
    "UkraineBlueRGB"  = @{ R = 0; G = 87; B = 183 }
    "UkraineYellowRGB"= @{ R = 255; G = 213; B = 0 }
}
#endregion

#region –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function Test-ColorSupport {
    <#
    .SYNOPSIS
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    #>
    return $null -ne $PSStyle
}

function ConvertTo-RGBComponents {
    <#
    .SYNOPSIS
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    
    .PARAMETER HexColor
        HEX —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF0000 –∏–ª–∏ FF0000)
    #>
    param([string]$HexColor)

    if ([string]::IsNullOrEmpty($HexColor)) {
        throw "–¶–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    }

    $hex = $HexColor.TrimStart('#')

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (#RGB -> #RRGGBB)
    if ($hex.Length -eq 3) {
        $hex = $hex[0] + $hex[0] + $hex[1] + $hex[1] + $hex[2] + $hex[2]
    }

    if ($hex.Length -ne 6) {
        throw "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX —Ü–≤–µ—Ç–∞: $HexColor"
    }

    try {
        return @{
            R = [Convert]::ToInt32($hex.Substring(0, 2), 16)
            G = [Convert]::ToInt32($hex.Substring(2, 2), 16)
            B = [Convert]::ToInt32($hex.Substring(4, 2), 16)
        }
    }
    catch {
        throw "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ $HexColor : $_"
    }
}

function ConvertFrom-RGBToHex {
    <#
    .SYNOPSIS
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ HEX
    #>
    param(
        [Parameter(ParameterSetName = 'Separate')]
        [ValidateRange(0, 255)][int]$R,

        [Parameter(ParameterSetName = 'Separate')]
        [ValidateRange(0, 255)][int]$G,

        [Parameter(ParameterSetName = 'Separate')]
        [ValidateRange(0, 255)][int]$B,

        [Parameter(ParameterSetName = 'Hashtable')]
        [hashtable]$Color
    )

    if ($PSCmdlet.ParameterSetName -eq 'Hashtable') {
        $R = $Color.R
        $G = $Color.G
        $B = $Color.B
    }

    return "#{0:X2}{1:X2}{2:X2}" -f $R, $G, $B
}

function Get-RGBColor {
    <#
    .SYNOPSIS
        –ü–æ–ª—É—á–∞–µ—Ç ANSI –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è RGB —Ü–≤–µ—Ç–∞
    #>
    param($Color)

    if (-not (Test-ColorSupport)) {
        return ""
    }

    if ($Color -is [hashtable] -and $Color.ContainsKey('R') -and $Color.ContainsKey('G') -and $Color.ContainsKey('B')) {
        return $PSStyle.Foreground.FromRgb($Color.R, $Color.G, $Color.B)
    }
    elseif ($Color -is [string] -and $Color -match '^#?[0-9A-Fa-f]{3,6}$') {
        $rgb = ConvertTo-RGBComponents -HexColor $Color
        return $PSStyle.Foreground.FromRgb($rgb.R, $rgb.G, $rgb.B)
    }
    else {
        Write-Warning "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞: $Color"
        return ""
    }
}

function Get-RGBBackgroundColor {
    <#
    .SYNOPSIS
        –ü–æ–ª—É—á–∞–µ—Ç ANSI –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è RGB —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
    #>
    param($Color)

    if (-not (Test-ColorSupport)) {
        return ""
    }

    if ($Color -is [hashtable] -and $Color.ContainsKey('R') -and $Color.ContainsKey('G') -and $Color.ContainsKey('B')) {
        return $PSStyle.Background.FromRgb($Color.R, $Color.G, $Color.B)
    }
    elseif ($Color -is [string] -and $Color -match '^#?[0-9A-Fa-f]{3,6}$') {
        $rgb = ConvertTo-RGBComponents -HexColor $Color
        return $PSStyle.Background.FromRgb($rgb.R, $rgb.G, $rgb.B)
    }
    else {
        Write-Warning "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞: $Color"
        return ""
    }
}
#endregion

#region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞–ª–∏—Ç—Ä
# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞
$allHexColors = $additionalColors + $newHexColors
$allRgbColors = $colorsRGB

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
foreach ($color in $allHexColors.GetEnumerator()) {
    if (-not $global:RGB.ContainsKey($color.Key)) {
        $global:RGB[$color.Key] = $color.Value
    }
}

foreach ($color in $allRgbColors.GetEnumerator()) {
    if (-not $global:RGB.ContainsKey($color.Key)) {
        $global:RGB[$color.Key] = $color.Value
    }
}
#endregion

#region –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Write-RGB (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
function Write-RGB {
    <#
    .SYNOPSIS
        –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RGB —Ü–≤–µ—Ç–æ–≤

    .DESCRIPTION
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å RGB —Ü–≤–µ—Ç–∞–º–∏ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ñ–æ–Ω–∞,
        –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∏–ª–µ–π –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤—ã–≤–æ–¥–∞

    .PARAMETER Text
        –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞

    .PARAMETER FC
        –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–∏–º—è –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –∏–ª–∏ HEX)

    .PARAMETER BC
        –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–∏–º—è –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –∏–ª–∏ HEX)

    .PARAMETER Style
        –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: Bold, Italic, Underline, Blink

    .PARAMETER newline
         –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏

    .EXAMPLE
        Write-RGB "Hello World" -FC "#FF6B6B" -Style Bold

    .EXAMPLE
        Write-RGB "Warning!" -FC "ElectricLime" -BC "#2C0000" -Style Blink
    #>

    [CmdletBinding()]
    param(
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromRemainingArguments = $true)]
        [AllowNull()]
        [AllowEmptyString()]
        [string[]]$Text = '',

        [string]$FC = 'White',
        [string]$BC,

        [ValidateSet('Normal', 'Bold', 'Italic', 'Underline', 'Blink')]
        [string[]]$Style = 'Normal',

    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        [switch]$newline,
        [switch]$Bold
    )

    begin {
        if (-not (Test-ColorSupport)) {
            Write-Warning "PSStyle –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ PowerShell"
            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É Write-Host
            $fallbackParams = @{}
            if ($FC -and $FC -in @('Black', 'DarkBlue', 'DarkGreen', 'DarkCyan', 'DarkRed', 'DarkMagenta', 'DarkYellow', 'Gray', 'DarkGray', 'Blue', 'Green', 'Cyan', 'Red', 'Magenta', 'Yellow', 'White')) {
                $fallbackParams['ForegroundColor'] = $FC
            }
            if ($BC -and $BC -in @('Black', 'DarkBlue', 'DarkGreen', 'DarkCyan', 'DarkRed', 'DarkMagenta', 'DarkYellow', 'Gray', 'DarkGray', 'Blue', 'Green', 'Cyan', 'Red', 'Magenta', 'Yellow', 'White')) {
                $fallbackParams['BackgroundColor'] = $BC
            }

            Write-Host ($Text -join ' ') @fallbackParams
            return
        }
    }

    process {
        $fullText = $Text -join ' '

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        if ($Bold -and $Style -notcontains 'Bold') { $Style += 'Bold' }

        $output = ""

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        foreach ($s in $Style) {
            switch ($s) {
                'Bold'      { $output += $PSStyle.Bold }
                'Italic'    { $output += $PSStyle.Italic }
                'Underline' { $output += $PSStyle.Underline }
                'Blink'     { $output += $PSStyle.Blink }
            }
        }

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ PowerShell
        $systemColors = @('Black', 'DarkBlue', 'DarkGreen', 'DarkCyan', 'DarkRed', 'DarkMagenta', 'DarkYellow', 'Gray', 'DarkGray', 'Blue', 'Green', 'Cyan', 'Red', 'Magenta', 'Yellow', 'White')

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
        if ($FC -in $systemColors) {
            $output += $PSStyle.Foreground.$FC
        } elseif ($global:RGB.ContainsKey($FC)) {
            $output += Get-RGBColor $global:RGB[$FC]
        } elseif ($FC -match '^#?[0-9A-Fa-f]{3,6}$') {
            $output += Get-RGBColor $FC
        } else {
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ RGB
            $baseName = $FC -replace 'RGB$', ''
            if ($global:RGB.ContainsKey($baseName)) {
                $output += Get-RGBColor $global:RGB[$baseName]
            } else {
                Write-Warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç: $FC. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–ª—ã–π."
                $output += $PSStyle.Foreground.White
            }
        }

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        if ($BC) {
            if ($BC -in $systemColors) {
                $output += $PSStyle.Background.$BC
            } elseif ($global:RGB.ContainsKey($BC)) {
                $output += Get-RGBBackgroundColor $global:RGB[$BC]
            } elseif ($BC -match '^#?[0-9A-Fa-f]{3,6}$') {
                $output += Get-RGBBackgroundColor $BC
            } else {
                Write-Warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞: $BC"
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
        $output += $fullText + $PSStyle.Reset

        # –í—ã–≤–æ–¥
        Write-Host $output  -NoNewline:(-not $newline)
    }
}
#endregion

#region –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
function Get-GradientColor {
    <#
    .SYNOPSIS
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é

    .DESCRIPTION
        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        –≤ –º–µ–Ω—é PowerShell. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.

    .PARAMETER Index
        –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é (–Ω–∞—á–∏–Ω–∞—è —Å 0)

    .PARAMETER TotalItems
        –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é

    .PARAMETER StartColor
        –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "#FF0000")

    .PARAMETER EndColor
        –ö–æ–Ω–µ—á–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "#0000FF")

    .PARAMETER GradientType
        –¢–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞: Linear, Exponential, Sine, Custom

    .PARAMETER RedCoefficient
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)

    .PARAMETER GreenCoefficient
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)

    .PARAMETER BlueCoefficient
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)

    .PARAMETER CustomFunction
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (—Å–∫—Ä–∏–ø—Ç-–±–ª–æ–∫)

    .PARAMETER Reverse
        –û–±—Ä–∞—Ç–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞

    .EXAMPLE
        Get-GradientColor -Index 0 -TotalItems 5 -StartColor "#FF0000" -EndColor "#0000FF"
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ —Å–∏–Ω–µ–º—É

    .EXAMPLE
        Get-GradientColor -Index 2 -TotalItems 10 -StartColor "#00FF00" -EndColor "#FF00FF" -GradientType Exponential
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º

    .EXAMPLE
        Get-GradientColor -Index 3 -TotalItems 8 -StartColor "#FFFF00" -EndColor "#FF0080" -RedCoefficient 0.5 -BlueCoefficient 2.0
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    #>

    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [int]$Index,

        [Parameter(Mandatory = $true)]
        [int]$TotalItems,

        [Parameter(Mandatory = $false)]
        [string]$StartColor = "#01BB01",

        [Parameter(Mandatory = $false)]
        [string]$EndColor = "#FF9955",

        [Parameter(Mandatory = $false)]
        [ValidateSet("Linear", "Exponential", "Sine", "Custom")]
        [string]$GradientType = "Linear",

        [Parameter(Mandatory = $false)]
        [double]$RedCoefficient = 1.0,

        [Parameter(Mandatory = $false)]
        [double]$GreenCoefficient = 1.0,

        [Parameter(Mandatory = $false)]
        [double]$BlueCoefficient = 1.0,

        [Parameter(Mandatory = $false)]
        [scriptblock]$CustomFunction = $null,

        [Parameter(Mandatory = $false)]
        [switch]$Reverse,

        [Parameter(Mandatory = $false)]
        [int]$Saturation = 100,

        [Parameter(Mandatory = $false)]
        [int]$Brightness = 100
    )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ hex –≤ RGB
    function ConvertFrom-HexToRGB {
        param([string]$HexColor)

        $HexColor = $HexColor.TrimStart('#')
        if ($HexColor.Length -eq 3) {
            $HexColor = $HexColor[0] + $HexColor[0] + $HexColor[1] + $HexColor[1] + $HexColor[2] + $HexColor[2]
        }

        $R = [Convert]::ToInt32($HexColor.Substring(0, 2), 16)
        $G = [Convert]::ToInt32($HexColor.Substring(2, 2), 16)
        $B = [Convert]::ToInt32($HexColor.Substring(4, 2), 16)

        return @{ R = $R; G = $G; B = $B }
    }

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RGB –≤ hex
    function ConvertFrom-RGBToHex {
        param([int]$R, [int]$G, [int]$B)

        $R = [Math]::Max(0, [Math]::Min(255, $R))
        $G = [Math]::Max(0, [Math]::Min(255, $G))
        $B = [Math]::Max(0, [Math]::Min(255, $B))

        return "#{0:X2}{1:X2}{2:X2}" -f $R, $G, $B
    }

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ
    function Get-GradientPosition {
        param([int]$Index, [int]$Total, [string]$Type, [scriptblock]$CustomFunc)

        if ($Total -le 1) { return 0 }

        $normalizedIndex = $Index / ($Total - 1)

        switch ($Type) {
            "Linear" { return $normalizedIndex }
            "Exponential" { return [Math]::Pow($normalizedIndex, 2) }
            "Sine" { return [Math]::Sin($normalizedIndex * [Math]::PI / 2) }
            "Custom" {
                if ($CustomFunc) {
                    return & $CustomFunc $normalizedIndex
                } else {
                    return $normalizedIndex
                }
            }
            default { return $normalizedIndex }
        }
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
    if ($TotalItems -eq 1) {
        return $StartColor
    }

    if ($Index -eq 0 -and -not $Reverse) {
        return $StartColor
    }

    if ($Index -eq ($TotalItems - 1) -and -not $Reverse) {
        return $EndColor
    }

    # –†–µ–≤–µ—Ä—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ($Reverse) {
        $temp = $StartColor
        $StartColor = $EndColor
        $EndColor = $temp
    }

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
    $startRGB = ConvertFrom-HexToRGB $StartColor
    $endRGB = ConvertFrom-HexToRGB $EndColor

    # –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ
    $position = Get-GradientPosition -Index $Index -Total $TotalItems -Type $GradientType -CustomFunc $CustomFunction

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫ –∫–∞–Ω–∞–ª–∞–º
    $redDiff = ($endRGB.R - $startRGB.R) * $position * $RedCoefficient
    $greenDiff = ($endRGB.G - $startRGB.G) * $position * $GreenCoefficient
    $blueDiff = ($endRGB.B - $startRGB.B) * $position * $BlueCoefficient

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π RGB
    $finalR = [int]($startRGB.R + $redDiff)
    $finalG = [int]($startRGB.G + $greenDiff)
    $finalB = [int]($startRGB.B + $blueDiff)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —è—Ä–∫–æ—Å—Ç–∏
    if ($Saturation -ne 100 -or $Brightness -ne 100) {
        $satFactor = $Saturation / 100.0
        $brightFactor = $Brightness / 100.0

        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —è—Ä–∫–æ—Å—Ç–∏
        $gray = ($finalR + $finalG + $finalB) / 3
        $finalR = [int](($finalR - $gray) * $satFactor + $gray) * $brightFactor
        $finalG = [int](($finalG - $gray) * $satFactor + $gray) * $brightFactor
        $finalB = [int](($finalB - $gray) * $satFactor + $gray) * $brightFactor
    }

    return ConvertFrom-RGBToHex $finalR $finalG $finalB
}

function Write-GradientText {
    <#
    .SYNOPSIS
        –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Text,
        [string]$StartColor = "#FFFF00",
        [string]$EndColor = "#0000FF",
        [string[]]$Style = @('Normal'),
        [ValidateSet("Linear", "Exponential", "Sine", "Cosine")]
        [string]$GradientType = "Linear",
        [switch]$NoNewline
    )

    if ([string]::IsNullOrEmpty($Text)) {
        Write-Warning "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        return
    }

    $chars = $Text.ToCharArray()
    $length = $chars.Length

    for ($i = 0; $i -lt $length; $i++) {
        $position = if ($length -eq 1) { 0.5 } else { $i / ($length - 1) }
        $color = Get-GradientColor -StartColor $StartColor -EndColor $EndColor -Position $position -GradientType $GradientType

        Write-RGB -Text $chars[$i] -FC $color -Style $Style
    }

    if (-not $NoNewline) {
        Write-Host ""
    }
}
#endregion


#region –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ª–∏—Ç—Ä–æ–π
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º —Ü–≤–µ—Ç–∞–º
function Get-ConsoleColor {
    param([string]$HexColor)

    $rgb = ConvertFrom-HexToRGB $HexColor

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    $colors = @{
        "Red" = @{R=255; G=0; B=0}
        "Green" = @{R=0; G=255; B=0}
        "Blue" = @{R=0; G=0; B=255}
        "Yellow" = @{R=255; G=255; B=0}
        "Cyan" = @{R=0; G=255; B=255}
        "Magenta" = @{R=255; G=0; B=255}
        "White" = @{R=255; G=255; B=255}
        "Gray" = @{R=128; G=128; B=128}
        "DarkRed" = @{R=128; G=0; B=0}
        "DarkGreen" = @{R=0; G=128; B=0}
        "DarkBlue" = @{R=0; G=0; B=128}
        "DarkYellow" = @{R=128; G=128; B=0}
        "DarkCyan" = @{R=0; G=128; B=128}
        "DarkMagenta" = @{R=128; G=0; B=128}
        "DarkGray" = @{R=64; G=64; B=64}
    }

    $minDistance = [double]::MaxValue
    $closestColor = "White"

    foreach ($colorName in $colors.Keys) {
        $distance = [Math]::Sqrt(
                [Math]::Pow($rgb.R - $colors[$colorName].R, 2) +
                        [Math]::Pow($rgb.G - $colors[$colorName].G, 2) +
                        [Math]::Pow($rgb.B - $colors[$colorName].B, 2)
        )

        if ($distance -lt $minDistance) {
            $minDistance = $distance
            $closestColor = $colorName
        }
    }

    return $closestColor
}


function Show-Colors {
    <#
    .SYNOPSIS
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
    #>
    param(
        [int]$ColumnsPerRow = 4,
        [string]$Filter = "*"
    )

    Write-Host "`n=== –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ ===`n" -ForegroundColor Cyan

    $filteredColors = $global:RGB.Keys | Where-Object { $_ -like $Filter } | Sort-Object
    $colorIndex = 0

    foreach ($colorName in $filteredColors) {
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü —Ü–≤–µ—Ç–∞
        Write-RGB "  $colorName " -FC $colorName

        $colorIndex++
        if ($colorIndex % $ColumnsPerRow -eq 0) {
            Write-Host ""
        }
    }

    Write-Host "`n"
    Write-Host "–í—Å–µ–≥–æ —Ü–≤–µ—Ç–æ–≤: $($filteredColors.Count)" -ForegroundColor Yellow
}

function Show-Palette {
    <#
    .SYNOPSIS
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
    #>
    param(
        [ValidateSet("Nord", "Dracula", "Material", "Cyber", "OneDark", "Pastel", "Neon", "All")]
        [string]$Palette = "All"
    )

    $paletteColors = switch ($Palette) {
        "Nord" { $global:RGB.Keys | Where-Object { $_ -like "Nord_*" } }
        "Dracula" { $global:RGB.Keys | Where-Object { $_ -like "Dracula_*" } }
        "Material" { $global:RGB.Keys | Where-Object { $_ -like "Material_*" } }
        "Cyber" { $global:RGB.Keys | Where-Object { $_ -like "Cyber_*" } }
        "OneDark" { $global:RGB.Keys | Where-Object { $_ -like "OneDark_*" } }
        "Pastel" { $global:RGB.Keys | Where-Object { $_ -like "Pastel*" } }
        "Neon" { $global:RGB.Keys | Where-Object { $_ -like "*Neon*" -or $_ -like "*Electric*" } }
        "All" { $global:RGB.Keys }
    }

    Write-Host "`n=== –ü–∞–ª–∏—Ç—Ä–∞: $Palette ===`n" -ForegroundColor Cyan

    foreach ($colorName in ($paletteColors | Sort-Object)) {
        Write-RGB "‚ñ† $colorName " -FC $colorName
    }

    Write-Host ""
}

function Test-GradientDemo
{
    <#
    .SYNOPSIS
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    #>
    param(
        [string]$Text = "Gradient Demo!"
    )

    Write-Host "`n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ ===`n" -ForegroundColor Cyan

    $gradientTypes = @("Linear", "Exponential", "Sine", "Cosine")
    $colorPairs = @(
        @{ Start = "#FF0000"; End = "#0000FF"; Name = "–ö—Ä–∞—Å–Ω—ã–π ‚Üí –°–∏–Ω–∏–π" },
        @{ Start = "#FFFF00"; End = "#FF00FF"; Name = "–ñ–µ–ª—Ç—ã–π ‚Üí –ü—É—Ä–ø—É—Ä–Ω—ã–π" },
        @{ Start = "#00FF00"; End = "#FF8000"; Name = "–ó–µ–ª–µ–Ω—ã–π ‚Üí –û—Ä–∞–Ω–∂–µ–≤—ã–π" }
    )

    foreach ($colorPair in ( $colorPairs | Sort-Object))
    {
        Get-GradientColor "‚ñ† $colorPair.Name " $colorPair.Start $colorPair.End
    }
}