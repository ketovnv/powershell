importProcess  $MyInvocation.MyCommand.Name.trim('.ps1') -start

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                    üåê BROWSER TRANSLATOR INTEGRATION                        ‚ïë
# ‚ïë              –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –≤ PowerShell               ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

#region –ú–µ—Ç–æ–¥ 1: Selenium WebDriver –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞

function Initialize-BrowserTranslator {
    <#
    .SYNOPSIS
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Selenium

    .DESCRIPTION
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium WebDriver –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º –∏ –¥–æ—Å—Ç—É–ø–∞
        –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞–º (Google Translate, Edge Translator –∏ –¥—Ä.)

    .PARAMETER Browser
        –¢–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞: Chrome, Edge, Firefox

    .PARAMETER Headless
        –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ GUI
    #>
    param(
        [ValidateSet('Chrome', 'Edge', 'Firefox')]
        [string]$Browser = 'Edge',

        [switch]$Headless
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Selenium
    if (-not (Get-Module -ListAvailable -Name Selenium)) {
        Write-Status -Warning "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Selenium PowerShell –º–æ–¥—É–ª—å..."
        Install-Module Selenium -Force -Scope CurrentUser
    }

    Import-Module Selenium

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    $options = switch ($Browser) {
        'Chrome' {
            $chromeOptions = New-Object OpenQA.Selenium.Chrome.ChromeOptions
            if ($Headless) {
                $chromeOptions.AddArgument("--headless")
            }
            $chromeOptions.AddArgument("--disable-gpu")
            $chromeOptions.AddArgument("--no-sandbox")
            $chromeOptions.AddArgument("--disable-dev-shm-usage")
            $chromeOptions.AddArgument("--lang=ru-RU")
            $chromeOptions
        }
        'Edge' {
            $edgeOptions = New-Object OpenQA.Selenium.Edge.EdgeOptions
            if ($Headless) {
                $edgeOptions.AddArgument("--headless")
            }
            $edgeOptions.AddArgument("--disable-gpu")
            $edgeOptions.AddArgument("--lang=ru-RU")
            $edgeOptions
        }
        'Firefox' {
            $firefoxOptions = New-Object OpenQA.Selenium.Firefox.FirefoxOptions
            if ($Headless) {
                $firefoxOptions.AddArgument("--headless")
            }
            $firefoxOptions
        }
    }

    # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
    try {
        $driver = switch ($Browser) {
            'Chrome' { New-Object OpenQA.Selenium.Chrome.ChromeDriver($chromeOptions) }
            'Edge' { New-Object OpenQA.Selenium.Edge.EdgeDriver($edgeOptions) }
            'Firefox' { New-Object OpenQA.Selenium.Firefox.FirefoxDriver($firefoxOptions) }
        }

        $script:BrowserDriver = $driver
        Write-Status -Success "–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ($Browser)"

        return $driver
    } catch {
        Write-Status -Error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä: $_"
        throw
    }
}

function Invoke-BrowserTranslate {
    <#
    .SYNOPSIS
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫

    .DESCRIPTION
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Translate –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

    .PARAMETER Text
        –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º)

    .PARAMETER From
        –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (auto –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)

    .PARAMETER To
        –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫

    .PARAMETER Service
        –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞: GoogleTranslate, EdgeTranslator, DeepL

    .EXAMPLE
        $translatedText = Invoke-BrowserTranslate -Text $hugeText -From en -To ru
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory, ValueFromPipeline)]
        [string]$Text,

        [string]$From = 'auto',
        [string]$To = 'ru',

        [ValidateSet('GoogleTranslate', 'EdgeTranslator', 'DeepL')]
        [string]$Service = 'GoogleTranslate',

        [switch]$ShowProgress
    )

    begin {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (-not $script:BrowserDriver) {
            Write-Status -Info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä..."
            Initialize-BrowserTranslator -Headless
        }
    }

    process {
        $driver = $script:BrowserDriver

        try {
            switch ($Service) {
                'GoogleTranslate' {
                    # URL –¥–ª—è Google Translate
                    $url = "https://translate.google.com/?sl=$From&tl=$To&op=translate"

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    $driver.Navigate().GoToUrl($url)
                    Start-Sleep -Milliseconds 1000

                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    $inputField = $driver.FindElement([OpenQA.Selenium.By]::CssSelector("textarea[aria-label*='Source text']"))

                    # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
                    if ($Text.Length -gt 5000) {
                        if ($ShowProgress) {
                            wrgb "üìù –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏..." -FC "Cyan" -newline
                        }

                        $chunks = [System.Text.RegularExpressions.Regex]::Matches($Text, '[\s\S]{1,5000}')
                        $totalChunks = $chunks.Count
                        $currentChunk = 0

                        $translatedParts = @()

                        foreach ($chunk in $chunks) {
                            $currentChunk++

                            if ($ShowProgress) {
                                $percent = ($currentChunk / $totalChunks) * 100
                                Show-RGBProgress -Activity "–ü–µ—Ä–µ–≤–æ–¥" `
                                               -PercentComplete $percent `
                                               -Status "–ß–∞—Å—Ç—å $currentChunk –∏–∑ $totalChunks" `
                                               -ShowPercentage
                            }

                            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                            $inputField.Clear()

                            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                            $inputField.SendKeys($chunk.Value)

                            # –ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞
                            Start-Sleep -Milliseconds 2000

                            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            $resultElement = $driver.FindElement([OpenQA.Selenium.By]::CssSelector("span[jsname='W297wb']"))
                            $translatedParts += $resultElement.Text
                        }

                        return $translatedParts -join ' '
                    } else {
                        # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
                        $inputField.Clear()
                        $inputField.SendKeys($Text)

                        # –ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞
                        Start-Sleep -Milliseconds 2000

                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        $resultElement = $driver.FindElement([OpenQA.Selenium.By]::CssSelector("span[jsname='W297wb']"))
                        return $resultElement.Text
                    }
                }

                'EdgeTranslator' {
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ Edge
                    # –¢—Ä–µ–±—É–µ—Ç Edge —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º

                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—Å—Ç–æ–º
                    $tempHtml = [System.IO.Path]::GetTempFileName() + ".html"
                    @"
<!DOCTYPE html>
<html lang="$From">
<head>
    <meta charset="UTF-8">
    <title>Translation</title>
</head>
<body>
    <div id="content">$([System.Web.HttpUtility]::HtmlEncode($Text))</div>
</body>
</html>
"@ | Out-File -FilePath $tempHtml -Encoding UTF8

                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    $driver.Navigate().GoToUrl("file:///$tempHtml")

                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ Edge (Ctrl+Shift+A)
                    $actions = New-Object OpenQA.Selenium.Interactions.Actions($driver)
                    $actions.KeyDown([OpenQA.Selenium.Keys]::Control)
                    .KeyDown([OpenQA.Selenium.Keys]::Shift)
                    .SendKeys("a")
                    .KeyUp([OpenQA.Selenium.Keys]::Shift)
                    .KeyUp([OpenQA.Selenium.Keys]::Control)
                    .Perform()

                    # –ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞
                    Start-Sleep -Seconds 3

                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    $contentElement = $driver.FindElement([OpenQA.Selenium.By]::Id("content"))
                    $translatedText = $contentElement.Text

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    Remove-Item $tempHtml -Force

                    return $translatedText
                }

                'DeepL' {
                    # DeepL –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                    $url = "https://www.deepl.com/translator#$From/$To/"

                    $driver.Navigate().GoToUrl($url)
                    Start-Sleep -Milliseconds 2000

                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    $inputField = $driver.FindElement([OpenQA.Selenium.By]::CssSelector("textarea[dl-test='translator-source-input']"))

                    # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                    $inputField.Clear()
                    $inputField.SendKeys($Text)

                    # –ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞
                    Start-Sleep -Seconds 3

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    $resultElement = $driver.FindElement([OpenQA.Selenium.By]::CssSelector("textarea[dl-test='translator-target-input']"))
                    return $resultElement.GetAttribute("value")
                }
            }
        } catch {
            Write-Status -Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: $_"
            throw
        }
    }
}

function Close-BrowserTranslator {
    <#
    .SYNOPSIS
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    #>

    if ($script:BrowserDriver) {
        $script:BrowserDriver.Quit()
        $script:BrowserDriver = $null
        Write-Status -Success "–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–∫—Ä—ã—Ç"
    }
}

#endregion

#region –ú–µ—Ç–æ–¥ 2: Edge WebView2 Integration

function Initialize-EdgeTranslator {
    <#
    .SYNOPSIS
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Edge WebView2

    .DESCRIPTION
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π WebView2 –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Edge
        –ë–æ–ª–µ–µ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π —á–µ–º Selenium
    #>

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebView2
    $webView2 = Get-Package "Microsoft Edge WebView2 Runtime" -ErrorAction SilentlyContinue

    if (-not $webView2) {
        Write-Status -Warning "WebView2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º..."

        $installerUrl = "https://go.microsoft.com/fwlink/p/?LinkId=2124703"
        $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"

        Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
        Start-Process -FilePath $installerPath -ArgumentList "/silent" -Wait
    }

    # –°–æ–∑–¥–∞–µ–º WebView2 –∫–æ–Ω—Ç—Ä–æ–ª
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName Microsoft.Web.WebView2.WinForms

    $form = New-Object System.Windows.Forms.Form
    $form.Text = "PowerShell Translator"
    $form.Width = 800
    $form.Height = 600
    $form.WindowState = [System.Windows.Forms.FormWindowState]::Minimized

    $webView = New-Object Microsoft.Web.WebView2.WinForms.WebView2
    $webView.Dock = [System.Windows.Forms.DockStyle]::Fill

    $form.Controls.Add($webView)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebView2
    $webView.EnsureCoreWebView2Async($null).Wait()

    $script:EdgeWebView = @{
        Form = $form
        WebView = $webView
    }

    Write-Status -Success "Edge WebView2 –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
}

#endregion

#region –ú–µ—Ç–æ–¥ 3: Chrome DevTools Protocol

function Invoke-ChromeTranslate {
    <#
    .SYNOPSIS
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Chrome DevTools Protocol –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

    .DESCRIPTION
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome/Edge —á–µ—Ä–µ–∑ DevTools Protocol
        –≠—Ç–æ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Text,

        [string]$From = 'en',
        [string]$To = 'ru',

        [int]$Port = 9222
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome/Edge —Å remote debugging
    $browserPath = if (Test-Path "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe") {
        "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
    } else {
        "C:\Program Files\Google\Chrome\Application\chrome.exe"
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –æ—Ç–ª–∞–¥–∫–æ–π
    $process = Start-Process -FilePath $browserPath `
                           -ArgumentList "--remote-debugging-port=$Port", "--headless" `
                           -PassThru

    Start-Sleep -Seconds 2

    try {
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DevTools
        $webSocketUrl = (Invoke-RestMethod "http://localhost:$Port/json").webSocketDebuggerUrl | Select-Object -First 1

        # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ HTTP endpoints

        $sessionId = [Guid]::NewGuid().ToString()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        $navigateParams = @{
            url = "https://translate.google.com/?sl=$From&tl=$To&text=$([System.Web.HttpUtility]::UrlEncode($Text))&op=translate"
        } | ConvertTo-Json

        Invoke-RestMethod -Method Post `
                         -Uri "http://localhost:$Port/json/runtime/evaluate" `
                         -Body $navigateParams `
                         -ContentType "application/json"

        Start-Sleep -Seconds 3

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        $script = @"
        document.querySelector('span[jsname="W297wb"]').innerText
"@

        $evalParams = @{
            expression = $script
        } | ConvertTo-Json

        $result = Invoke-RestMethod -Method Post `
                                   -Uri "http://localhost:$Port/json/runtime/evaluate" `
                                   -Body $evalParams `
                                   -ContentType "application/json"

        return $result.result.value

    } finally {
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        $process | Stop-Process -Force
    }
}

#endregion

#region –ú–µ—Ç–æ–¥ 4: Native API Integration

function Invoke-TranslatorAPI {
    <#
    .SYNOPSIS
        –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤

    .DESCRIPTION
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —Ç–µ–∫—Å—Ç–∞
        –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Text,

        [string]$From = 'en',
        [string]$To = 'ru',

        [ValidateSet('Google', 'Microsoft', 'DeepL', 'Yandex')]
        [string]$Provider = 'Microsoft',

        [string]$ApiKey,

        [switch]$ChunkLargeText
    )

    switch ($Provider) {
        'Microsoft' {
            # Microsoft Translator API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω)
            if (-not $ApiKey) {
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π endpoint (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)
                $endpoint = "https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=$From&to=$To"

                $headers = @{
                    'Ocp-Apim-Subscription-Key' = 'YOUR_KEY_HERE'
                    'Content-Type' = 'application/json'
                }

                $body = @(@{
                    Text = $Text
                }) | ConvertTo-Json

                try {
                    $response = Invoke-RestMethod -Method Post `
                                                -Uri $endpoint `
                                                -Headers $headers `
                                                -Body $body

                    return $response[0].translations[0].text
                } catch {
                    Write-Status -Warning "–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á –¥–ª—è Microsoft Translator"
                }
            }
        }

        'Yandex' {
            # Yandex Translate API
            $endpoint = "https://translate.yandex.net/api/v1.5/tr.json/translate"

            $params = @{
                key = $ApiKey
                text = $Text
                lang = "$From-$To"
            }

            $response = Invoke-RestMethod -Method Post -Uri $endpoint -Body $params
            return $response.text -join ' '
        }
    }
}

#endregion

#region –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞

function Translate-Text {
    <#
    .SYNOPSIS
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞

    .DESCRIPTION
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
        —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤

    .PARAMETER Text
        –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)

    .PARAMETER From
        –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫

    .PARAMETER To
        –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫

    .PARAMETER Method
        –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞: Auto, Browser, API, WebView

    .EXAMPLE
        $book | Translate-Text -From en -To ru

    .EXAMPLE
        Get-Content "huge-document.txt" -Raw | Translate-Text -Method Browser
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory, ValueFromPipeline)]
        [string]$Text,

        [string]$From = 'auto',
        [string]$To = 'ru',

        [ValidateSet('Auto', 'Browser', 'API', 'WebView', 'Chrome')]
        [string]$Method = 'Auto',

        [ValidateSet('GoogleTranslate', 'EdgeTranslator', 'DeepL')]
        [string]$Service = 'GoogleTranslate',

        [switch]$ShowProgress,
        [switch]$SaveToFile,
        [string]$OutputPath
    )

    begin {
        $startTime = Get-Date

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if ($Method -eq 'Auto') {
            $textLength = $Text.Length

            $Method = if ($textLength -lt 5000) {
                'API'  # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ - API
            } elseif ($textLength -lt 50000) {
                'Browser'  # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö - –±—Ä–∞—É–∑–µ—Ä
            } else {
                'Browser'  # –î–ª—è –æ–≥—Ä–æ–º–Ω—ã—Ö - –±—Ä–∞—É–∑–µ—Ä —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
            }

            wrgb "üìä –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: " -FC "Cyan"
            wrgb "$textLength —Å–∏–º–≤–æ–ª–æ–≤" -FC "Yellow"
            wrgb ", –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: " -FC "Cyan"
            wrgb $Method -FC "Green" -Style Bold -newline
        }
    }

    process {
        wrgb "üåê –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ " -FC "Cyan"
        wrgb "($From ‚Üí $To)" -FC "White" -Style Bold
        wrgb " —á–µ—Ä–µ–∑ " -FC "Cyan"
        wrgb $Service -FC "Yellow" -newline

        if ($ShowProgress) {
            Show-AnimatedProgress -Activity "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞" -TotalSteps 10
        }

        $translatedText = switch ($Method) {
            'Browser' {
                try {
                    Initialize-BrowserTranslator -Browser Edge -Headless
                    Invoke-BrowserTranslate -Text $Text -From $From -To $To -Service $Service -ShowProgress:$ShowProgress
                } finally {
                    Close-BrowserTranslator
                }
            }

            'API' {
                Invoke-TranslatorAPI -Text $Text -From $From -To $To
            }

            'WebView' {
                Initialize-EdgeTranslator
                # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebView2
            }

            'Chrome' {
                Invoke-ChromeTranslate -Text $Text -From $From -To $To
            }
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $duration = (Get-Date) - $startTime
        $wordsCount = ($Text -split '\s+').Count
        $translatedWordsCount = ($translatedText -split '\s+').Count

        wrgb "`n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!" -FC "LimeGreen" -Style Bold -newline
        wrgb "‚è±Ô∏è  –í—Ä–µ–º—è: " -FC "Gray"
        wrgb $duration.ToString("mm\:ss") -FC "Yellow" -newline
        wrgb "üìù –°–ª–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª: " -FC "Gray"
        wrgb $wordsCount -FC "Cyan"
        wrgb " ‚Üí –ø–µ—Ä–µ–≤–æ–¥: " -FC "Gray"
        wrgb $translatedWordsCount -FC "Cyan" -newline

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        if ($SaveToFile) {
            if (-not $OutputPath) {
                $OutputPath = "translated_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
            }

            $translatedText | Out-File -FilePath $OutputPath -Encoding UTF8
            wrgb "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: " -FC "Gray"
            wrgb $OutputPath -FC "Green" -newline
        }

        return $translatedText
    }
}

#endregion

#region –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫

function Start-InteractiveTranslator {
    <#
    .SYNOPSIS
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    #>

    Clear-Host
    Write-GradientHeader -Title "INTERACTIVE TRANSLATOR" -StartColor "#4285F4" -EndColor "#34A853"

    wrgb "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫!" -FC "Gold" -Style Bold -newline
    wrgb "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞" -FC "Gray" -newline

    $running = $true

    while ($running) {
        wrgb "`nüìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É):" -FC "Cyan" -newline
        wrgb "–ö–æ–º–∞–Ω–¥—ã: [F]ile, [C]lipboard, [U]RL, [S]ettings, [Q]uit" -FC "DarkGray" -newline
        wrgb "> " -FC "Yellow"

        $input = Read-Host

        switch -Regex ($input) {
            '^[Ff]$' {
                wrgb "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: " -FC "Cyan"
                $path = Read-Host

                if (Test-Path $path) {
                    $content = Get-Content $path -Raw
                    wrgb "üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " -FC "Green"
                    wrgb "$((Get-Item $path).Length / 1KB) KB" -FC "Yellow" -newline

                    $translated = Translate-Text -Text $content -ShowProgress

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º preview
                    wrgb "`n--- –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ---" -FC "DarkGray" -newline
                    wrgb ($translated.Substring(0, [Math]::Min(500, $translated.Length)) + "...") -FC "White" -newline
                    wrgb "--- –ö–æ–Ω–µ—Ü preview ---" -FC "DarkGray" -newline
                }
            }

            '^[Cc]$' {
                $clipText = Get-Clipboard
                if ($clipText) {
                    wrgb "üìã –¢–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω" -FC "Green" -newline
                    $translated = Translate-Text -Text $clipText
                    Set-Clipboard $translated
                    wrgb "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" -FC "LimeGreen" -newline
                }
            }

            '^[Uu]$' {
                wrgb "URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " -FC "Cyan"
                $url = Read-Host

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                $response = Invoke-WebRequest -Uri $url
                $text = $response.Content -replace '<[^>]+>', ' ' -replace '\s+', ' '

                $translated = Translate-Text -Text $text -ShowProgress
            }

            '^[Qq]$' {
                $running = $false
            }

            default {
                if ($input.Length -gt 0) {
                    $translated = Translate-Text -Text $input
                    wrgb "`nüîÑ –ü–µ—Ä–µ–≤–æ–¥:" -FC "Green" -Style Bold -newline
                    wrgb $translated -FC "White" -newline
                }
            }
        }
    }

    Write-Status -Info "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–∫—Ä—ã—Ç"
}

#endregion

#region –ü–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤

function Translate-Files {
    <#
    .SYNOPSIS
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Path,

        [string]$Filter = "*.txt",

        [string]$From = 'en',
        [string]$To = 'ru',

        [string]$OutputFolder = "Translated",

        [switch]$PreserveFormatting
    )

    $files = Get-ChildItem -Path $Path -Filter $Filter -Recurse

    Write-GradientHeader -Title "BATCH FILE TRANSLATOR"
    wrgb "üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " -FC "Cyan"
    wrgb $files.Count -FC "Yellow" -Style Bold -newline

    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    $outputPath = Join-Path (Split-Path $Path) $OutputFolder
    New-Item -Path $outputPath -ItemType Directory -Force | Out-Null

    $processed = 0

    foreach ($file in $files) {
        $processed++
        $percent = ($processed / $files.Count) * 100

        wrgb "`n[$processed/$($files.Count)] " -FC "DarkCyan"
        wrgb "–ü–µ—Ä–µ–≤–æ–¥: " -FC "White"
        wrgb $file.Name -FC "Yellow" -newline

        try {
            $content = Get-Content $file.FullName -Raw

            if ($PreserveFormatting) {
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ –∞–±–∑–∞—Ü–∞–º)
                $paragraphs = $content -split "`n`n"
                $translatedParagraphs = @()

                foreach ($paragraph in $paragraphs) {
                    if ($paragraph.Trim()) {
                        $translatedParagraphs += Translate-Text -Text $paragraph -From $From -To $To
                    } else {
                        $translatedParagraphs += ""
                    }
                }

                $translated = $translatedParagraphs -join "`n`n"
            } else {
                $translated = Translate-Text -Text $content -From $From -To $To
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
            $relativePath = $file.FullName.Substring($Path.Length)
            $newPath = Join-Path $outputPath $relativePath
            $newDir = Split-Path $newPath -Parent

            New-Item -Path $newDir -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null

            $translated | Out-File -FilePath $newPath -Encoding UTF8

            Write-Status -Success "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $newPath"

        } catch {
            Write-Status -Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ $($file.Name): $_"
        }

        Show-RGBProgress -Activity "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å" `
                        -PercentComplete $percent `
                        -Status "$processed –∏–∑ $($files.Count)" `
                        -ShowPercentage
    }

    wrgb "`n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!" -FC "LimeGreen" -Style Bold -newline
    wrgb "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: " -FC "Gray"
    wrgb $outputPath -FC "Cyan" -newline
}

#endregion

#region –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

function Show-BrowserTranslatorDemo {
    Clear-Host

    Write-GradientHeader -Title "BROWSER TRANSLATOR DEMO" -StartColor "#4285F4" -EndColor "#34A853"

    wrgb "üåê –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞:" -FC "Gold" -Style Bold -newline

    wrgb "`n1Ô∏è‚É£ " -FC "Cyan"
    wrgb "–ü–µ—Ä–µ–≤–æ–¥ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤" -FC "Yellow" -Style Bold -newline
    wrgb "   Get-Content 'book.txt' -Raw | Translate-Text -ShowProgress" -FC "Material_Comment" -newline

    wrgb "`n2Ô∏è‚É£ " -FC "Cyan"
    wrgb "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º" -FC "Yellow" -Style Bold -newline
    wrgb "   Start-InteractiveTranslator" -FC "Material_Comment" -newline

    wrgb "`n3Ô∏è‚É£ " -FC "Cyan"
    wrgb "–ü–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–æ–≤" -FC "Yellow" -Style Bold -newline
    wrgb "   Translate-Files -Path './docs' -Filter '*.txt'" -FC "Material_Comment" -newline

    wrgb "`n4Ô∏è‚É£ " -FC "Cyan"
    wrgb "–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞" -FC "Yellow" -Style Bold -newline
    wrgb "   Get-Clipboard | Translate-Text | Set-Clipboard" -FC "Material_Comment" -newline

    wrgb "`nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:" -FC "Material_Orange" -Style Bold -newline
    wrgb "   ‚úì –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞" -FC "LimeGreen" -newline
    wrgb "   ‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏" -FC "LimeGreen" -newline
    wrgb "   ‚úì –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —è–∑—ã–∫–∞–º–∏" -FC "LimeGreen" -newline
    wrgb "   ‚úì –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" -FC "LimeGreen" -newline

    wrgb "`nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: " -FC "White"
    wrgb "'Hello World' | Translate-Text" -FC "Material_Pink" -Style Bold -newline
}

#endregion

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
wrgb "`nüåê " -FC "Gold"
Write-GradientText "Browser Translator Integration" -StartColor "#4285F4" -EndColor "#34A853" -NoNewline
wrgb " –∑–∞–≥—Ä—É–∂–µ–Ω!" -FC "Gold" -newline

wrgb "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: " -FC "Gray"
wrgb "Show-BrowserTranslatorDemo" -FC "Material_Pink" -Style Bold
wrgb " –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏" -FC "Gray" -newline

# –≠–∫—Å–ø–æ—Ä—Ç
if ($MyInvocation.MyCommand.Path -match '\.psm1$') {
    Export-ModuleMember -Function * -Alias * -Variable *
}

importProcess  $MyInvocation.MyCommand.Name.trim('.ps1')