importProcess  $MyInvocation.MyCommand.Name.trim('.ps1') -start

function Get-SystemHealthSegment {
    try {
        # CPU –∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥)
        $cpu = Get-Counter '\Processor(_Total)\% Processor Time' -SampleInterval 1 -MaxSamples 1 | 
                Select-Object -ExpandProperty CounterSamples | 
                Select-Object -ExpandProperty CookedValue
        $cpuPercent = [math]::Round($cpu, 0)
        
        # –ü–∞–º—è—Ç—å
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $memUsed = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 0)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        $temp = try {
            $tempSensor = Get-CimInstance -ClassName MSAcpi_ThermalZoneTemperature -Namespace "root/wmi" -ErrorAction SilentlyContinue
            if ($tempSensor) {
                $tempC = [math]::Round(($tempSensor[0].CurrentTemperature / 10) - 273.15, 0)
                if ($tempC -gt 0 -and $tempC -lt 100) { "$tempC¬∞C" } else { "" }
            } else { "" }
        } catch { "" }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        $cpuIcon = if ($cpuPercent -gt 80) { "üî•" } elseif ($cpuPercent -gt 60) { "‚ö°" } else { "üíö" }
        $memIcon = if ($memUsed -gt 85) { "üî¥" } elseif ($memUsed -gt 70) { "üü°" } else { "üü¢" }
        
        $result = "$cpuIcon$cpuPercent% $memIcon$memUsed%"
        if ($temp) { $result += " üå°Ô∏è$temp" }
        
        return $result
    }
    catch {
        return "üíö OK"
    }
}

Export-ModuleMember -Function Get-SystemHealthSegment

importProcess  $MyInvocation.MyCommand.Name.trim('.ps1')