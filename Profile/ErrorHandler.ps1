# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                    üö® UNIFIED ERROR HANDLER v3.0                           ‚ïë
# ‚ïë              –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ PowerShell              ‚ïë
# ‚ïë                    –° –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RGB –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤                     ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Write-RGB "`n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã –æ—à–∏–±–æ–∫:" -FC Dracula_Orange -newline
$ErrorViews = (Get-Command ConvertTo-*ErrorView).Name -replace "ConvertTo-(.*)ErrorView", '$1'
$ErrorViews | ForEach-Object { Write-RGB  "  - $_" -FC Dracula_Red}
Write-RGB "`n–ú–µ–Ω—è–µ–º –Ω–∞ –≤–∏–¥:"  -FC Gray
Set-MyErrorView -View "Colorful"
Write-RGB "Colorful"  -FC Dracula_Green
#region –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$global:UnifiedErrorConfig = @{
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    Language = "ru"
    UseColors = $true
    UseEmoji = $true
    UseGradients = $false

    # –£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    ShowStackTrace = $false
    ShowInnerExceptions = $true
    ShowScriptLocation = $true
    ShowTimestamp = $true
    ShowErrorId = $true
    ShowCategory = $true
    ShowSuggestions = $true

    # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ColorScheme = "Dracula"  # Dracula, Nord, Material, Cyber, Custom
    GradientStyle = "Fire"   # Fire, Ocean, Nature, Neon
    BorderStyle = "Double"   # Single, Double, Rounded, Heavy, None
    CompactMode = $false

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    LogErrors = $true
    LogPath = "$env:TEMP\PowerShell_Errors_$( Get-Date -Format 'yyyy-MM' ).log"
    LogFormat = "JSON"  # Text, JSON, XML

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    NotifyOnCritical = $true
    NotificationSound = $false
    DesktopNotification = $false

    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    MaxErrorWidth = 100
    GroupSimilarErrors = $true
    HistorySize = 50
}

# –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è –æ—à–∏–±–æ–∫
$global:ErrorColorSchemes = @{
    Dracula = @{
        Error = "#FF5555"
        Warning = "#F1FA8C"
        Info = "#8BE9FD"
        Success = "#50FA7B"
        Background = "#282A36"
        Border = "#44475A"
        Text = "#F8F8F2"
        Accent = "#BD93F9"
    }

    Nord = @{
        Error = "#BF616A"
        Warning = "#EBCB8B"
        Info = "#81A1C1"
        Success = "#A3BE8C"
        Background = "#2E3440"
        Border = "#4C566A"
        Text = "#ECEFF4"
        Accent = "#88C0D0"
    }

    Material = @{
        Error = "#F44336"
        Warning = "#FF9800"
        Info = "#2196F3"
        Success = "#4CAF50"
        Background = "#121212"
        Border = "#424242"
        Text = "#FFFFFF"
        Accent = "#BB86FC"
    }

    Cyber = @{
        Error = "#FF006E"
        Warning = "#FFB700"
        Info = "#00FFFF"
        Success = "#00FF88"
        Background = "#0D1117"
        Border = "#30363D"
        Text = "#C9D1D9"
        Accent = "#58A6FF"
    }

    ColorSchemes = @{
        Critical = @{ Start = "#FF0000"; End = "#8B0000"; Icon = "üö®" }
        Error = @{ Start = "#FF6B6B"; End = "#C92A2A"; Icon = "‚ùå" }
        Warning = @{ Start = "#FFD43B"; End = "#FAB005"; Icon = "‚ö†Ô∏è" }
        Info = @{ Start = "#4DABF7"; End = "#1C7ED6"; Icon = "‚ÑπÔ∏è" }
        Success = @{ Start = "#51CF66"; End = "#37B24D"; Icon = "‚úÖ" }
    }

}

# –ü–µ—Ä–µ–≤–æ–¥—ã –æ—à–∏–±–æ–∫ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
$global:ErrorTranslations = @{
# –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "Access is denied" = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"
    "The term '(.*)' is not recognized" = "–ö–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
    "Cannot find path '(.*)'" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å '$1'"
    "Cannot find drive" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–∏—Å–∫"
    "The file '(.*)' cannot be found" = "–§–∞–π–ª '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Cannot convert value" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
    "Attempted to divide by zero" = "–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"
    "Object reference not set" = "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    "Index was outside the bounds" = "–ò–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞"
    "The property '(.*)' cannot be found" = "–°–≤–æ–π—Å—Ç–≤–æ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    "Cannot validate argument" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç"
    "Parameter '(.*)' cannot be found" = "–ü–∞—Ä–∞–º–µ—Ç—Ä '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Network path was not found" = "–°–µ—Ç–µ–≤–æ–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Access to the path '(.*)' is denied" = "–î–æ—Å—Ç—É–ø –∫ –ø—É—Ç–∏ '$1' –∑–∞–ø—Ä–µ—â—ë–Ω"
    "Out of memory" = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏"
    "Stack overflow" = "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞"

    # –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    "CommandNotFoundException" = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    "ParameterBindingException" = "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
    "ArgumentException" = "–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç"
    "UnauthorizedAccessException" = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
    "FileNotFoundException" = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "DirectoryNotFoundException" = "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    "PathTooLongException" = "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å"
    "InvalidOperationException" = "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
    "NotSupportedException" = "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    "TimeoutException" = "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    "IOException" = "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞"
    "NullReferenceException" = "–°—Å—ã–ª–∫–∞ –Ω–∞ null"
    "OutOfMemoryException" = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏"
    "StackOverflowException" = "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞"

}



# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—à–∏–±–æ–∫
$global:ErrorTemplates = @{
    CommandNotFoundException = @{
        Icon = "‚ùå"
        Title = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        Pattern = "CommandNotFoundException|term.*not recognized"
        Severity = "Error"
        Suggestions = @(
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Get-Command –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥",
            "üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å: Install-Module <–∏–º—è>"
        )
    }

    UnauthorizedAccessException = @{
        Icon = "üîí"
        Title = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ"
        Pattern = "UnauthorizedAccessException|Access.*denied"
        Severity = "Critical"
        Suggestions = @(
            "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É/–ø–∞–ø–∫–µ",
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Get-Acl –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤"
        )
    }

    FileNotFoundException = @{
        Icon = "üìÑ"
        Title = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        Pattern = "FileNotFoundException|cannot find.*file"
        Severity = "Error"
        Suggestions = @(
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É",
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Test-Path –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è",
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
        )
    }

    NetworkException = @{
        Icon = "üåê"
        Title = "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞"
        Pattern = "network|connection|timeout"
        Severity = "Warning"
        Suggestions = @(
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏",
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    }

    OutOfMemoryException = @{
        Icon = "üíæ"
        Title = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏"
        Pattern = "OutOfMemoryException|memory"
        Severity = "Critical"
        Suggestions = @(
            "üí° –ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "üí° –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–∞—á–∫–∏",
            "üí° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"
        )
    }

    "ParameterBindingException" = @{
        Icon = "üëª"
        Title = "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        Pattern = "ParameterBindingException"
        Severity = "Warning"
        Suggestion = @("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    }

    #"Default" = @{
    #    Icon = "üëª"
    #     Title = "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    #    Severity = "Info"
    #    Pattern = "ParameterBindingException
    #    Suggestion = @("")
    #    }

}
#endregion

#region –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

function Format-UnifiedError
{
    <#
    .SYNOPSIS
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

    .PARAMETER ErrorRecord
        –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    .PARAMETER Style
        –°—Ç–∏–ª—å –≤—ã–≤–æ–¥–∞: Full, Compact, SingleLine, Minimal

    .PARAMETER NoColor
        –û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory, ValueFromPipeline)]
        [System.Management.Automation.ErrorRecord]$ErrorRecord,

        [ValidateSet('Full', 'Compact', 'SingleLine', 'Minimal')]
        [string]$Style = 'Full',

        [switch]$NoColor,
        [switch]$AsObject
    )

    process {
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ —Ü–≤–µ—Ç–∞
        $template = Get-ErrorTemplate -ErrorRecord $ErrorRecord
        $colors = Get-ErrorColors

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        $errorInfo = Extract-ErrorInfo -ErrorRecord $ErrorRecord

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        $errorInfo.Message = Translate-ErrorMessage -Message $errorInfo.Message `
                                                       -ExceptionType $errorInfo.ExceptionType

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        $formatted = switch ($Style)
        {
            'Full' {
                Format-FullError -ErrorInfo $errorInfo -Template $template -Colors $colors
            }
            'Compact' {
                Format-CompactError -ErrorInfo $errorInfo -Template $template -Colors $colors
            }
            'SingleLine' {
                Format-SingleLineError -ErrorInfo $errorInfo -Template $template -Colors $colors
            }
            'Minimal' {
                Format-MinimalError -ErrorInfo $errorInfo -Template $template -Colors $colors
            }
        }

        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ($global:UnifiedErrorConfig.LogErrors)
        {
            Write-ErrorLog -ErrorInfo $errorInfo -FormattedError $formatted
        }

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º
        if ($AsObject)
        {
            return $formatted
        }
        else
        {
            Write-FormattedError -FormattedError $formatted -NoColor:$NoColor
        }
    }
}

function Format-FullError
{
    param($ErrorInfo, $Template, $Colors)

    $result = @{
        Lines = @()
        Raw = ""
    }

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–º–∫–æ–π
    if ($global:UnifiedErrorConfig.BorderStyle -ne 'None')
    {
        $border = Get-BorderChars -Style $global:UnifiedErrorConfig.BorderStyle
        $width = [Math]::Min($global:UnifiedErrorConfig.MaxErrorWidth, 80)

        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        $result.Lines += @{
            Text = $border.TL + ($border.H * ($width - 2)) + $border.TR
            Color = $Colors.Border
        }

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
        $titleText = " $( $Template.Icon ) $( $Template.Title ) "
        $titlePadding = $width - $titleText.Length - 2
        $leftPad = [Math]::Floor($titlePadding / 2)
        $rightPad = [Math]::Ceiling($titlePadding / 2)

        $result.Lines += @{
            Parts = @(
                @{ Text = $border.V; Color = $Colors.Border }
                @{ Text = " " * $leftPad }
                @{ Text = $titleText; Color = $Colors.Error; Style = 'Bold' }
                @{ Text = " " * $rightPad }
                @{ Text = $border.V; Color = $Colors.Border }
            )
        }

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        $result.Lines += @{
            Text = $border.V + ($border.H * ($width - 2)) + $border.V
            Color = $Colors.Border
        }
    }

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    if ($global:UnifiedErrorConfig.ShowTimestamp)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "‚è∞ –í—Ä–µ–º—è: "; Color = $Colors.Info }
                @{ Text = (Get-Date -Format "yyyy-MM-dd HH: mm: ss"); Color = $Colors.Text }
            )
        }
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    $result.Lines += @{
        Parts = @(
            @{ Text = "üìã –°–æ–æ–±—â–µ–Ω–∏–µ: "; Color = $Colors.Warning }
            @{ Text = $ErrorInfo.Message; Color = $Colors.Error; Style = 'Bold' }
        )
    }

    # –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    $result.Lines += @{
        Parts = @(
            @{ Text = "‚ö° –¢–∏–ø: "; Color = $Colors.Info }
            @{ Text = $ErrorInfo.ExceptionType; Color = $Colors.Accent }
        )
    }

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if ($global:UnifiedErrorConfig.ShowCategory)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "; Color = $Colors.Info }
                @{ Text = $ErrorInfo.Category; Color = $Colors.Text }
            )
        }
    }

    # ID –æ—à–∏–±–∫–∏
    if ($global:UnifiedErrorConfig.ShowErrorId)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "üÜî ID: "; Color = $Colors.Info }
                @{ Text = $ErrorInfo.ErrorId; Color = $Colors.Text }
            )
        }
    }

    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if ($global:UnifiedErrorConfig.ShowScriptLocation -and $ErrorInfo.ScriptName)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: "; Color = $Colors.Info }
                @{ Text = "$( $ErrorInfo.ScriptName ): $( $ErrorInfo.Line ): $( $ErrorInfo.Column )"; Color = $Colors.Accent }
            )
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if (Test-Path $ErrorInfo.ScriptName)
        {
            $codeLines = Get-Content $ErrorInfo.ScriptName -ErrorAction SilentlyContinue
            if ($codeLines -and $ErrorInfo.Line -le $codeLines.Count)
            {
                $codeLine = $codeLines[$ErrorInfo.Line - 1]
                $result.Lines += @{
                    Parts = @(
                        @{ Text = "    "; Color = $Colors.Text }
                        @{ Text = $codeLine.Trim(); Color = $Colors.Warning }
                    )
                }
            }
        }
    }

    # –ö–æ–º–∞–Ω–¥–∞
    if ($ErrorInfo.Command)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "üîß –ö–æ–º–∞–Ω–¥–∞: "; Color = $Colors.Info }
                @{ Text = $ErrorInfo.Command; Color = $Colors.Accent }
            )
        }
    }

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if ($global:UnifiedErrorConfig.ShowInnerExceptions -and $ErrorInfo.InnerException)
    {
        $result.Lines += @{
            Text = ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        }
        $result.Lines += @{
            Parts = @(
                @{ Text = "üîç –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: "; Color = $Colors.Warning; Style = 'Bold' }
            )
        }

        $inner = $ErrorInfo.InnerException
        $level = 1
        while ($inner -and $level -le 5)
        {
            $innerMsg = if ($global:UnifiedErrorConfig.AutoTranslate)
            {
                Translate-ErrorMessage -Message $inner.Message -ExceptionType $inner.GetType().Name
            }
            else
            {
                $inner.Message
            }

            $result.Lines += @{
                Parts = @(
                    @{ Text = "  " * $level + "‚îî‚îÄ "; Color = $Colors.Border }
                    @{ Text = $innerMsg; Color = $Colors.Text }
                )
            }
            $inner = $inner.InnerException
            $level++
        }
    }

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if ($global:UnifiedErrorConfig.ShowSuggestions -and $Template.Suggestions)
    {
        $result.Lines += @{
            Text = ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        }
        $result.Lines += @{
            Parts = @(
                @{ Text = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: "; Color = $Colors.Success; Style = 'Bold' }
            )
        }

        foreach ($suggestion in $Template.Suggestions)
        {
            $result.Lines += @{
                Parts = @(
                    @{ Text = "  ‚Ä¢ $suggestion"; Color = $Colors.Success }
                )
            }
        }
    }

    # Stack trace
    if ($global:UnifiedErrorConfig.ShowStackTrace -and $ErrorInfo.StackTrace)
    {
        $result.Lines += @{
            Text = ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        }
        $result.Lines += @{
            Parts = @(
                @{ Text = "üìä Stack Trace: "; Color = $Colors.Info; Style = 'Bold' }
            )
        }

        $stackLines = $ErrorInfo.StackTrace -split "`n" | Select-Object -First 10
        foreach ($line in $stackLines)
        {
            $result.Lines += @{
                Parts = @(
                    @{ Text = "  $line"; Color = $Colors.Text }
                )
            }
        }
    }

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    if ($global:UnifiedErrorConfig.BorderStyle -ne 'None')
    {
        $result.Lines += @{
            Text = $border.BL + ($border.H * ($width - 2)) + $border.BR
            Color = $Colors.Border
        }
    }

    return $result
}

function Format-CompactError
{
    param($ErrorInfo, $Template, $Colors)

    $result = @{
        Lines = @()
    }

    # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    $result.Lines += @{
        Parts = @(
            @{ Text = "$( $Template.Icon ) "; Color = $Colors.Error }
            @{ Text = "["; Color = $Colors.Border }
            @{ Text = $ErrorInfo.ExceptionType; Color = $Colors.Accent }
            @{ Text = "] "; Color = $Colors.Border }
            @{ Text = $ErrorInfo.Message; Color = $Colors.Error; Style = 'Bold' }
        )
    }

    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if ($ErrorInfo.ScriptName)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "   üìç "; Color = $Colors.Info }
                @{ Text = "$( $ErrorInfo.ScriptName ): $( $ErrorInfo.Line )"; Color = $Colors.Text }
            )
        }
    }

    # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if ($Template.Suggestions -and $Template.Suggestions.Count -gt 0)
    {
        $result.Lines += @{
            Parts = @(
                @{ Text = "   "; }
                @{ Text = $Template.Suggestions[0]; Color = $Colors.Success }
            )
        }
    }

    return $result
}

function Format-SingleLineError
{
    param($ErrorInfo, $Template, $Colors)

    @{
        Lines = @(
            @{
                Parts = @(
                    @{ Text = "$( $Template.Icon ) "; Color = $Colors.Error }
                    @{ Text = $ErrorInfo.Message; Color = $Colors.Error }
                    @{ Text = " ["; Color = $Colors.Border }
                    @{ Text = $ErrorInfo.ExceptionType; Color = $Colors.Accent }
                    @{ Text = "]"; Color = $Colors.Border }
                    @{
                        Text = $( if ($ErrorInfo.ScriptName)
                        {
                            " @ $( $ErrorInfo.ScriptName ):$( $ErrorInfo.Line )"
                        }
                        else
                        {
                            ""
                        } ); Color = $Colors.Info
                    }
                )
            }
        )
    }
}

function Format-MinimalError
{
    param($ErrorInfo, $Template, $Colors)

    @{
        Lines = @(
            @{
                Parts = @(
                    @{ Text = "$( $Template.Icon ) $( $ErrorInfo.Message )"; Color = $Colors.Error }
                )
            }
        )
    }
}

#endregion

#region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function Get-ErrorTemplate
{
    param([System.Management.Automation.ErrorRecord]$ErrorRecord)

    $exceptionType = $ErrorRecord.Exception.GetType().Name
    $message = $ErrorRecord.Exception.Message

    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
    foreach ($templateName in $global:ErrorTemplates.Keys)
    {
        $template = $global:ErrorTemplates[$templateName]

        if ($exceptionType -match $templateName -or
                ($template.Pattern -and $message -match $template.Pattern))
        {
            return $template
        }
    }

    # –®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return @{
        Icon = "‚ùó"
        Title = "–û—à–∏–±–∫–∞"
        Severity = "Error"
        Suggestions = @("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã")
    }
}

function Get-ErrorColors
{
    $scheme = $global:ErrorColorSchemes[$global:UnifiedErrorConfig.ColorScheme]
    if (-not $scheme)
    {
        $scheme = $global:ErrorColorSchemes['Dracula']
    }
    return $scheme
}

#region –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –æ—à–∏–±–æ–∫
function Export-Errors
{
    <#
    .SYNOPSIS
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    #>
    param(
        [Parameter(Mandatory)]
        [ValidateSet('JSON', 'XML', 'CSV', 'HTML')]
        [string]$Format,

        [string]$Path = "$env:TEMP\errors_export_$( Get-Date -Format 'yyyyMMdd_HHmmss' ).$($Format.ToLower() )",

    [int]$Last = 0
    )

    if ($Error.Count -eq 0)
    {
    Write-Status -Warning "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
    return
    }

    $errorsToExport = if ($Last -gt 0)
    {
    $Error | Select-Object -First $Last
    }
    else
    {
    $Error
    }

    $exportData = $errorsToExport | ForEach-Object {
    @{
    Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    Type = $_.Exception.GetType().Name
    Message = $_.Exception.Message
    Command = if ($_.InvocationInfo.MyCommand)
    {
    $_.InvocationInfo.MyCommand.Name
    }
    else
    {
    "N/A"
    }
    ScriptName = if ($_.InvocationInfo.ScriptName)
    {
    Split-Path $_.InvocationInfo.ScriptName -Leaf
    }
    else
    {
    "N/A"
    }
    Line = $_.InvocationInfo.ScriptLineNumber
    Column = $_.InvocationInfo.OffsetInLine
    FullyQualifiedErrorId = $_.FullyQualifiedErrorId
    Category = $_.CategoryInfo.Category
    }
    }

    switch ($Format)
    {
    'JSON' {
    $exportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $Path -Encoding UTF8
    }
    'XML' {
    $exportData | Export-Clixml -Path $Path
    }
    'CSV' {
    $exportData | Export-Csv -Path $Path -NoTypeInformation -Encoding UTF8
    }
    'HTML' {
    $html = @"
<!DOCTYPE html>
<html>
<head>
<title>PowerShell Error Report</title>
<style>
body {
font-family: Arial, sans-serif; background: #1e1e1e; color: #fff; }
table {
border-collapse: collapse; width: 100%; margin: 20px 0;
}
th {
background: linear-gradient(45deg, #ff6b6b, #c92a2a); padding: 12px; text-align: left; }
td {
border: 1px solid #444; padding: 8px; }
tr: nth-child(even) {
background: #2a2a2a; }
tr: hover {
background: #3a3a3a; }
.error-type {
color: #ff6b6b; font-weight: bold; }
.timestamp {
color: #4dabf7; }
< /style>
< /head>
<body>
<h1 style = "background: linear-gradient(45deg, #ff6b6b, #c92a2a); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
PowerShell Error Report
< /h1>
<p>Generated: $( Get-Date -Format 'yyyy-MM-dd HH:mm:ss' )< /p>
<table>
<tr>
<th>Timestamp</th>
<th>Type</th>
<th>Message</th>
<th>Command</th>
<th>Location</th>
< /tr>
"@
    foreach ($err in $exportData)
    {
    $html += @"
<tr>
<td class = "timestamp"> $( $err.Timestamp )< /td>
<td class = "error-type"> $( $err.Type )< /td>
<td>$( $err.Message )< /td>
<td>$( $err.Command )< /td>
<td>Line: $( $err.Line ), Col: $( $err.Column )< /td>
< /tr>
"@
    }
    $html += @"
< /table>
< /body>
< /html>
"@
    $html | Out-File -FilePath $Path -Encoding UTF8
    }
    }

    Write-Status -Success "–û—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: $Path"

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    Write-RGB "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª? (Y/N): " -FC "Cyan"
    if ((Read-Host) -eq 'Y')
    {
    Invoke-Item $Path
    }
}
#endregion

function Get-ErrorStatistics
{
    <#
    .SYNOPSIS
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º
    #>
    param(
        [switch]$ShowGraph,
        [switch]$ExportToFile,
        [string]$FilePath = "$env:EMP\error_stats_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
    )

    if ($Error.Count -eq 0) {
    Write-Status -Info "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    return
    }

    Write-RGB "" -newline
    Write-GradientHeader -Title "–ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö" -StartColor "#FF6B6B" -EndColor "#C92A2A"

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    $errorsByType = $Error | Group-Object {
    $_.Exception.GetType().Name
    } |
    Sort-Object Count -Descending

    Write-RGB "`nüìä –ü–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è:" -FC "Cyan" -Style Bold -newline

    $maxCount = ($errorsByType | Measure-Object -Property Count -Maximum).Maximum
    $i = 0

    foreach ($group in $errorsByType) {
    $percentage = [math]::Round(($group.Count / $Error.Count) * 100, 1)
    $barLength = [math]::Round(($group.Count / $maxCount) * 30)

    # –ò–º—è —Ç–∏–ø–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    $color = Get-MenuGradientColor -Index $i -Total $errorsByType.Count -Style "Fire"
    Write-RGB ("  " + $group.Name.PadRight(30)) -FC $color -Style Bold

    # –ì—Ä–∞—Ñ–∏–∫
    if ($ShowGraph) {
    Write-RGB " [" -FC "DarkGray"
    for ($j = 0; $j -lt $barLength; $j++) {
    $barColor = Get-GradientColor -Index $j -TotalItems 30 `
                                             -StartColor "#FF0000" -EndColor "#00FF00"
    Write-RGB "‚ñà" -FC $barColor
    }
    Write-RGB ("]".PadLeft(31 - $barLength)) -FC "DarkGray"
    }

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
    Write-RGB " $($group.Count) " -FC "White" -Style Bold
    Write-RGB "($percentage%)" -FC "Gray" -newline

    $i++
    }

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    $recentErrors = $Error | Where-Object {
    $_.InvocationInfo.PositionMessage -match '\d{4}-\d{2}-\d{2}'
    }

    if ($recentErrors) {
    Write-RGB "`nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:" -FC "Cyan" -Style Bold -newline
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    }

    # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—à–∏–±–∫–∞–º–∏
    $errorsByCommand = $Error | Where-Object {
    $_.InvocationInfo.MyCommand
    } |
    Group-Object {
    $_.InvocationInfo.MyCommand.Name
    } |
    Sort-Object Count -Descending |
    Select-Object -First 5

    if ($errorsByCommand) {
    Write-RGB "`nüîß –¢–æ–ø-5 –∫–æ–º–∞–Ω–¥ —Å –æ—à–∏–±–∫–∞–º–∏:" -FC "Cyan" -Style Bold -newline

    foreach ($cmd in $errorsByCommand) {
    Write-RGB "  ‚Ä¢ " -FC "DarkGray"
    Write-RGB $cmd.Name -FC "Yellow" -Style Bold
    Write-RGB " - " -FC "DarkGray"
    Write-RGB "$($cmd.Count) –æ—à–∏–±–æ–∫" -FC "Red" -newline
    }
    }

    # –°–≤–æ–¥–∫–∞
    Write-RGB "`nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -FC "Cyan" -Style Bold -newline
    Write-RGB "  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: " -FC "Gray"
    Write-RGB $Error.Count -FC "Red" -Style Bold -newline
    Write-RGB "  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: " -FC "Gray"
    Write-RGB $errorsByType.Count -FC "Magenta" -Style Bold -newline
    Write-RGB "  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: " -FC "Gray"
    $criticalCount = $Error | Where-Object {
    $_.Exception -is [System.OutOfMemoryException] -or
    $_.Exception -is [System.StackOverflowException] -or
    $_.Exception -is [System.UnauthorizedAccessException]
    } | Measure-Object | Select-Object -ExpandProperty Count
    Write-RGB $criticalCount -FC "Red" -Style Bold -newline

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
    if ($ExportToFile) {
    $report = @"
–û–¢–ß–ï–¢ –ü–û –û–®–ò–ë–ö–ê–ú
–î–∞—Ç–∞: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
=====================================

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:
$($errorsByType | ForEach-Object {
    "$($_.Name): $($_.Count)"
    } | Out-String)

–ö–û–ú–ê–ù–î–´ –° –û–®–ò–ë–ö–ê–ú–ò:
$($errorsByCommand | ForEach-Object {
    "$($_.Name): $($_.Count)"
    } | Out-String)

–î–ï–¢–ê–õ–ò –ü–û–°–õ–ï–î–ù–ò–• 10 –û–®–ò–ë–û–ö:
$($Error[0..9] | ForEach-Object {
    "---`n–¢–∏–ø: $($_.Exception.GetType().Name)`n–°–æ–æ–±—â–µ–Ω–∏–µ: $($_.Exception.Message)`n"
    } | Out-String)
"@

    $report | Out-File -FilePath $FilePath -Encoding UTF8
    Write-Status -Success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $FilePath"
    }
}

function Find-ErrorPattern
{
    <#
    .SYNOPSIS
        –ò—â–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    #>
    param(
        [Parameter(Mandatory)]
        [string]$Pattern,

        [ValidateSet('Message', 'Type', 'Command', 'All')]
        [string]$SearchIn = 'All',

        [switch]$RegEx
    )

    $results = @()

    foreach ($err in $Error)
    {
        $match = $false

        switch ($SearchIn)
        {
            'Message' {
                $match = if ($RegEx)
                {
                    $err.Exception.Message -match $Pattern
                }
                else
                {
                    $err.Exception.Message -like "*$Pattern*"
                }
            }
            'Type' {
                $match = if ($RegEx)
                {
                    $err.Exception.GetType().Name -match $Pattern
                }
                else
                {
                    $err.Exception.GetType().Name -like "*$Pattern*"
                }
            }
            'Command' {
                if ($err.InvocationInfo.MyCommand)
                {
                    $match = if ($RegEx)
                    {
                        $err.InvocationInfo.MyCommand.Name -match $Pattern
                    }
                    else
                    {
                        $err.InvocationInfo.MyCommand.Name -like "*$Pattern*"
                    }
                }
            }
            'All' {
                $match = if ($RegEx)
                {
                    $err.Exception.Message -match $Pattern -or
                            $err.Exception.GetType().Name -match $Pattern -or
                            ($err.InvocationInfo.MyCommand -and $err.InvocationInfo.MyCommand.Name -match $Pattern)
                }
                else
                {
                    $err.Exception.Message -like "*$Pattern*" -or
                            $err.Exception.GetType().Name -like "*$Pattern*" -or
                            ($err.InvocationInfo.MyCommand -and $err.InvocationInfo.MyCommand.Name -like "*$Pattern*")
                }
            }
        }

        if ($match)
        {
            $results += $err
        }
    }

    if ($results.Count -eq 0)
    {
        Write-Status -Warning "–û—à–∏–±–∫–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '$Pattern' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    }
    else
    {
        Write-Status -Success "–ù–∞–π–¥–µ–Ω–æ $( $results.Count ) –æ—à–∏–±–æ–∫:"
        foreach ($result in $results)
        {
            ConvertTo-Unified ErrorView -InputObject $result -Style Minimal
        }
    }

    return $results
}

function Extract-ErrorInfo
{
    param([System.Management.Automation.ErrorRecord]$ErrorRecord)

    $info = @{
        Message = $ErrorRecord.Exception.Message
        ExceptionType = $ErrorRecord.Exception.GetType().Name
        Category = $ErrorRecord.CategoryInfo.Category
        ErrorId = $ErrorRecord.FullyQualifiedErrorId
        Command = $null
        ScriptName = $null
        Line = 0
        Column = 0
        StackTrace = $ErrorRecord.Exception.StackTrace
        InnerException = $ErrorRecord.Exception.InnerException
        TargetObject = $ErrorRecord.TargetObject
        Timestamp = Get-Date
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    if ($ErrorRecord.InvocationInfo)
    {
        $invocation = $ErrorRecord.InvocationInfo
        $info.Command = $invocation.MyCommand.Name
        if (-not $info.Command)
        {
            $info.Command = $invocation.InvocationName
        }

        $info.ScriptName = $invocation.ScriptName
        $info.Line = $invocation.ScriptLineNumber
        $info.Column = $invocation.OffsetInLine
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if ($info.Message -match "'([^']+)'")
    {
        $info.HighlightedText = $matches[1]
    }

    if ($ErrorRecord.Exception.Message -match "'([^']+)'")
    {
        $path = $matches[1]
        if (Test-Path $path -IsValid)
        {
            $info.Path = $path
            $info.FileName = Split-Path $path -Leaf
        }
    }

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if ($ErrorRecord.Exception -is [System.Management.Automation.ParameterBindingException])
    {
        if ($ErrorRecord.Exception.Message -match "parameter\s+'([^']+)'")
        {
            $info.ArgumentName = $matches[1]
        }
    }



    return $info
}

function Show-ErrorBrowser
{
    <#
    .SYNOPSIS
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫
    #>
    param(
        [int]$PageSize = 5
    )

    if ($Error.Count -eq 0)
    {
        Write-Status -Info "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        return
    }

    $currentPage = 0
    $totalPages = [Math]::Ceiling($Error.Count / $PageSize)

    do
    {
        Clear-Host
        Write-GradientHeader -Title "–ë–†–ê–£–ó–ï–† –û–®–ò–ë–û–ö" -StartColor "#FF6B6B" -EndColor "#C92A2A"

        Write-RGB "`n–°—Ç—Ä–∞–Ω–∏—Ü–∞ " -FC "Gray"
        Write-RGB "$( $currentPage + 1 )" -FC "Cyan" -Style Bold
        Write-RGB " –∏–∑ " -FC "Gray"
        Write-RGB $totalPages -FC "Cyan" -Style Bold
        Write-RGB " (–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: " -FC "Gray"
        Write-RGB $Error.Count -FC "Red" -Style Bold
        Write-RGB ")" -FC "Gray" -newline

        Write-GradientLine -Length 60

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        $startIndex = $currentPage * $PageSize
        $endIndex = [Math]::Min($startIndex + $PageSize - 1, $Error.Count - 1)

        for ($i = $startIndex; $i -le $endIndex; $i++) {
            Write-RGB "`n[$( $i + 1 )] " -FC "DarkCyan" -Style Bold
            ConvertTo-UnifiedErrorView -InputObject $Error[$i] -Style Minimal -NoAnimation
        }

        Write-GradientLine -Length 60

        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        Write-RGB "`n–ö–æ–º–∞–Ω–¥—ã: " -FC "Yellow" -Style Bold
        Write-RGB "[N]" -FC "Cyan" -Style Bold
        Write-RGB "ext, " -FC "Gray"
        Write-RGB "[P]" -FC "Cyan" -Style Bold
        Write-RGB "revious, " -FC "Gray"
        Write-RGB "[G]" -FC "Cyan" -Style Bold
        Write-RGB "oto, " -FC "Gray"
        Write-RGB "[D]" -FC "Cyan" -Style Bold
        Write-RGB "etails, " -FC "Gray"
        Write-RGB "[S]" -FC "Cyan" -Style Bold
        Write-RGB "tats, " -FC "Gray"
        Write-RGB "[E]" -FC "Cyan" -Style Bold
        Write-RGB "xport, " -FC "Gray"
        Write-RGB "[Q]" -FC "Cyan" -Style Bold
        Write-RGB "uit" -FC "Gray" -newline

        Write-RGB "`n–í—ã–±–æ—Ä: " -FC "White"
        $choice = Read-Host

        switch ( $choice.ToUpper())
        {
            'N' {
                if ($currentPage -lt $totalPages - 1)
                {
                    $currentPage++
                }
                else
                {
                    Write-Status -Warning "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    Start-Sleep -Seconds 1
                }
            }
            'P' {
                if ($currentPage -gt 0)
                {
                    $currentPage--
                }
                else
                {
                    Write-Status -Warning "–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    Start-Sleep -Seconds 1
                }
            }
            'G' {
                Write-RGB "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-$totalPages): " -FC "Cyan"
                $pageNum = Read-Host
                if ($pageNum -match '^\d+$' -and [int]$pageNum -ge 1 -and [int]$pageNum -le $totalPages)
                {
                    $currentPage = [int]$pageNum - 1
                }
                else
                {
                    Write-Status -Error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                    Start-Sleep -Seconds 1
                }
            }
            'D' {
                Write-RGB "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: " -FC "Cyan"
                $errNum = Read-Host
                if ($errNum -match '^\d+$' -and [int]$errNum -ge 1 -and [int]$errNum -le $Error.Count)
                {
                    Clear-Host
                    Write-GradientHeader -Title "–î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò #$errNum"
                    ConvertTo-UnifiedErrorView -InputObject $Error[[int]$errNum - 1] -Style Modern
                    Write-RGB "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -FC "DarkGray"
                    Read-Host
                }
            }
            'S' {
                Clear-Host
                Get-ErrorStatistics -ShowGraph
                Write-RGB "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -FC "DarkGray"
                Read-Host
            }
            'E' {
                Write-RGB "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (JSON/XML/CSV/HTML): " -FC "Cyan"
                $format = Read-Host
                if ($format -in @('JSON', 'XML', 'CSV', 'HTML'))
                {
                    Export-Errors -Format $format
                    Start-Sleep -Seconds 2
                }
            }
        }
    } while ($choice.ToUpper() -ne 'Q')

    Clear-Host
    Write-Status -Info "–ë—Ä–∞—É–∑–µ—Ä –æ—à–∏–±–æ–∫ –∑–∞–∫—Ä—ã—Ç"
}

function Translate-ErrorMessage
{
    param(
        [string]$Message,
        [string]$ExceptionType
    )

    if ($global:UnifiedErrorConfig.Language -ne "ru")
    {
        return $Message
    }

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É
    if ($global:ErrorTranslations.ContainsKey($ExceptionType))
    {
        return $global:ErrorTranslations[$ExceptionType]
    }

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    foreach ($pattern in $global:ErrorTranslations.Keys)
    {
        if ($Message -match $pattern)
        {
            $translation = $global:ErrorTranslations[$pattern]

            # –ó–∞–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –∑–∞—Ö–≤–∞—Ç–∞
            if ($matches.Count -gt 1)
            {
                for ($i = 1; $i -lt $matches.Count; $i++) {
                    $translation = $translation -replace "\$$i", $matches[$i]
                }
            }

            return $translation
        }
    }

    return $Message
}

function Show-CriticalErrorNotification
{
    param([System.Management.Automation.ErrorRecord]$ErrorRecord)

    # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    5..1 | ForEach-Object {
        Write-RGB "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! üö®" -FC "Red" -BC "DarkRed" -Style @('Bold', 'Blink')
        Start-Sleep -Milliseconds 200
        Write-Host "`r                            `r" -NoNewline
        Start-Sleep -Milliseconds 200
    }

    # –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if ($global:ErrorViewConfig.PlaySound)
    {
        [console]::beep(1000, 500)
        [console]::beep(800, 500)
    }
}

function Show-ErrorAnimation
{
    # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    $frames = @('‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è')

    foreach ($frame in $frames)
    {
        Write-Host "`r$frame –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏..." -NoNewline -ForegroundColor Red
        Start-Sleep -Milliseconds 50
    }
    Write-Host "`r                        `r" -NoNewline
}
function ConvertTo-UnifiedErrorView {
    <#
    .SYNOPSIS
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫

    .PARAMETER InputObject
        –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏

    .PARAMETER Style
        –°—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: Modern, Classic, Minimal, Gradient, SingleLine

    .PARAMETER NoAnimation
        –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    #>
    [CmdletBinding()]
    param(
        [System.Management.Automation.ErrorRecord]$InputObject,

        [ValidateSet('Modern', 'Classic', 'Minimal', 'Gradient', 'SingleLine')]
        [string]$Style = $global:ErrorViewConfig.ErrorStyle,

        [switch]$NoAnimation
    )

    process {
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –¥–µ—Ç–∞–ª–∏
        $template = Get-ErrorTemplate -ErrorRecord $InputObject
        $details = Extract-ErrorDetails -ErrorRecord $InputObject
        $colorScheme = $global:ErrorViewConfig.ColorSchemes[$template.Severity]

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $details.Message = Translate-ErrorMessage -Message $details.Message `
                                                 -ExceptionType $InputObject.Exception.GetType().Name

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        switch ($Style) {
            'Modern' { Show-ModernError @PSBoundParameters }
            'Classic' { Show-ClassicError @PSBoundParameters }
            'Minimal' { Show-MinimalError @PSBoundParameters }
            'Gradient' { Show-GradientError @PSBoundParameters }
            'SingleLine' { Show-SingleLineError @PSBoundParameters }
        }

        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ($global:ErrorViewConfig.LogErrors) {
            Log-Error -ErrorRecord $InputObject -Style $Style
        }

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if ($global:ErrorViewConfig.NotifyOnCritical -and $template.Severity -eq 'Critical') {
            Show-CriticalErrorNotification -ErrorRecord $InputObject
        }
    }
}

# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
Set-Alias -Name ConvertTo-ColorfulErrorView -Value ConvertTo-UnifiedErrorView
Set-Alias -Name ConvertTo-SmartErrorView -Value ConvertTo-UnifiedErrorView
#endregion

#region –°—Ç–∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
function Show-ModernError {
    param($InputObject, $template, $details, $colorScheme, $NoAnimation)

    # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if ($global:ErrorViewConfig.AnimateErrors -and -not $NoAnimation) {
        Show-ErrorAnimation
    }

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    Write-GradientLine -Length 60 -Char "‚îÅ" `
                      -StartColor $colorScheme.Start `
                      -EndColor $colorScheme.End

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
    Write-RGB " $($colorScheme.Icon) " -FC $colorScheme.Start -Style Bold
    Write-GradientText -Text "–û–®–ò–ë–ö–ê: " -StartColor $colorScheme.Start -EndColor $colorScheme.End -NoNewline
    Write-RGB $details.Message -FC "White" -Style Bold -newline

    # –î–µ—Ç–∞–ª–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    if ($global:ErrorViewConfig.ShowErrorPosition -and $InputObject.InvocationInfo.ScriptLineNumber) {
        Write-RGB "    üìç " -FC "Silver"
        Write-RGB "–ü–æ–∑–∏—Ü–∏—è: " -FC "DarkGray"
        Write-RGB "–°—Ç—Ä–æ–∫–∞ " -FC "Gray"
        Write-RGB $InputObject.InvocationInfo.ScriptLineNumber -FC "White" -Style Bold
        Write-RGB ", –ö–æ–ª–æ–Ω–∫–∞ " -FC "Gray"
        Write-RGB $InputObject.InvocationInfo.OffsetInLine -FC "White" -Style Bold -newline
    }

    if ($details.Command) {
        Write-RGB "    üîß " -FC "Silver"
        Write-RGB "–ö–æ–º–∞–Ω–¥–∞: " -FC "DarkGray"
        Write-RGB $details.Command -FC "Cyan" -Style Bold -newline
    }

    if ($InputObject.Exception.GetType().Name -ne "RuntimeException") {
        Write-RGB "    ‚ö° " -FC "Silver"
        Write-RGB "–¢–∏–ø: " -FC "DarkGray"
        Write-RGB $InputObject.Exception.GetType().Name -FC "Magenta" -newline
    }

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if ($global:ErrorViewConfig.ShowSuggestions -and $template.Suggestion) {
        Write-RGB "`n    $($template.Suggestion)" -FC "LimeGreen" -newline

        if ($template.Actions.Count -gt 0) {
            Write-RGB "    üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:" -FC "DarkCyan" -newline
            foreach ($action in $template.Actions) {
                # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                $action = $action -replace '\{Command\}', $details.Command
                $action = $action -replace '\{Path\}', $details.Path
                $action = $action -replace '\{FileName\}', $details.FileName

                Write-RGB "       ‚Ä¢ " -FC "DarkGray"
                Write-RGB $action -FC "Cyan" -newline
            }
        }
    }

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if ($global:ErrorViewConfig.ShowInnerExceptions -and $InputObject.Exception.InnerException) {
        Write-RGB "`n    üîç –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: " -FC "DarkYellow"
        $innerMessage = Translate-ErrorMessage -Message $InputObject.Exception.InnerException.Message `
                                             -ExceptionType $InputObject.Exception.InnerException.GetType().Name
        Write-RGB $innerMessage -FC "Yellow" -newline
    }

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    if ($global:ErrorViewConfig.ShowTimestamp) {
        Write-RGB "`n    üïê " -FC "DarkGray"
        Write-RGB (Get-Date -Format "yyyy-MM-dd HH:mm:ss") -FC "Gray" -newline
    }

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Write-GradientLine -Length 60 -Char "‚îÅ" `
                      -StartColor $colorScheme.End `
                      -EndColor $colorScheme.Start
}

function Show-GradientError {
    param($InputObject, $template, $details, $colorScheme)

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    $lines = @(
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
        "‚ïë  $($colorScheme.Icon)  –û–®–ò–ë–ö–ê                                          ‚ïë",
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£",
        "‚ïë  $($details.Message.PadRight(52))  ‚ïë",
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    )

    $lineIndex = 0
    foreach ($line in $lines) {
        $chars = $line.ToCharArray()
        for ($i = 0; $i -lt $chars.Length; $i++) {
            $color = Get-GradientColor -Index $i -TotalItems $chars.Length `
                                     -StartColor $colorScheme.Start `
                                     -EndColor $colorScheme.End `
                                     -GradientType "Sine"
            Write-RGB $chars[$i] -FC $color
        }
        Write-Host ""
    }
}

function Show-MinimalError {
    param($InputObject, $template, $details, $colorScheme)

    Write-RGB "$($colorScheme.Icon) " -FC $colorScheme.Start
    Write-RGB $details.Message -FC "White" -Style Bold

    if ($details.Command) {
        Write-RGB " [$($details.Command)]" -FC "DarkGray"
    }

    Write-Host ""
}

function Show-SingleLineError {
    param($InputObject, $template, $details, $colorScheme)

    $parts = @()

    $parts += "$($colorScheme.Icon) $($details.Message)"

    if ($InputObject.InvocationInfo.ScriptLineNumber) {
        $parts += "[L:$($InputObject.InvocationInfo.ScriptLineNumber)]"
    }

    if ($details.Command) {
        $parts += "[Cmd:$($details.Command)]"
    }

    $parts += "[$(Get-Date -Format 'HH:mm:ss')]"

    Write-RGB ($parts -join " ") -FC $colorScheme.Start -newline
}
#endregion

#region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function Get-ErrorTemplate {
    param([System.Management.Automation.ErrorRecord]$ErrorRecord)

    $exceptionType = $ErrorRecord.Exception.GetType().Name
    $message = $ErrorRecord.Exception.Message

    foreach ($templateKey in $global:ErrorTemplates.Keys) {
        if ($templateKey -eq "Default") { continue }

        $templateInfo = $global:ErrorTemplates[$templateKey]

        if ($exceptionType -match $templateKey -or
                ($templateInfo.Pattern -and $message -match $templateInfo.Pattern)) {
            return $templateInfo
        }
    }

    return $global:ErrorTemplates["Default"]
}

function Extract-ErrorDetails {
    param([System.Management.Automation.ErrorRecord]$ErrorRecord)

    $details = @{
        Command = ""
        Path = ""
        FileName = ""
        ArgumentName = ""
        Message = $ErrorRecord.Exception.Message
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if ($ErrorRecord.InvocationInfo) {
        $details.Command = if ($ErrorRecord.InvocationInfo.MyCommand) {
            $ErrorRecord.InvocationInfo.MyCommand.Name
        } else {
            $ErrorRecord.InvocationInfo.InvocationName
        }
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏ –∏ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if ($ErrorRecord.Exception.Message -match "'([^']+)'") {
        $path = $matches[1]
        if (Test-Path $path -IsValid) {
            $details.Path = $path

            $details.FileName = Split-Path $path -Leaf
        }
    }

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if ($ErrorRecord.Exception -is [System.Management.Automation.ParameterBindingException]) {
        if ($ErrorRecord.Exception.Message -match "parameter\s+'([^']+)'") {
            $details.ArgumentName = $matches[1]
        }
    }

    return $details
}

Set-Alias -Name err -Value Show-RecentErrors -Force
Set-Alias -Name errs -Value Get-ErrorStatistics -Force
Set-Alias -Name errb -Value Show-ErrorBrowser -Force
Set-Alias -Name errf -Value Find-ErrorPattern -Force
Set-Alias -Name erre -Value Export-Errors -Force

# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
function Clear-Errors
{
    param([switch]$Force)

    if ($Error.Count -eq 0)
    {
        Write-Status -Info "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
        return
    }

    if (-not $Force)
    {
        Write-RGB "–û—á–∏—Å—Ç–∏—Ç—å " -FC "Yellow"
        Write-RGB $Error.Count -FC "Red" -Style Bold
        Write-RGB " –æ—à–∏–±–æ–∫? (Y/N): " -FC "Yellow"

        if ((Read-Host).ToUpper() -ne 'Y')
        {
            Write-Status -Warning "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            return
        }
    }

    $count = $Error.Count
    $Error.Clear()
    Write-Status -Success "–û—á–∏—â–µ–Ω–æ $count –æ—à–∏–±–æ–∫"
}
#endregion

function Set-ErrorViewStyle
{
    <#
    .SYNOPSIS
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    #>
    param(
        [Parameter(Mandatory)]
        [ValidateSet('Modern', 'Classic', 'Minimal', 'Gradient', 'SingleLine')]
        [string]$Style
    )

    $global:ErrorViewConfig.ErrorStyle = $Style
    $global:ErrorViewConfig | Format-Li–´—Ä *
    Write-Status -Success "–°—Ç–∏–ª—å –æ—à–∏–±–æ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: $Style"
}
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö


function Show-ErrorViewConfig
{
    <#
    .SYNOPSIS
        –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    #>

    Write-GradientHeader -Title "–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ERROR HANDLER" `
                        -StartColor "#FF6B6B" -EndColor "#C92A2A"

    Write-RGB "`nüìã –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:" -FC "Cyan" -Style Bold -newline

    $config = $global:ErrorViewConfig
    $i = 0

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $config.GetEnumerator() | Where-Object { $_.Key -ne 'ColorSchemes' } | Sort-Object Key | ForEach-Object {
        $gradientColor = Get-GradientColor -Index $i -TotalItems 10 `
                                          -StartColor "#00BFFF" -EndColor "#8B00FF"

        Write-RGB "   " -FC "White"
        Write-RGB $_.Key.PadRight(20) -FC $gradientColor -Style Bold
        Write-RGB " : " -FC "DarkGray"

        $value = switch ($_.Value)
        {
            { $_ -is [bool] } {
                if ($_)
                {
                    "‚úÖ –í–∫–ª—é—á–µ–Ω–æ"
                }
                else
                {
                    "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
                }
            }
            default {
                $_.ToString()
            }
        }

        Write-RGB $value -FC "White" -newline
        $i++
    }

    Write-RGB "`nüé® –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã:" -FC "Cyan" -Style Bold -newline

    foreach ($scheme in $config.ColorSchemes.GetEnumerator())
    {
        Write-RGB "   $( $scheme.Key ): " -FC "White"
        Write-GradientLine -Length 20 -StartColor $scheme.Value.Start `
                          -EndColor $scheme.Value.End -Char "‚ñà"
    }
}

function Test-ErrorStyles
{
    <#
    .SYNOPSIS
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    #>

    Write-GradientHeader -Title "–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–¢–ò–õ–ï–ô –û–®–ò–ë–û–ö"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
    $testError = $null
    try
    {
        Get-Item "C:\–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–§–∞–π–ª123.txt" -ErrorAction Stop
    }
    catch
    {
        $testError = $_
    }

    if ($testError)
    {
        $styles = @('Modern', 'Gradient', 'Minimal', 'SingleLine')

        foreach ($style in $styles)
        {
            Write-RGB "`n=== –°—Ç–∏–ª—å: $style ===" -FC "Cyan" -Style Bold -newline
            ConvertTo-Unified ErrorView -InputObject $testError -Style
            Write-RGB "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∏–ª—è..." -FC "DarkGray"
            Read-Host
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
function Show-RecentErrors
{
    param(
        [int]$Count = 5,
        [string]$Style = $global:ErrorViewConfig.ErrorStyle
    )

    if ($Error.Count -eq 0)
    {
        Write-Status -Success "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!"
        return
    }

    Write-GradientHeader -Title "–ü–û–°–õ–ï–î–ù–ò–ï $Count –û–®–ò–ë–û–ö"

    $errorsToShow = if ($Error.Count -lt $Count)
    {
        $Error
    }
    else
    {
        $Error[0..($Count - 1)]
    }

    $i = 0
    foreach ($err in $errorsToShow)
    {
        Write-RGB "`n[$( $i + 1 )]" -FC "DarkCyan" -Style Bold
        ConvertTo-UnifiedErrorView -InputObject $err -Style $Style -NoAnimation
        $i++
    }
}


function Write-FormattedError
{
    param($FormattedError, [switch]$NoColor)

    foreach ($line in $FormattedError.Lines)
    {
        if ($line.Parts)
        {
            # –°—Ç—Ä–æ–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
            foreach ($part in $line.Parts)
            {
                if ($NoColor)
                {
                    Write-Host $part.Text -NoNewline
                }
                else
                {
                    $params = @{
                        Text = $part.Text
                    }
                    if ($part.Color)
                    {
                        $params.FC = $part.Color
                    }
                    if ($part.Style)
                    {
                        $params.Style = $part.Style
                    }

                    Write-RGB @params
                }
            }
            Write-Host ""  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        }
        elseif ($line.Text -ne $null)
        {
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            if ($NoColor)
            {
                Write-Host $line.Text
            }
            else
            {
                $params = @{
                    Text = $line.Text
                    newline = $true
                }
                if ($line.Color)
                {
                    $params.FC = $line.Color
                }
                if ($line.Style)
                {
                    $params.Style = $line.Style
                }

                Write-RGB @params
            }
        }
        else
        {
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            Write-Host ""
        }
    }
}

function Get-BorderChars
{
    param([string]$Style)

    $borders = @{
        'Single' = @{
            TL = "‚îå"; TR = "‚îê"; BL = "‚îî"; BR = "‚îò"; H = "‚îÄ"; V = "‚îÇ"
        }
        'Double' = @{
            TL = "‚ïî"; TR = "‚ïó"; BL = "‚ïö"; BR = "‚ïù"; H = "‚ïê"; V = "‚ïë"
        }
        'Rounded' = @{
            TL = "‚ï≠"; TR = "‚ïÆ"; BL = "‚ï∞"; BR = "‚ïØ"; H = "‚îÄ"; V = "‚îÇ"
        }
        'Heavy' = @{
            TL = "‚îè"; TR = "‚îì"; BL = "‚îó"; BR = "‚îõ"; H = "‚îÅ"; V = "‚îÉ"
        }
    }

    return $borders[$Style]
}

function Enable-SmartErrorHandler
{
    $global:ErrorView = {
        param($ErrorRecord)
        ConvertTo-UnifiedErrorView  $ErrorRecord
    }

    Write-Status -Success "–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∫–ª—é—á–µ–Ω!"
    Write-RGB "–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: " -FC "Gray"
    Write-RGB $global:ErrorViewConfig.ErrorStyle -FC "Cyan" -Style Bold -newline
}

function Disable-SmartErrorHandler
{
    $global:ErrorView = "CategoryView"
    Write-Status -Warning "–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω"
}


Enable-SmartErrorHandler

Write-RGB "`n‚ú® " -FC "GoldRGB"
Write-GradientText -Text "Advanced Error Handler v2.0" `
                   -StartColor "#FF6B6B" -EndColor "#4ECDC4" `
                   -NoNewline
Write-RGB " –∑–∞–≥—Ä—É–∂–µ–Ω!" -FC "GoldRGB" -newline

Write-RGB "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " -FC "Gray"
Write-RGB "Show-ErrorViewConfig" -FC "Cyan" -Style Bold
Write-RGB " –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫" -FC "Gray" -newline

Write-RGB "–ò–ª–∏ " -FC "Gray"
Write-RGB "Test-ErrorStyles" -FC "Cyan" -Style Bold
Write-RGB " –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π" -FC "Gray" -newline

Write-RGB "`nüìö –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -FC "Cyan" -Style Bold -newline
Write-RGB "  ‚Ä¢ " -FC "DarkGray"
Write-RGB "Get-ErrorStatistics" -FC "Yellow"
Write-RGB " (errs)" -FC "DarkGray"
Write-RGB " - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫" -FC "Gray" -newline

Write-RGB "  ‚Ä¢ " -FC "DarkGray"
Write-RGB "Show-ErrorBrowser" -FC "Yellow"
Write-RGB " (errb)" -FC "DarkGray"
Write-RGB " - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä" -FC "Gray" -newline

Write-RGB "  ‚Ä¢ " -FC "DarkGray"
Write-RGB "Find-ErrorPattern" -FC "Yellow"
Write-RGB " (errf)" -FC "DarkGray"
Write-RGB " - –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫" -FC "Gray" -newline

Write-RGB "  ‚Ä¢ " -FC "DarkGray"
Write-RGB "Export-Errors" -FC "Yellow"
Write-RGB " (erre)" -FC "DarkGray"
Write-RGB " - —ç–∫—Å–ø–æ—Ä—Ç –æ—à–∏–±–æ–∫" -FC "Gray" -newline

Write-RGB "  ‚Ä¢ " -FC "DarkGray"
Write-RGB "Clear-Errors" -FC "Yellow"
Write-RGB " - –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º" -FC "Gray" -newline


#. (Join-Path $PSScriptRoot 'ErrorTest.ps1')
