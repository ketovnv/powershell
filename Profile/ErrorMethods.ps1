

Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1") -start
# Advanced ErrorView Handler with Templates and Translation
# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º

#region –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
$ErrorViewConfig = @{
    Language = "ru"  # ru, en
    AutoTranslate = $true
    ShowStackTrace = $false
    ShowInnerExceptions = $true
    UseColors = $true
    LogErrors = $true
    LogPath = "$env:TEMP\PowerShell_Errors.log"
    NotifyOnCritical = $true
}

# –®–∞–±–ª–æ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
$ErrorTranslations = @{
# –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "Access is denied" = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"
    "The term .* is not recognized" = "–ö–æ–º–∞–Ω–¥–∞ '{}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
    "Cannot find path" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å"
    "Cannot find drive" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–∏—Å–∫"
    "The file .* cannot be found" = "–§–∞–π–ª '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Cannot convert value" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
    "Attempted to divide by zero" = "–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"
    "Object reference not set" = "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    "Index was outside the bounds" = "–ò–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞"
    "The property .* cannot be found" = "–°–≤–æ–π—Å—Ç–≤–æ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    "Cannot validate argument" = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç"
    "Parameter .* cannot be found" = "–ü–∞—Ä–∞–º–µ—Ç—Ä '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Network path was not found" = "–°–µ—Ç–µ–≤–æ–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "Access to the path .* is denied" = "–î–æ—Å—Ç—É–ø –∫ –ø—É—Ç–∏ '{}' –∑–∞–ø—Ä–µ—â—ë–Ω"

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    "CommandNotFoundException" = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    "ParameterBindingException" = "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
    "ArgumentException" = "–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç"
    "UnauthorizedAccessException" = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
    "FileNotFoundException" = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    "DirectoryNotFoundException" = "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    "PathTooLongException" = "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å"
    "InvalidOperationException" = "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
    "NotSupportedException" = "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    "TimeoutException" = "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    "NetworkException" = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
}

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
$ErrorTemplates = @{
    "CommandNotFoundException" = @{
        Icon = "‚ùå"
        Pattern = "CommandNotFoundError"
        Template = "{Icon} –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{Command}'"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å"
        Color = "Red"
    }

    "ParameterBindingException" = @{
        Icon = "‚öôÔ∏è"
        Pattern = "ParameterBinding"
        Template = "{Icon} –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {Message}"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        Color = "Yellow"
    }

    "UnauthorizedAccessException" = @{
        Icon = "üîí"
        Pattern = "Access.*denied"
        Template = "{Icon} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {Path}"
        Suggestion = "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        Color = "Magenta"
    }

    "FileNotFoundException" = @{
        Icon = "üìÑ"
        Pattern = "cannot find.*file"
        Template = "{Icon} –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: '{FileName}'"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"
        Color = "Blue"
    }

    "DirectoryNotFoundException" = @{
        Icon = "üìÅ"
        Pattern = "cannot find.*path"
        Template = "{Icon} –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{Path}'"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ"
        Color = "Blue"
    }

    "InvalidOperationException" = @{
        Icon = "‚ö†Ô∏è"
        Pattern = "Invalid.*operation"
        Template = "{Icon} –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {Message}"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
        Color = "DarkYellow"
    }

    "ArgumentException" = @{
        Icon = "üìù"
        Pattern = "Argument.*exception"
        Template = "{Icon} –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {ArgumentName}"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
        Color = "Cyan"
    }

    "NetworkException" = @{
        Icon = "üåê"
        Pattern = "network.*error|connection.*failed"
        Template = "{Icon} –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {Message}"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        Color = "DarkRed"
    }

    "TimeoutException" = @{
        Icon = "‚è∞"
        Pattern = "timeout|timed.*out"
        Template = "{Icon} –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {Message}"
        Suggestion = "üí° –£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        Color = "DarkMagenta"
    }

    "ParseException" = @{
        Icon = "üìã"
        Pattern = "parse.*error|syntax.*error"
        Template = "{Icon} –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {Message}"
        Suggestion = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç–∞"
        Color = "Red"
    }

    "Default" = @{
        Icon = "‚ùó"
        Template = "{Icon} {Message}"
        Suggestion = ""
        Color = "White"
    }
}
#endregion

function Show-RecentErrors
{
    param(
        [int]$Count = 5,
        [string]$View = "Colorful"
    )

    wrgb "–ü–æ—Å–ª–µ–¥–Ω–∏–µ $Count –æ—à–∏–±–æ–∫ (–≤–∏–¥: $View):" -FC Yellow -newline
    if ($Error.Count -gt 0)
    {
        $ErrorsToShow = if ($Error.Count -lt $Count)
        {
            $Error
        }
        else
        {
            $Error[0..($Count - 1)]
        }
        $ErrorsToShow | Format-Error $View
    }
    else
    {
        wrgb "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è" -FC Green
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
function Get-ErrorSummary
{
    if ($Error.Count -eq 0)
    {
        wrgb "–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏" -FC Green
        return
    }

    wrgb "`n--- –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º ---" -FC Yellow -newline

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    $ErrorsByType = $Error | Group-Object { $_.Exception.GetType().Name } | Sort-Object Count -Descending

    wrgb "–ü–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è:" -FC Material_Orange -newline
    $ErrorsByType | ForEach-Object {
        wrgb   $_.Name" : " -FC Material_Purple
        wrgb   $_.Count" " -FC Material_Comment
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $ErrorsByCategory = $Error | Group-Object { $_.CategoryInfo.Category } | Sort-Object Count -Descending

    wrgb "`n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:" -FC Material_Orange -newline
    $ErrorsByCategory | ForEach-Object {
        wrgb   $_.Name" : " -FC Material_Purple
        wrgb   $_.Count" " -FC Material_Comment
    }

    wrgb "`n–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:  "  -FC "FF0000"
    wrgb $Error.Count -FC "FFFFFF" -newline
}


Import-Module ErrorView -Force
$global:ErrorView = "Smart"

function Set-MyErrorView
{
    param(
        [ValidateSet("Simple", "Normal", "Category", "Full", "SingleLine", "Colorful")]
        [string]$View = "Simple"
    )

    $global:ErrorView = $View
    wrgb "ErrorView —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $View" -FC Green
}



function ConvertTo-SingleLineErrorView
{
    param([System.Management.Automation.ErrorRecord]$InputObject)
    -join @(
        $originInfo = &{ Set-StrictMode -Version 1; $InputObject.OriginInfo }
    if (($null -ne $originInfo) -and ($null -ne $originInfo.PSComputerName))
    {
        "[" + $originInfo.PSComputerName + "]: "
    }
        $errorDetails = &{ Set-StrictMode -Version 1; $InputObject.ErrorDetails }
    if (($null -ne $errorDetails) -and ($null -ne $errorDetails.Message) -and ($InputObject.FullyQualifiedErrorId -ne "NativeCommandErrorMessage"))
    {
        $errorDetails.Message
    }
    else
    {
        $InputObject.Exception.Message
    }
        wrgb "Type:  "  -FC "#ff99AA"
        wrgb $InputObject.Exception.GetType().Name -FC "#ff0000"
        wrgb "  |  "  -FC "#ffFFFF"
        wrgb "  ID:  " -FC "#ff99AA"
        wrgb  $InputObject.FullyQualifiedErrorId -FC "#ff0000"
        wrgb "  |  "  -FC "#ffFFFF"

    if ($ErrorViewRecurse)
    {
        $Prefix = " | Exception: "
        $Exception = &{ Set-StrictMode -Version 1; $InputObject.Exception }
        do
        {
            $Prefix + $Exception.GetType().FullName
            $Prefix = wrgb " | "  -FC "#ffFFFF"
            $Prefix = wrgb "InnerException:  "  -FC "#ff99AA"
        } while ($Exception = $Exception.InnerException)
    }
    )
}



#region –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —à–∞–±–ª–æ–Ω–∞–º–∏
function Translate-ErrorMessage
{
    param(
        [string]$Message,
        [string]$ExceptionType
    )

    if (-not $ErrorViewConfig.AutoTranslate -or $ErrorViewConfig.Language -eq "en")
    {
        return $Message
    }

    $translatedMessage = $Message

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if ( $ErrorTranslations.ContainsKey($ExceptionType))
    {
        return $ErrorTranslations[$ExceptionType]
    }

    # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    foreach ($pattern in $ErrorTranslations.Keys)
    {
        if ($Message -match $pattern)
        {
            $translatedMessage = $ErrorTranslations[$pattern]
            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ regex
            if ($matches.Count -gt 1)
            {
                for ($i = 1; $i -lt $matches.Count; $i++) {
                    $translatedMessage = $translatedMessage -replace "\{\}", $matches[$i]
                }
            }
            break
        }
    }

    return $translatedMessage
}

function Get-ErrorTemplate
{
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord
    )

    $exceptionType = $ErrorRecord.Exception.GetType().Name
    $message = $ErrorRecord.Exception.Message

    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
    $template = $ErrorTemplates["Default"]

    foreach ($templateKey in $ErrorTemplates.Keys)
    {
        if ($templateKey -eq "Default")
        {
            continue
        }

        $templateInfo = $ErrorTemplates[$templateKey]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if ($exceptionType -match $templateKey)
        {
            $template = $templateInfo
            break
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if ($templateInfo.Pattern -and $message -match $templateInfo.Pattern)
        {
            $template = $templateInfo
            break
        }
    }

    return $template
}

function Extract-ErrorDetails
{
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord
    )

    $details = @{
        Command = ""
        Path = ""
        FileName = ""
        ArgumentName = ""
        Message = $ErrorRecord.Exception.Message
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    if ($ErrorRecord.InvocationInfo -and $ErrorRecord.InvocationInfo.MyCommand)
    {
        $details.Command = $ErrorRecord.InvocationInfo.MyCommand.Name
    }
    elseif ($ErrorRecord.InvocationInfo -and $ErrorRecord.InvocationInfo.InvocationName)
    {
        $details.Command = $ErrorRecord.InvocationInfo.InvocationName
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if ($ErrorRecord.Exception.Message -match "'([^']+)'")
    {
        $details.Path = $matches[1]
        $details.FileName = Split-Path $matches[1] -Leaf
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è ParameterBindingException
    if ($ErrorRecord.Exception.GetType().Name -eq "ParameterBindingException")
    {
        if ($ErrorRecord.Exception.Message -match "parameter\s+'([^']+)'")
        {
            $details.ArgumentName = $matches[1]
        }
    }

    return $details
}


function Log-Error
{
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord,
        [string]$FormattedMessage

    )

    if (-not $ErrorViewConfig.LogErrors)
    {
        return
    }

    $logEntry = @"
[$( Get-Date -Format 'yyyy-MM-dd HH:mm:ss' )] ERROR
Type: $( $ErrorRecord.Exception.GetType().Name )
Message: $( $ErrorRecord.Exception.Message )
Formatted: $FormattedMessage
Command: $( $ErrorRecord.InvocationInfo.MyCommand.Name )
Line: $( $ErrorRecord.InvocationInfo.ScriptLineNumber )
Script: $( $ErrorRecord.InvocationInfo.ScriptName )
---

"@

    Add-Content -Path $ErrorViewConfig.LogPath -Value $logEntry -Encoding UTF8
}
#endregion

#region –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function ConvertTo-SmartErrorView
{
    [CmdletBinding()]
    param(
        [System.Management.Automation.ErrorRecord]$InputObject
    )

    try
    {
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ—à–∏–±–∫–∏
        $template = Get-ErrorTemplate -ErrorRecord $InputObject


        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        $details = Extract-ErrorDetails -ErrorRecord $InputObject

        # –ï—Å–ª–∏  ObjectNotFound —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–æ –æ–ø–µ—á–∞—Ç–∫–æ–π
        if ($InputObject.CategoryInfo.Category -eq "ObjectNotFound")
        {
            $output = ""
            if ($InputObject.Exception.Message -match "The term ['`"](.+?)['`"] is not recognized")
            {
                $commandName = $matches[1]
                $output += wrgb "üòà "$commandName -FC Material_Orange -newline
            }
            $output += wrgb  "üëª –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, "  -FC "Material_Yellow"
            $output += wrgb  "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üòä"  -FC "#1177CC" -newline
            $output
             gh $commandName | d
        }


        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $translatedMessage = Translate-ErrorMessage -Message $details.Message -ExceptionType $InputObject.Exception.GetType().Name
        $details.Message = $translatedMessage

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
        $formattedMessage = $template.Template
        foreach ($key in $details.Keys)
        {
            $formattedMessage = $formattedMessage -replace "\{$key\}", $details[$key]
        }
        $formattedMessage = $formattedMessage -replace "\{Icon\}", $template.Icon
        $formattedMessage = "üî¥"+  "$formattedMessage" +"üî¥"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
        if ($InputObject.InvocationInfo -and $InputObject.InvocationInfo.ScriptLineNumber)
        {
            $location = "üìç –°—Ç—Ä–æ–∫–∞: $( $InputObject.InvocationInfo.ScriptLineNumber )"
            if ($InputObject.InvocationInfo.ScriptName)
            {
                $scriptName = Split-Path $InputObject.InvocationInfo.ScriptName -Leaf
                $location += ", –§–∞–π–ª: $scriptName"
            }
            $formattedMessage += "`n$location"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if ($template.Suggestion)
        {
            $formattedMessage += "`nüìã$( $template.Suggestion )üìã"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
        if ($ErrorViewConfig.ShowInnerExceptions -and $InputObject.Exception.InnerException)
        {
            $innerEx = $InputObject.Exception.InnerException
            $innerMessage = Translate-ErrorMessage -Message $innerEx.Message -ExceptionType $innerEx.GetType().Name
            $formattedMessage += "`nüîç –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: $innerMessage"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º stack trace –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ($ErrorViewConfig.ShowStackTrace -and $InputObject.Exception.StackTrace)
        {
            $formattedMessage += "`nüìä Stack Trace:`n$( $InputObject.Exception.StackTrace )"
        }

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        Log-Error -ErrorRecord $InputObject -FormattedMessage $formattedMessage

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        $criticalErrors = @("UnauthorizedAccessException", "OutOfMemoryException", "StackOverflowException")
        if ($ErrorViewConfig.NotifyOnCritical -and $criticalErrors -contains $InputObject.Exception.GetType().Name)
        {
            $formattedMessage += "`nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!"
        }

        Console-Warn formattedMessage

        #            Get-ErrorTranslate($InputObject)
        #
        #            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
        #            $output += wrgb  "üî¥  –û—à–∏–±–∫–∞: "  -FC "#FF0000"
        #            $output += wrgb  $InputObject.Exception.Message  -FC "Material_Orange" -newline
        #
        #            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        #            $output += wrgb  "üìã  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " -FC "#FF3300"
        #            $output += wrgb  $InputObject.CategoryInfo.Category -FC "Material_Yellow" -newline
        #
        #            # –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        #            $output += wrgb "‚ö°  –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: " -FC "#FF5533"
        #            $output += wrgb   $InputObject.Exception.GetType().Name -FC "Material_Pink" -newline
        #
        #            # ID –æ—à–∏–±–∫–∏
        #            $output += wrgb "üÜî  ID –û—à–∏–±–∫–∏: " -FC "#FF5555"
        #            $output += wrgb  $InputObject.FullyQualifiedErrorId -FC Material_Purple -newline
        #
        #            # –ü–æ–∑–∏—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        #            if ($InputObject.InvocationInfo -and $InputObject.InvocationInfo.ScriptLineNumber)
        #            {
        #                $output += wrgb "üìç  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: "  -FC "#FF5533"
        #                $output += wrgb  " –õ–∏–Ω–∏—è " -FC "#FF3300"
        #                $output += wrgb    $InputObject.InvocationInfo.ScriptLineNumber  -FC "#FFFFFF"
        #                $output += wrgb     "  –ö–æ–ª–æ–Ω–∫–∞ "  -FC "#FF3300"
        #                $output += wrgb  $InputObject.InvocationInfo.OffsetInLine   -FC "#FFFFFF" -newline
        #            }
        #
        #            # –ö–æ–º–∞–Ω–¥–∞, –≤—ã–∑–≤–∞–≤—à–∞—è –æ—à–∏–±–∫—É
        #            if ($InputObject.InvocationInfo -and $InputObject.InvocationInfo.MyCommand)
        #            {
        #                $output += wrgb  "üîß  –ö–æ–º–∞–Ω–¥–∞: "  -FC "#FFAAAA"
        #                $output += wrgb $InputObject.InvocationInfo.MyCommand.Name -FC "#FF0000"  -newline
        #                wrgb "" -newline
        #            }
        #            $output

        return $formattedMessage

    }
    catch
    {
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return "‚ùå $( $InputObject.Exception.Message )"
    }
}

# –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
function ConvertTo-CompactErrorView
{
    [CmdletBinding()]
    param(
        [System.Management.Automation.ErrorRecord]$InputObject
    )

    $template = Get-ErrorTemplate -ErrorRecord $InputObject
    $translatedMessage = Translate-ErrorMessage -Message $InputObject.Exception.Message -ExceptionType $InputObject.Exception.GetType().Name
    Test-GradientDemo


    return "$( $template.Icon ) $translatedMessage"
}
#endregion

#region –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
function Set-ErrorViewConfig
{
    param(
        [string]$Language,
        [bool]$AutoTranslate,
        [bool]$ShowStackTrace,
        [bool]$ShowInnerExceptions,
        [bool]$UseColors,
        [bool]$LogErrors,
        [string]$LogPath,
        [bool]$NotifyOnCritical
    )

    if ($Language)
    {
        $ErrorViewConfig.Language = $Language
    }
    if ( $PSBoundParameters.ContainsKey('AutoTranslate'))
    {
        $ErrorViewConfig.AutoTranslate = $AutoTranslate
    }
    if ( $PSBoundParameters.ContainsKey('ShowStackTrace'))
    {
        $ErrorViewConfig.ShowStackTrace = $ShowStackTrace
    }
    if ( $PSBoundParameters.ContainsKey('ShowInnerExceptions'))
    {
        $ErrorViewConfig.ShowInnerExceptions = $ShowInnerExceptions
    }
    if ( $PSBoundParameters.ContainsKey('UseColors'))
    {
        $ErrorViewConfig.UseColors = $UseColors
    }
    if ( $PSBoundParameters.ContainsKey('LogErrors'))
    {
        $ErrorViewConfig.LogErrors = $LogErrors
    }
    if ($LogPath)
    {
        $ErrorViewConfig.LogPath = $LogPath
    }
    if ( $PSBoundParameters.ContainsKey('NotifyOnCritical'))
    {
        $ErrorViewConfig.NotifyOnCritical = $NotifyOnCritical
    }

    wrgb "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" -FC Green
}

function Get-ErrorViewConfig
{
    return $ErrorViewConfig
}

function Add-ErrorTemplate
{
    param(
        [string]$ExceptionType,
        [string]$Icon,
        [string]$Pattern,
        [string]$Template,
        [string]$Suggestion,
        [string]$Color = "Red"
    )

    $ErrorTemplates[$ExceptionType] = @{
        Icon = $Icon
        Pattern = $Pattern
        Template = $Template
        Suggestion = $Suggestion
        Color = $Color
    }

    wrgb "–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è $ExceptionType" -FC Green
}

function Add-ErrorTranslation
{
    param(
        [string]$Pattern,
        [string]$Translation
    )

    $ErrorTranslations[$Pattern] = $Translation
    wrgb "–î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '$Pattern'" -FC Green
}
#endregion

#region –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
function Enable-GlobalErrorHandler
{
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    #    $global:ErrorView = "Colorful"

    wrgb "‚úÖ  –í–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: " -FC TealRGB
    wrgb  $global:ErrorView -BC GoldRGB -FC BlackRGB -Style Bold -newline
}

function Disable-GlobalErrorHandler
{
    $global:ErrorView = "Simple"
    wrgb "‚ùå –û—Ç–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: " -FC Material_Yellow
    wrgb $global:ErrorView -FC WhiteRGB
}
#endregion


# –í–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
#Clear-Host
Enable-GlobalErrorHandler



function errorMethodsInfo
{
    wrgb "`n--- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã ---" -FC Yellow
    wrgb "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -FC Material_Pink -newline
    $config = Get-ErrorViewConfig
    $i = 0
    $config.GetEnumerator() | Sort-Object Key | ForEach-Object {
        wrgb   $_.Key" :  " -FC Gray
        $color = Get-GradientColor -Index (++$i) -TotalItems 4 -StartColor "#0057B7" -EndColor "#FFD700"
        wrgb   $_.Value -FC $color -newline
    }

    wrgb "`n--- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---" -FC Yellow
    @(
        "Enable-GlobalErrorHandler  - –≤–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫",
        "Disable-GlobalErrorHandler - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫",
        "Set-ErrorViewConfig        - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "Add-ErrorTemplate          - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—à–∏–±–∫–∏",
        "Add-ErrorTranslation       - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
        "Format-Error Smart         - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π",
        "Format-Error Compact       - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"
    ) | ForEach-Object {
        wrgb "  $_" -FC White -newline
    }

    #wrgb "`n--- –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ ---" -FC Yellow

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω
    Add-ErrorTemplate -ExceptionType "CustomException" -Icon "üéØ" -Pattern "custom.*error" -Template "{Icon} –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {Message}" -Suggestion "üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    Add-ErrorTranslation -Pattern "custom error occurred" -Translation "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞"
    #wrgb "`n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üöÄ" -FC Green
    #wrgb "–í—Å–µ –æ—à–∏–±–∫–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —É–º–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏." -FC White

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö
    if ($ErrorViewConfig.LogErrors)
    {
        wrgb "`nüìù –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤: " -FC "Material_Comment"
        wrgb  $ErrorViewConfig.LogPath  -BC "#162022" -FC "#000000"
    }
    else
    {
        Write-Host ""
    }
}

#errorMethodsInfo
#endregion
Trace-ImportProcess  $MyInvocation.MyCommand.Name.trim(".ps1")
