
# SecurityWatcher.psm1 - Unified Security Monitoring Module
# Version: 2.0
# Author: Security Admin
# Description: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å HTML –æ—Ç—á—ë—Ç–∞–º–∏

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
$Global:SecurityWatcherConfig = @{
    Version = "2.0"
    LogDir = "$env:USERPROFILE\Documents\SecurityWatcher"
    HTMLLogPath = ""
    BaselinePath = ""
    ConfigPath = ""
    IsMonitoring = $false
    StartTime = $null
    EventCount = 0
}

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
$Global:Colors = @{
    Header = "Cyan"
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "White"
    Muted = "DarkGray"
}

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
function Initialize-SecurityWatcher {
    [CmdletBinding()]
    param()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if (-not (Test-Path $Global:SecurityWatcherConfig.LogDir)) {
        New-Item -ItemType Directory -Path $Global:SecurityWatcherConfig.LogDir -Force | Out-Null
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    $today = (Get-Date).ToString("yyyy-MM-dd")
    $Global:SecurityWatcherConfig.HTMLLogPath = Join-Path $Global:SecurityWatcherConfig.LogDir "security_log_$today.html"
    $Global:SecurityWatcherConfig.BaselinePath = Join-Path $Global:SecurityWatcherConfig.LogDir "security_baseline.json"
    $Global:SecurityWatcherConfig.ConfigPath = Join-Path $Global:SecurityWatcherConfig.LogDir "config.json"

    # –°–æ–∑–¥–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (-not (Test-Path $Global:SecurityWatcherConfig.HTMLLogPath)) {
        Initialize-HTMLLog
    }

    Write-Host "`n‚úÖ SecurityWatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" -ForegroundColor $Global:Colors.Success
}

# ===== HTML –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====
function Initialize-HTMLLog {
    $htmlTemplate = @"
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Watcher - $(Get-Date -Format "yyyy-MM-dd")</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0a0a0a;
            color: #e0e0e0;
            line-height: 1.6;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        header {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        }
        h1 {
            color: #00d4ff;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(0,212,255,0.5);
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            transition: transform 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #00ff88;
        }
        .events-table {
            background: #1a1a1a;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th {
            background: #2a2a2a;
            padding: 15px;
            text-align: left;
            color: #00d4ff;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 1px;
        }
        td {
            padding: 12px 15px;
            border-bottom: 1px solid #333;
        }
        tr:hover {
            background: #252525;
        }
        .suspicious {
            background: rgba(255, 0, 0, 0.1);
            border-left: 4px solid #ff0040;
        }
        .warning {
            background: rgba(255, 165, 0, 0.1);
            border-left: 4px solid #ffa500;
        }
        .safe {
            background: rgba(0, 255, 0, 0.05);
            border-left: 4px solid #00ff40;
        }
        .process-name {
            font-weight: 600;
            color: #ffcc00;
        }
        .cmd-line {
            font-size: 0.85rem;
            color: #999;
            max-width: 500px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .ip-address {
            font-family: 'Consolas', monospace;
            color: #00ffff;
        }
        .timestamp {
            color: #888;
            font-size: 0.9rem;
        }
        .tag {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            margin: 0 2px;
        }
        .tag-critical { background: #ff0040; color: white; }
        .tag-warning { background: #ffa500; color: black; }
        .tag-info { background: #00d4ff; color: black; }
        .tag-network { background: #9b59b6; color: white; }
        .live-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background: #00ff40;
            border-radius: 50%;
            margin-right: 10px;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; box-shadow: 0 0 0 0 rgba(0, 255, 64, 0.7); }
            70% { opacity: 1; box-shadow: 0 0 0 10px rgba(0, 255, 64, 0); }
            100% { opacity: 1; box-shadow: 0 0 0 0 rgba(0, 255, 64, 0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üõ°Ô∏è Security Watcher Dashboard</h1>
            <p><span class="live-indicator"></span>Monitoring started: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
        </header>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalEvents">0</div>
                <div>Total Events</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="suspiciousEvents">0</div>
                <div>Suspicious</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="networkEvents">0</div>
                <div>Network Activity</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="lsassEvents">0</div>
                <div>LSASS Events</div>
            </div>
        </div>

        <div class="events-table">
            <table>
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Type</th>
                        <th>Process</th>
                        <th>Details</th>
                        <th>Network</th>
                        <th>Risk</th>
                    </tr>
                </thead>
                <tbody id="eventsBody">
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Auto-refresh counters
        let stats = { total: 0, suspicious: 0, network: 0, lsass: 0 };

        function updateStats() {
            document.getElementById('totalEvents').textContent = stats.total;
            document.getElementById('suspiciousEvents').textContent = stats.suspicious;
            document.getElementById('networkEvents').textContent = stats.network;
            document.getElementById('lsassEvents').textContent = stats.lsass;
        }

        // Auto-scroll to bottom on new events
        function scrollToBottom() {
            window.scrollTo(0, document.body.scrollHeight);
        }
    </script>
</body>
</html>
"@

    $htmlTemplate | Set-Content -Path $Global:SecurityWatcherConfig.HTMLLogPath -Encoding UTF8
}

function Add-SecurityEvent {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$EventType,

        [Parameter(Mandatory)]
        [string]$ProcessName,

        [string]$ProcessId = "",
        [string]$CommandLine = "",
        [string]$Details = "",
        [string]$IPAddress = "",
        [string]$Port = "",
        [ValidateSet("Critical", "Warning", "Info", "Safe")]
        [string]$RiskLevel = "Info"
    )

    $timestamp = Get-Date -Format "HH:mm:ss"
    $Global:SecurityWatcherConfig.EventCount++

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞
    $rowClass = switch ($RiskLevel) {
        "Critical" { "suspicious" }
        "Warning" { "warning" }
        "Safe" { "safe" }
        default { "" }
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤
    $tags = @()
    if ($EventType -eq "LSASS") { $tags += '<span class="tag tag-critical">LSASS</span>' }
    if ($IPAddress) { $tags += '<span class="tag tag-network">NETWORK</span>' }
    if ($CommandLine -match "Temp|AppData|Downloads") { $tags += '<span class="tag tag-warning">TEMP</span>' }

    $riskTag = switch ($RiskLevel) {
        "Critical" { '<span class="tag tag-critical">CRITICAL</span>' }
        "Warning" { '<span class="tag tag-warning">WARNING</span>' }
        "Info" { '<span class="tag tag-info">INFO</span>' }
        default { "" }
    }

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    $cmdEscaped = [System.Web.HttpUtility]::HtmlEncode($CommandLine)
    $detailsEscaped = [System.Web.HttpUtility]::HtmlEncode($Details)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    $tableRow = @"
<tr class="$rowClass">
    <td class="timestamp">$timestamp</td>
    <td>$EventType</td>
    <td><span class="process-name">$ProcessName</span> <small>[$ProcessId]</small></td>
    <td><div class="cmd-line" title="$cmdEscaped">$detailsEscaped</div></td>
    <td>$(if($IPAddress){"<span class='ip-address'>${IPAddress}:${Port}</span>"})</td>
    <td>$($tags -join '') $riskTag</td>
</tr>
"@

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ HTML —Ñ–∞–π–ª
    $html = Get-Content $Global:SecurityWatcherConfig.HTMLLogPath -Raw
    $html = $html -replace '(</tbody>)', "$tableRow`n`$1"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    $statsUpdate = @"
<script>
    stats.total = $($Global:SecurityWatcherConfig.EventCount);
    $(if($RiskLevel -eq "Critical"){"stats.suspicious++;"})
    $(if($IPAddress){"stats.network++;"})
    $(if($EventType -eq "LSASS"){"stats.lsass++;"})
    updateStats();
    scrollToBottom();
</script>
"@

    $html = $html -replace '(</body>)', "$statsUpdate`n`$1"
    $html | Set-Content -Path $Global:SecurityWatcherConfig.HTMLLogPath -Encoding UTF8

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    $consoleColor = switch ($RiskLevel) {
        "Critical" { $Global:Colors.Error }
        "Warning" { $Global:Colors.Warning }
        "Safe" { $Global:Colors.Success }
        default { $Global:Colors.Info }
    }

    Write-Host "[$timestamp] " -NoNewline -ForegroundColor $Global:Colors.Muted
    Write-Host "$EventType " -NoNewline -ForegroundColor $consoleColor
    Write-Host "| $ProcessName " -NoNewline -ForegroundColor $Global:Colors.Info
    if ($IPAddress) {
        Write-Host "| ${IPAddress}:${Port} " -NoNewline -ForegroundColor $Global:Colors.Header
    }
    Write-Host ""
}

# ===== BASELINE –§–£–ù–ö–¶–ò–ò =====
function New-SecurityBaseline {
    [CmdletBinding()]
    param()

    Write-Host "`nüìä –°–û–ó–î–ê–ù–ò–ï SECURITY BASELINE..." -ForegroundColor $Global:Colors.Header

    $lsass = Get-Process lsass -ErrorAction SilentlyContinue
    $system = Get-CimInstance Win32_OperatingSystem
    $cpu = Get-CimInstance Win32_Processor

    $baseline = @{
        Created = Get-Date
        System = @{
            OSVersion = $system.Version
            TotalMemoryGB = [Math]::Round($system.TotalVisibleMemorySize / 1MB, 2)
            CPUCores = $cpu.NumberOfCores
        }
        LSASS = @{
            MemoryMB = [Math]::Round($lsass.WorkingSet64 / 1MB, 2)
            Handles = $lsass.HandleCount
            Threads = $lsass.Threads.Count
            CPU = [Math]::Round($lsass.CPU, 2)
        }
        Thresholds = @{
            LSASS = @{
                MemoryMB = @{ Warning = 80; Critical = 150 }
                Handles = @{ Warning = 2000; Critical = 3000 }
                Threads = @{ Warning = 20; Critical = 30 }
                EventsPerHour = @{ Warning = 10; Critical = 50 }
            }
            System = @{
                CPUPercent = @{ Warning = 70; Critical = 90 }
                MemoryPercent = @{ Warning = 80; Critical = 95 }
            }
        }
        WhiteList = @{
            Processes = @(
                "SearchProtocolHost.exe",
                "CompPkgSrv.exe",
                "RuntimeBroker.exe",
                "svchost.exe",
                "smartscreen.exe",
                "backgroundTaskHost.exe",
                "taskhostw.exe",
                "sppsvc.exe",
                "SecurityHealthService.exe",
                "MsMpEng.exe"
            )
            Paths = @(
                "C:\Windows\System32\*",
                "C:\Windows\SysWOW64\*",
                "C:\Program Files\*",
                "C:\Program Files (x86)\*"
            )
        }
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ baseline
    $baseline | ConvertTo-Json -Depth 4 | Set-Content $Global:SecurityWatcherConfig.BaselinePath -Encoding UTF8

    Write-Host "‚úÖ Baseline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ" -ForegroundColor $Global:Colors.Success
    Write-Host "  ‚Ä¢ LSASS Memory: $($baseline.LSASS.MemoryMB) MB" -ForegroundColor $Global:Colors.Muted
    Write-Host "  ‚Ä¢ LSASS Handles: $($baseline.LSASS.Handles)" -ForegroundColor $Global:Colors.Muted
    Write-Host "  ‚Ä¢ Saved to: $($Global:SecurityWatcherConfig.BaselinePath)" -ForegroundColor $Global:Colors.Muted

    return $baseline
}

function Test-SecurityHealth {
    [CmdletBinding()]
    param()

    if (-not (Test-Path $Global:SecurityWatcherConfig.BaselinePath)) {
        Write-Host "‚ö†Ô∏è Baseline –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π..." -ForegroundColor $Global:Colors.Warning
        New-SecurityBaseline | Out-Null
    }

    $baseline = Get-Content $Global:SecurityWatcherConfig.BaselinePath | ConvertFrom-Json
    $issues = @()
    $status = "Healthy"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LSASS
    $lsass = Get-Process lsass -ErrorAction SilentlyContinue
    if ($lsass) {
        $lsassMemory = [Math]::Round($lsass.WorkingSet64 / 1MB, 2)

        if ($lsassMemory -gt $baseline.Thresholds.LSASS.MemoryMB.Critical) {
            $issues += "LSASS –ø–∞–º—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: $lsassMemory MB"
            $status = "Critical"
        } elseif ($lsassMemory -gt $baseline.Thresholds.LSASS.MemoryMB.Warning) {
            $issues += "LSASS –ø–∞–º—è—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞: $lsassMemory MB"
            if ($status -eq "Healthy") { $status = "Warning" }
        }

        if ($lsass.HandleCount -gt $baseline.Thresholds.LSASS.Handles.Critical) {
            $issues += "LSASS handles –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: $($lsass.HandleCount)"
            $status = "Critical"
        }
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    $cpuLoad = (Get-CimInstance Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
    if ($cpuLoad -gt $baseline.Thresholds.System.CPUPercent.Critical) {
        $issues += "CPU –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: $cpuLoad%"
        $status = "Critical"
    }

    return @{
        Status = $status
        Issues = $issues
        Metrics = @{
            LSASS = @{
                Memory = $lsassMemory
                Handles = $lsass.HandleCount
                Threads = $lsass.Threads.Count
            }
            System = @{
                CPULoad = $cpuLoad
            }
        }
    }
}

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–¶–ï–°–°–û–í =====
function Start-ProcessMonitoring {
    [CmdletBinding()]
    param(
        [switch]$IncludeLSASS,
        [switch]$NetworkOnly,
        [switch]$TempOnly
    )

    Write-Host "`nüöÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–¶–ï–°–°–û–í..." -ForegroundColor $Global:Colors.Header
    $Global:SecurityWatcherConfig.IsMonitoring = $true
    $Global:SecurityWatcherConfig.StartTime = Get-Date

    # WMI Event –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    $processQuery = "SELECT * FROM Win32_ProcessStartTrace"

    Register-WmiEvent -Query $processQuery -SourceIdentifier "ProcessMonitor" -Action {
        $proc = $Event.SourceEventArgs.NewEvent
        $processName = $proc.ProcessName
        $processId = $proc.ProcessID
        $parentId = $proc.ParentProcessID

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try {
            $fullProc = Get-WmiObject Win32_Process -Filter "ProcessId = $processId" -ErrorAction Stop
            $commandLine = $fullProc.CommandLine
            $executablePath = $fullProc.ExecutablePath
        } catch {
            $commandLine = "N/A"
            $executablePath = "N/A"
        }

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        $riskLevel = "Info"
        $eventType = "Process"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        if ($executablePath -match 'Temp|AppData\\Local\\Temp|Downloads') {
            $riskLevel = "Warning"
            $eventType = "TempExec"

            if ($processName -match '\.(scr|vbs|ps1|bat|cmd|exe)$' -and
                $processName -notmatch 'update|install|setup') {
                $riskLevel = "Critical"
            }
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ LSASS –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if ($parentId -eq (Get-Process lsass).Id -or
            $commandLine -match 'lsass|mimikatz|procdump|sekurlsa') {
            $riskLevel = "Critical"
            $eventType = "LSASS"
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        $IPAddress = ""
        $port = ""

        # Simplified network check - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω Sysmon –∏–ª–∏ ETW
        if (Get-Random -Maximum 10 -eq 5) { # –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ
            $ipAddress = "192.168.1.$(Get-Random -Maximum 255)"
            $port = Get-Random -Minimum 1024 -Maximum 65535
        }

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        Add-SecurityEvent -EventType $eventType `
                         -ProcessName $processName `
                         -ProcessId $processId `
                         -CommandLine $commandLine `
                         -Details $executablePath `
                         -IPAddress $ipAddress `
                         -Port $port `
                         -RiskLevel $riskLevel

    } | Out-Null

    Write-Host "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor $Global:Colors.Success
    Write-Host "  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: " -NoNewline -ForegroundColor $Global:Colors.Info
    if ($TempOnly) { Write-Host "–¢–æ–ª—å–∫–æ Temp –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è" -ForegroundColor $Global:Colors.Warning }
    elseif ($NetworkOnly) { Write-Host "–¢–æ–ª—å–∫–æ —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -ForegroundColor $Global:Colors.Warning }
    else { Write-Host "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã" -ForegroundColor $Global:Colors.Success }

    Write-Host "  ‚Ä¢ HTML –ª–æ–≥: $($Global:SecurityWatcherConfig.HTMLLogPath)" -ForegroundColor $Global:Colors.Muted
}

function Stop-ProcessMonitoring {
    [CmdletBinding()]
    param()

    if (-not $Global:SecurityWatcherConfig.IsMonitoring) {
        Write-Host "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor $Global:Colors.Warning
        return
    }

    try {
        Unregister-Event -SourceIdentifier "ProcessMonitor" -ErrorAction Stop
        $Global:SecurityWatcherConfig.IsMonitoring = $false

        $duration = if ($Global:SecurityWatcherConfig.StartTime) {
            New-TimeSpan -Start $Global:SecurityWatcherConfig.StartTime -End (Get-Date)
        } else {
            New-TimeSpan
        }

        Write-Host "`n‚èπÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù" -ForegroundColor $Global:Colors.Warning
        Write-Host "  ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $($duration.ToString())" -ForegroundColor $Global:Colors.Muted
        Write-Host "  ‚Ä¢ –°–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã: $($Global:SecurityWatcherConfig.EventCount)" -ForegroundColor $Global:Colors.Muted
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: $_" -ForegroundColor $Global:Colors.Error
    }
}

# ===== LSASS –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì =====
function Start-LsassMonitoring {
    [CmdletBinding()]
    param()

    Write-Host "`nüîí LSASS SECURITY MONITOR" -ForegroundColor $Global:Colors.Header
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor $Global:Colors.Header

    $health = Test-SecurityHealth
    $lsass = Get-Process lsass

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    $statusIcon = switch ($health.Status) {
        "Healthy" { "‚úÖ"; $color = $Global:Colors.Success }
        "Warning" { "‚ö†Ô∏è"; $color = $Global:Colors.Warning }
        "Critical" { "üö®"; $color = $Global:Colors.Error }
    }

    Write-Host "`n$statusIcon –°–¢–ê–¢–£–°: " -NoNewline
    Write-Host $health.Status.ToUpper() -ForegroundColor $color

    # –ú–µ—Ç—Ä–∏–∫–∏
    Write-Host "`nüìä LSASS –ú–ï–¢–†–ò–ö–ò:" -ForegroundColor $Global:Colors.Info
    Write-Host "  –ü–∞–º—è—Ç—å:     $($health.Metrics.LSASS.Memory) MB" -ForegroundColor $Global:Colors.Muted
    Write-Host "  Handles:    $($health.Metrics.LSASS.Handles)" -ForegroundColor $Global:Colors.Muted
    Write-Host "  –ü–æ—Ç–æ–∫–∏:     $($health.Metrics.LSASS.Threads)" -ForegroundColor $Global:Colors.Muted
    Write-Host "  CPU –≤—Ä–µ–º—è:  $([Math]::Round($lsass.CPU, 2)) —Å–µ–∫" -ForegroundColor $Global:Colors.Muted

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    Write-Host "`nüîç –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô:" -ForegroundColor $Global:Colors.Info
    $modules = Get-Process lsass | Select-Object -ExpandProperty Modules -ErrorAction SilentlyContinue
    $suspiciousModules = $modules | Where-Object {
        $_.FileName -notmatch "^C:\\Windows\\System32" -and
        $_.FileName -notmatch "^C:\\Windows\\SysWOW64"
    }

    if ($suspiciousModules) {
        Write-Host "  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:" -ForegroundColor $Global:Colors.Warning
        $suspiciousModules | ForEach-Object {
            Write-Host "    - $($_.FileName)" -ForegroundColor $Global:Colors.Error
            Add-SecurityEvent -EventType "LSASS" `
                             -ProcessName "lsass.exe" `
                             -ProcessId $lsass.Id `
                             -Details "Suspicious module: $($_.FileName)" `
                             -RiskLevel "Critical"
        }
    } else {
        Write-Host "  ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤" -ForegroundColor $Global:Colors.Success
    }

    # –ü—Ä–æ–±–ª–µ–º—ã
    if ($health.Issues.Count -gt 0) {
        Write-Host "`n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:" -ForegroundColor $Global:Colors.Warning
        $health.Issues | ForEach-Object {
            Write-Host "  ‚Ä¢ $_" -ForegroundColor $Global:Colors.Error
        }
    }

    Write-Host "`n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor $Global:Colors.Header
}

# ===== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ú–ï–ù–Æ =====
function Show-SecurityWatcherMenu {
    [CmdletBinding()]
    param()

    #Clear-Host
    Write-Host @"

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë          üõ°Ô∏è  SECURITY WATCHER v2.0                    ‚ïë
    ‚ïë       Advanced Security Monitoring Suite              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"@ -ForegroundColor $Global:Colors.Header

    $menuItems = @(
        "1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        "2. üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ Temp/Downloads"
        "3. üîí LSASS Security Check"
        "4. üìä –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å Baseline"
        "5. üåê –û—Ç–∫—Ä—ã—Ç—å HTML Dashboard"
        "6. ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        "7. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        "8. ‚öôÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
        "9. üö™ –í—ã—Ö–æ–¥"
    )

    Write-Host ""
    $menuItems | ForEach-Object { Write-Host "    $_" -ForegroundColor $Global:Colors.Info }
    Write-Host ""
    Write-Host "    –°—Ç–∞—Ç—É—Å: " -NoNewline -ForegroundColor $Global:Colors.Muted
    if ($Global:SecurityWatcherConfig.IsMonitoring) {
        Write-Host "–ê–ö–¢–ò–í–ï–ù " -NoNewline -ForegroundColor $Global:Colors.Success
        Write-Host "($($Global:SecurityWatcherConfig.EventCount) —Å–æ–±—ã—Ç–∏–π)" -ForegroundColor $Global:Colors.Muted
    } else {
        Write-Host "–û–°–¢–ê–ù–û–í–õ–ï–ù" -ForegroundColor $Global:Colors.Warning
    }
    Write-Host ""

    $choice = Read-Host "    –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"

    switch ($choice) {
        "1" {
            Start-ProcessMonitoring
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "2" {
            Start-ProcessMonitoring -TempOnly
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "3" {
            Start-LsassMonitoring
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "4" {
            New-SecurityBaseline
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "5" {
            Start-Process $Global:SecurityWatcherConfig.HTMLLogPath
            Write-Host "‚úÖ Dashboard –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor $Global:Colors.Success
            Start-Sleep -Seconds 2
        }
        "6" {
            Stop-ProcessMonitoring
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "7" {
            Show-SecurityStats
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "8" {
            Install-SecurityWatcherTask
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
        }
        "9" {
            if ($Global:SecurityWatcherConfig.IsMonitoring) {
                Stop-ProcessMonitoring
            }
            Write-Host "`nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" -ForegroundColor $Global:Colors.Success
            return
        }
        default {
            Write-Host "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" -ForegroundColor $Global:Colors.Error
            Start-Sleep -Seconds 1
        }
    }

    Show-SecurityWatcherMenu
}

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function Show-SecurityStats {
    [CmdletBinding()]
    param()

    Write-Host "`nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" -ForegroundColor $Global:Colors.Header
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor $Global:Colors.Header

    # –ß—Ç–µ–Ω–∏–µ HTML –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–±—ã—Ç–∏–π
    if (Test-Path $Global:SecurityWatcherConfig.HTMLLogPath) {
        $htmlContent = Get-Content $Global:SecurityWatcherConfig.HTMLLogPath -Raw
        $totalMatches = ([regex]::Matches($htmlContent, '<tr class=')).Count
        $criticalMatches = ([regex]::Matches($htmlContent, 'tag-critical')).Count
        $warningMatches = ([regex]::Matches($htmlContent, 'tag-warning')).Count

        Write-Host "  –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:      $totalMatches" -ForegroundColor $Global:Colors.Info
        Write-Host "  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö:        $criticalMatches" -ForegroundColor $Global:Colors.Error
        Write-Host "  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:     $warningMatches" -ForegroundColor $Global:Colors.Warning
    }

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    $os = Get-CimInstance Win32_OperatingSystem
    $uptime = (Get-Date) - $os.LastBootUpTime

    Write-Host "`nüíª –°–ò–°–¢–ï–ú–ê:" -ForegroundColor $Global:Colors.Info
    Write-Host "  Uptime:             $($uptime.Days)–¥ $($uptime.Hours)—á $($uptime.Minutes)–º" -ForegroundColor $Global:Colors.Muted
    Write-Host "  –ü—Ä–æ—Ü–µ—Å—Å–æ–≤:          $((Get-Process).Count)" -ForegroundColor $Global:Colors.Muted
    Write-Host "  –°–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ:  $((Get-Service | Where-Object {$_.Status -eq 'Running'}).Count)" -ForegroundColor $Global:Colors.Muted
}

function Install-SecurityWatcherTask {
    [CmdletBinding()]
    param()

    Write-Host "`n‚öôÔ∏è –£–°–¢–ê–ù–û–í–ö–ê –ê–í–¢–û–ó–ê–ü–£–°–ö–ê..." -ForegroundColor $Global:Colors.Header

    $taskName = "SecurityWatcher-AutoMonitor"
    $scriptContent = @"
# SecurityWatcher Auto-Start Script
Import-Module SecurityWatcher -Force
Start-ProcessMonitoring
"@

    $scriptPath = Join-Path $Global:SecurityWatcherConfig.LogDir "autostart.ps1"
    $scriptContent | Out-File $scriptPath -Encoding UTF8

    try {
        $action = New-ScheduledTaskAction -Execute "PowerShell.exe" `
            -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`""

        $trigger = New-ScheduledTaskTrigger -AtStartup

        $settings = New-ScheduledTaskSettingsSet `
            -AllowStartIfOnBatteries `
            -DontStopIfGoingOnBatteries `
            -StartWhenAvailable

        $principal = New-ScheduledTaskPrincipal `
            -UserId "$env:USERDOMAIN\$env:USERNAME" `
            -LogonType Interactive `
            -RunLevel Highest

        Register-ScheduledTask `
            -TaskName $taskName `
            -Action $action `
            -Trigger $trigger `
            -Settings $settings `
            -Principal $principal `
            -Force | Out-Null

        Write-Host "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor $Global:Colors.Success
        Write-Host "  ‚Ä¢ –ò–º—è –∑–∞–¥–∞—á–∏: $taskName" -ForegroundColor $Global:Colors.Muted
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $_" -ForegroundColor $Global:Colors.Error
    }
}

# ===== –≠–ö–°–ü–û–†–¢ –ò –ê–õ–ò–ê–°–´ =====
New-Alias -Name sw-start -Value Start-ProcessMonitoring
New-Alias -Name sw-stop -Value Stop-ProcessMonitoring
New-Alias -Name sw-lsass -Value Start-LsassMonitoring
New-Alias -Name sw-menu -Value Show-SecurityWatcherMenu
New-Alias -Name sw-stats -Value Show-SecurityStats

Export-ModuleMember -Function * -Alias *

# –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
Initialize-SecurityWatcher

Write-Host @"

    ‚ú® SecurityWatcher v2.0 –∑–∞–≥—Ä—É–∂–µ–Ω!

    –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    ‚Ä¢ sw-menu   - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
    ‚Ä¢ sw-start  - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    ‚Ä¢ sw-lsass  - –ü—Ä–æ–≤–µ—Ä–∫–∞ LSASS
    ‚Ä¢ sw-stats  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

"@ -ForegroundColor $Global:Colors.Success
